
Slider_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006594  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006730  08006730  00016730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b8  080067b8  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  080067b8  080067b8  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067b8  080067b8  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080067c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d0  0800698c  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800698c  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016905  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003267  00000000  00000000  00036b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00039d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  0003abf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f9f0  00000000  00000000  0003b8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f074  00000000  00000000  0005b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b13e1  00000000  00000000  0006a354  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b735  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  0011b7b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001d0 	.word	0x200001d0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006714 	.word	0x08006714

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001d4 	.word	0x200001d4
 80001d4:	08006714 	.word	0x08006714

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <get_amount_of_times>:

#include "FIFO.h"
#include <stdio.h>
#include <stdlib.h>

uint8_t get_amount_of_times(Fifo_data *data) {
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint8_t size = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
	if (!data) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d107      	bne.n	8000b62 <get_amount_of_times+0x22>
		return 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e00a      	b.n	8000b6c <get_amount_of_times+0x2c>
	}
	while (data->next) {
		size++;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
		data = data->next;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	607b      	str	r3, [r7, #4]
	while (data->next) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f5      	bne.n	8000b56 <get_amount_of_times+0x16>
	}
	return size;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <read_data>:

void read_data(Fifo_data **data, uint16_t *a, uint16_t *b) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	uint16_t retVal;
	if (*data == NULL) {
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d108      	bne.n	8000b9e <read_data+0x26>
		*a=-1;
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b92:	801a      	strh	r2, [r3, #0]
		*b=-1;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	801a      	strh	r2, [r3, #0]
		*b= (*data)->length;
		new = (*data)->next;
		free(*data);
		(*data) = new;
	}
}
 8000b9c:	e017      	b.n	8000bce <read_data+0x56>
		Fifo_data *new = NULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
		*a = (*data)->time;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	889a      	ldrh	r2, [r3, #4]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	801a      	strh	r2, [r3, #0]
		*b= (*data)->length;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	88da      	ldrh	r2, [r3, #6]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	801a      	strh	r2, [r3, #0]
		new = (*data)->next;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	617b      	str	r3, [r7, #20]
		free(*data);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 fbf8 	bl	80053b8 <free>
		(*data) = new;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <getLast>:

// Temporary function
static Fifo_data *getLast(Fifo_data *data)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	if(data)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d007      	beq.n	8000bf4 <getLast+0x1e>
	{
		while(data->next)
 8000be4:	e002      	b.n	8000bec <getLast+0x16>
			data=data->next;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	607b      	str	r3, [r7, #4]
		while(data->next)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f8      	bne.n	8000be6 <getLast+0x10>
	}
	return data;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <write_data_to_FIFO>:
void write_data_to_FIFO(Fifo_data **data, uint16_t val, uint16_t len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	803b      	strh	r3, [r7, #0]
	if(*data)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d019      	beq.n	8000c4e <write_data_to_FIFO+0x4c>
	{
		Fifo_data * current =getLast(*data);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ffd9 	bl	8000bd6 <getLast>
 8000c24:	60f8      	str	r0, [r7, #12]
		current->next=(Fifo_data *)malloc(sizeof(Fifo_data));
 8000c26:	2008      	movs	r0, #8
 8000c28:	f004 fbbe 	bl	80053a8 <malloc>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	601a      	str	r2, [r3, #0]
		current->next->next = NULL;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
		current->next->time= val;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	887a      	ldrh	r2, [r7, #2]
 8000c42:	809a      	strh	r2, [r3, #4]
		current->next->length=len;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	883a      	ldrh	r2, [r7, #0]
 8000c4a:	80da      	strh	r2, [r3, #6]
		(*data)=(Fifo_data*)malloc(sizeof(Fifo_data));
		(*data)->next=NULL;
		(*data)->time=val;
		(*data)->length=len;
	}
}
 8000c4c:	e012      	b.n	8000c74 <write_data_to_FIFO+0x72>
		(*data)=(Fifo_data*)malloc(sizeof(Fifo_data));
 8000c4e:	2008      	movs	r0, #8
 8000c50:	f004 fbaa 	bl	80053a8 <malloc>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	601a      	str	r2, [r3, #0]
		(*data)->next=NULL;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
		(*data)->time=val;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	887a      	ldrh	r2, [r7, #2]
 8000c6a:	809a      	strh	r2, [r3, #4]
		(*data)->length=len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	883a      	ldrh	r2, [r7, #0]
 8000c72:	80da      	strh	r2, [r3, #6]
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <read_time>:
int read_time(Fifo_data *data)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	int time = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
	if(!data)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10a      	bne.n	8000ca4 <read_time+0x28>
	{
		return 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e00c      	b.n	8000cac <read_time+0x30>
	}
	else{
		while(data)
		{
			time+=data->time;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	889b      	ldrh	r3, [r3, #4]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
			data=data->next;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	607b      	str	r3, [r7, #4]
		while(data)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f3      	bne.n	8000c92 <read_time+0x16>
		}
	}
	return time;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_TIM_PeriodElapsedCallback>:

MotorErr retval = MOTOR_OK;

DataReadEnum DataRead = data_unavailable;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a3b      	ldr	r2, [pc, #236]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d160      	bne.n	8000d8c <HAL_TIM_PeriodElapsedCallback+0xd4>
		if(MOTOR_OK == retval)
 8000cca:	4b3b      	ldr	r3, [pc, #236]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d117      	bne.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			for(int i=0;i<MOTORS_NUM;i++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e010      	b.n	8000cfa <HAL_TIM_PeriodElapsedCallback+0x42>
			{
				retval = motorRun(&Motor_set[i]);
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fbd4 	bl	8001494 <motorRun>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cf2:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<MOTORS_NUM;i++)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	ddeb      	ble.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x20>
			state = run_trigger(&timer_T);
		else {
			// Do nothing
		}
	}
}
 8000d00:	e054      	b.n	8000dac <HAL_TIM_PeriodElapsedCallback+0xf4>
		else if(MOTOR_INTERRUPT_ERROR == retval)
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d12c      	bne.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0xac>
			for(int i=0;i<MOTORS_NUM;i++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	e025      	b.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0xa4>
				if(i==0)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d107      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x6e>
					retval = set(Motor_set);
 8000d16:	4829      	ldr	r0, [pc, #164]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d18:	f000 fe90 	bl	8001a3c <set>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	e00d      	b.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x8a>
					retval = set_for_angle(&Motor_set[i]);
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d32:	4413      	add	r3, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fedb 	bl	8001af0 <set_for_angle>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000d40:	701a      	strb	r2, [r3, #0]
				motorStartMove(&Motor_set[i]);
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4613      	mov	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	1a9b      	subs	r3, r3, r2
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fc38 	bl	80015c6 <motorStartMove>
			for(int i=0;i<MOTORS_NUM;i++)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	ddd6      	ble.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x58>
}
 8000d62:	e023      	b.n	8000dac <HAL_TIM_PeriodElapsedCallback+0xf4>
			for(int i=0;i<MOTORS_NUM;i++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e00c      	b.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0xcc>
				motorStop(&Motor_set[i]);
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d76:	4413      	add	r3, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fb5e 	bl	800143a <motorStop>
			for(int i=0;i<MOTORS_NUM;i++)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	ddef      	ble.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0xb2>
}
 8000d8a:	e00f      	b.n	8000dac <HAL_TIM_PeriodElapsedCallback+0xf4>
	} else if (htim->Instance == TIM7) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d10a      	bne.n	8000dac <HAL_TIM_PeriodElapsedCallback+0xf4>
		if (1 == state)
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d106      	bne.n	8000dac <HAL_TIM_PeriodElapsedCallback+0xf4>
			state = run_trigger(&timer_T);
 8000d9e:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000da0:	f000 fdd2 	bl	8001948 <run_trigger>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000daa:	701a      	strb	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40001000 	.word	0x40001000
 8000db8:	200001ec 	.word	0x200001ec
 8000dbc:	20000288 	.word	0x20000288
 8000dc0:	40001400 	.word	0x40001400
 8000dc4:	20000001 	.word	0x20000001
 8000dc8:	20000200 	.word	0x20000200

08000dcc <HAL_UART_RxCpltCallback>:
			//motorStop(Motor_set + i);
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_UART_RxCpltCallback+0x38>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10e      	bne.n	8000dfc <HAL_UART_RxCpltCallback+0x30>
		static int idx=1;
		HAL_UART_Receive_IT(&huart3, (uint16_t*) (data+idx), 2);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_UART_RxCpltCallback+0x3c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_UART_RxCpltCallback+0x40>)
 8000de6:	4413      	add	r3, r2
 8000de8:	2202      	movs	r2, #2
 8000dea:	4619      	mov	r1, r3
 8000dec:	4808      	ldr	r0, [pc, #32]	; (8000e10 <HAL_UART_RxCpltCallback+0x44>)
 8000dee:	f003 fc39 	bl	8004664 <HAL_UART_Receive_IT>
		idx++;
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_UART_RxCpltCallback+0x3c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <HAL_UART_RxCpltCallback+0x3c>)
 8000dfa:	6013      	str	r3, [r2, #0]
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004800 	.word	0x40004800
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	2000023c 	.word	0x2000023c
 8000e10:	2000045c 	.word	0x2000045c

08000e14 <add_motors>:
				},
};


void add_motors(Motor_T *sett)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	sett[0]=motor1;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <add_motors+0x44>)
 8000e20:	4618      	mov	r0, r3
 8000e22:	4611      	mov	r1, r2
 8000e24:	2370      	movs	r3, #112	; 0x70
 8000e26:	461a      	mov	r2, r3
 8000e28:	f004 face 	bl	80053c8 <memcpy>
	sett[1]=motor2;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3370      	adds	r3, #112	; 0x70
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <add_motors+0x48>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	4611      	mov	r1, r2
 8000e36:	2370      	movs	r3, #112	; 0x70
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f004 fac5 	bl	80053c8 <memcpy>
	sett[2]=motor3;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	33e0      	adds	r3, #224	; 0xe0
 8000e42:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <add_motors+0x4c>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	4611      	mov	r1, r2
 8000e48:	2370      	movs	r3, #112	; 0x70
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f004 fabc 	bl	80053c8 <memcpy>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000078 	.word	0x20000078
 8000e60:	200000e8 	.word	0x200000e8

08000e64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	4a52      	ldr	r2, [pc, #328]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e84:	6153      	str	r3, [r2, #20]
 8000e86:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a4c      	ldr	r2, [pc, #304]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000eb4:	6153      	str	r3, [r2, #20]
 8000eb6:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ecc:	6153      	str	r3, [r2, #20]
 8000ece:	4b3e      	ldr	r3, [pc, #248]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	4a3a      	ldr	r2, [pc, #232]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ee4:	6153      	str	r3, [r2, #20]
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <MX_GPIO_Init+0x164>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAMERA_T_Pin|MOBILE_T_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2124      	movs	r1, #36	; 0x24
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f001 fc3f 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_MS1_Pin|MOTOR2_STEP_Pin|MOTOR2_DIR_Pin|MOTOR1_STEP_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f001 fc38 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f641 71f0 	movw	r1, #8176	; 0x1ff0
 8000f12:	482e      	ldr	r0, [pc, #184]	; (8000fcc <MX_GPIO_Init+0x168>)
 8000f14:	f001 fc32 	bl	800277c <HAL_GPIO_WritePin>
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin|MOTOR3_MS3_Pin|MOTOR3_MS2_Pin
                          |MOTOR3_MS1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f24c 0173 	movw	r1, #49267	; 0xc073
 8000f1e:	482c      	ldr	r0, [pc, #176]	; (8000fd0 <MX_GPIO_Init+0x16c>)
 8000f20:	f001 fc2c 	bl	800277c <HAL_GPIO_WritePin>
                          |MOTOR3_DIR_Pin|MOTOR3_STEP_Pin|MOTOR3_SLEEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR3_RESET_GPIO_Port, MOTOR3_RESET_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2104      	movs	r1, #4
 8000f28:	482a      	ldr	r0, [pc, #168]	; (8000fd4 <MX_GPIO_Init+0x170>)
 8000f2a:	f001 fc27 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CAMERA_T_Pin|MOTOR2_MS1_Pin|MOBILE_T_Pin|MOTOR2_STEP_Pin
 8000f2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f32:	617b      	str	r3, [r7, #20]
                          |MOTOR2_DIR_Pin|MOTOR1_STEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f001 fa8d 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000f4e:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 8000f52:	617b      	str	r3, [r7, #20]
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin|MOTOR3_MS3_Pin|MOTOR3_MS2_Pin
                          |MOTOR3_MS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4819      	ldr	r0, [pc, #100]	; (8000fcc <MX_GPIO_Init+0x168>)
 8000f68:	f001 fa7e 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin
 8000f6c:	f24c 0373 	movw	r3, #49267	; 0xc073
 8000f70:	617b      	str	r3, [r7, #20]
                          |MOTOR3_DIR_Pin|MOTOR3_STEP_Pin|MOTOR3_SLEEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <MX_GPIO_Init+0x16c>)
 8000f86:	f001 fa6f 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_Pin;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_GPIO_Init+0x174>)
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <MX_GPIO_Init+0x16c>)
 8000f9e:	f001 fa63 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR3_RESET_Pin;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR3_RESET_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_GPIO_Init+0x170>)
 8000fba:	f001 fa55 	bl	8002468 <HAL_GPIO_Init>

}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48000c00 	.word	0x48000c00
 8000fd8:	10110000 	.word	0x10110000

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe2:	f001 f869 	bl	80020b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe6:	f000 f899 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fea:	f7ff ff3b 	bl	8000e64 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000fee:	f000 ff0f 	bl	8001e10 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000ff2:	f000 ffbb 	bl	8001f6c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000ff6:	f000 ff41 	bl	8001e7c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	add_motors(Motor_set);
 8000ffa:	483f      	ldr	r0, [pc, #252]	; (80010f8 <main+0x11c>)
 8000ffc:	f7ff ff0a 	bl	8000e14 <add_motors>
	HAL_UART_Receive_IT(&huart3, (uint16_t*) data, 2);
 8001000:	2202      	movs	r2, #2
 8001002:	493e      	ldr	r1, [pc, #248]	; (80010fc <main+0x120>)
 8001004:	483e      	ldr	r0, [pc, #248]	; (8001100 <main+0x124>)
 8001006:	f003 fb2d 	bl	8004664 <HAL_UART_Receive_IT>
	while (data_unavailable == DataRead)
 800100a:	e006      	b.n	800101a <main+0x3e>
		DataRead = DataReceive(data);
 800100c:	483b      	ldr	r0, [pc, #236]	; (80010fc <main+0x120>)
 800100e:	f000 fc39 	bl	8001884 <DataReceive>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <main+0x128>)
 8001018:	701a      	strb	r2, [r3, #0]
	while (data_unavailable == DataRead)
 800101a:	4b3a      	ldr	r3, [pc, #232]	; (8001104 <main+0x128>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d0f4      	beq.n	800100c <main+0x30>
	//Waiting for data
	UART_WriteData(Motor_set, data, &timer_T);
 8001022:	4a39      	ldr	r2, [pc, #228]	; (8001108 <main+0x12c>)
 8001024:	4935      	ldr	r1, [pc, #212]	; (80010fc <main+0x120>)
 8001026:	4834      	ldr	r0, [pc, #208]	; (80010f8 <main+0x11c>)
 8001028:	f000 fbd6 	bl	80017d8 <UART_WriteData>
	init_t(&timer_T, Motor_set);
 800102c:	4932      	ldr	r1, [pc, #200]	; (80010f8 <main+0x11c>)
 800102e:	4836      	ldr	r0, [pc, #216]	; (8001108 <main+0x12c>)
 8001030:	f000 fcf1 	bl	8001a16 <init_t>
	for (int i = 0; i < MOTORS_NUM; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	e01f      	b.n	800107a <main+0x9e>
		Motor_Init(Motor_set + i);
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	461a      	mov	r2, r3
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <main+0x11c>)
 8001048:	4413      	add	r3, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f9b2 	bl	80013b4 <Motor_Init>
		if (i == 0)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <main+0x82>
			set(Motor_set);
 8001056:	4828      	ldr	r0, [pc, #160]	; (80010f8 <main+0x11c>)
 8001058:	f000 fcf0 	bl	8001a3c <set>
 800105c:	e00a      	b.n	8001074 <main+0x98>
		else
			set_for_angle(Motor_set + i);
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	461a      	mov	r2, r3
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <main+0x11c>)
 800106c:	4413      	add	r3, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fd3e 	bl	8001af0 <set_for_angle>
	for (int i = 0; i < MOTORS_NUM; i++) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3301      	adds	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b02      	cmp	r3, #2
 800107e:	dddc      	ble.n	800103a <main+0x5e>
	}
	motorStartMove(Motor_set);
 8001080:	481d      	ldr	r0, [pc, #116]	; (80010f8 <main+0x11c>)
 8001082:	f000 faa0 	bl	80015c6 <motorStartMove>
	motorStartMove(&Motor_set[1]);
 8001086:	4821      	ldr	r0, [pc, #132]	; (800110c <main+0x130>)
 8001088:	f000 fa9d 	bl	80015c6 <motorStartMove>
	motorStartMove(&Motor_set[2]);
 800108c:	4820      	ldr	r0, [pc, #128]	; (8001110 <main+0x134>)
 800108e:	f000 fa9a 	bl	80015c6 <motorStartMove>
	while(data_confirm != DataRead)
 8001092:	e006      	b.n	80010a2 <main+0xc6>
		DataRead = DataReceive(data);
 8001094:	4819      	ldr	r0, [pc, #100]	; (80010fc <main+0x120>)
 8001096:	f000 fbf5 	bl	8001884 <DataReceive>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <main+0x128>)
 80010a0:	701a      	strb	r2, [r3, #0]
	while(data_confirm != DataRead)
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <main+0x128>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d1f4      	bne.n	8001094 <main+0xb8>
	HAL_TIM_Base_Start_IT(&htim6);
 80010aa:	481a      	ldr	r0, [pc, #104]	; (8001114 <main+0x138>)
 80010ac:	f002 ff14 	bl	8003ed8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80010b0:	4819      	ldr	r0, [pc, #100]	; (8001118 <main+0x13c>)
 80010b2:	f002 ff11 	bl	8003ed8 <HAL_TIM_Base_Start_IT>
	UART_startmove();
 80010b6:	f000 fb6f 	bl	8001798 <UART_startmove>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(data_stop == DataReceive(data))
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <main+0x120>)
 80010bc:	f000 fbe2 	bl	8001884 <DataReceive>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d1f9      	bne.n	80010ba <main+0xde>
		{
			for(int i=0;i<MOTORS_NUM;++i)
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	e00d      	b.n	80010e8 <main+0x10c>
				motorStop(Motor_set+i);
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <main+0x11c>)
 80010da:	4413      	add	r3, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f9ac 	bl	800143a <motorStop>
			for(int i=0;i<MOTORS_NUM;++i)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	ddee      	ble.n	80010cc <main+0xf0>
			HAL_TIM_Base_Stop_IT(&htim7);
 80010ee:	480a      	ldr	r0, [pc, #40]	; (8001118 <main+0x13c>)
 80010f0:	f002 ff1c 	bl	8003f2c <HAL_TIM_Base_Stop_IT>
		if(data_stop == DataReceive(data))
 80010f4:	e7e1      	b.n	80010ba <main+0xde>
 80010f6:	bf00      	nop
 80010f8:	20000288 	.word	0x20000288
 80010fc:	2000023c 	.word	0x2000023c
 8001100:	2000045c 	.word	0x2000045c
 8001104:	20000000 	.word	0x20000000
 8001108:	20000200 	.word	0x20000200
 800110c:	200002f8 	.word	0x200002f8
 8001110:	20000368 	.word	0x20000368
 8001114:	200003dc 	.word	0x200003dc
 8001118:	2000041c 	.word	0x2000041c

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b0a6      	sub	sp, #152	; 0x98
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001126:	2228      	movs	r2, #40	; 0x28
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f957 	bl	80053de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2258      	movs	r2, #88	; 0x58
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f004 f949 	bl	80053de <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114c:	2301      	movs	r3, #1
 800114e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001156:	2301      	movs	r3, #1
 8001158:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001168:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800116c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fb16 	bl	80027ac <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001186:	f000 f827 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2302      	movs	r3, #2
 8001190:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011a4:	2102      	movs	r1, #2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fa16 	bl	80035d8 <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011b2:	f000 f811 	bl	80011d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b6:	2304      	movs	r3, #4
 80011b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fc3f 	bl	8003a44 <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011cc:	f000 f804 	bl	80011d8 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3798      	adds	r7, #152	; 0x98
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <Motor_PinMode>:
 * 4 -> 1/16 steep
 *
 * While init mircosteep is set to 0 ( Full steep)
 ********************************************/

void Motor_PinMode(Motor_T *sett) {
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6998      	ldr	r0, [r3, #24]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	8b99      	ldrh	r1, [r3, #28]
			(sett->flags.isOn) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 8001202:	461a      	mov	r2, r3
 8001204:	f001 faba 	bl	800277c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	8899      	ldrh	r1, [r3, #4]
			(sett->flags.reset) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	f001 faa8 	bl	800277c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	8999      	ldrh	r1, [r3, #12]
			(sett->flags.sleep) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	f001 fa96 	bl	800277c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6918      	ldr	r0, [r3, #16]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	8a99      	ldrh	r1, [r3, #20]
			(sett->flags.direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800125e:	08db      	lsrs	r3, r3, #3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 8001268:	461a      	mov	r2, r3
 800126a:	f001 fa87 	bl	800277c <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <Motor_MicroPinSet>:

MotorErr Motor_MicroPinSet(Motor_T *sett) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	MotorErr retValue = MOTOR_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
	switch (sett->device.microstep) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800128a:	2b04      	cmp	r3, #4
 800128c:	f200 808b 	bhi.w	80013a6 <Motor_MicroPinSet+0x12e>
 8001290:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <Motor_MicroPinSet+0x20>)
 8001292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001296:	bf00      	nop
 8001298:	080012ad 	.word	0x080012ad
 800129c:	080012df 	.word	0x080012df
 80012a0:	08001311 	.word	0x08001311
 80012a4:	08001343 	.word	0x08001343
 80012a8:	08001375 	.word	0x08001375
	case 0:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a18      	ldr	r0, [r3, #32]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 fa60 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	f001 fa58 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	f001 fa50 	bl	800277c <HAL_GPIO_WritePin>
		break;
 80012dc:	e065      	b.n	80013aa <Motor_MicroPinSet+0x132>
	case 1:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a18      	ldr	r0, [r3, #32]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012e6:	2201      	movs	r2, #1
 80012e8:	4619      	mov	r1, r3
 80012ea:	f001 fa47 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f001 fa3f 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	f001 fa37 	bl	800277c <HAL_GPIO_WritePin>
		break;
 800130e:	e04c      	b.n	80013aa <Motor_MicroPinSet+0x132>
	case 2:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a18      	ldr	r0, [r3, #32]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	f001 fa2e 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001328:	2201      	movs	r2, #1
 800132a:	4619      	mov	r1, r3
 800132c:	f001 fa26 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001338:	2200      	movs	r2, #0
 800133a:	4619      	mov	r1, r3
 800133c:	f001 fa1e 	bl	800277c <HAL_GPIO_WritePin>
		break;
 8001340:	e033      	b.n	80013aa <Motor_MicroPinSet+0x132>
	case 3:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a18      	ldr	r0, [r3, #32]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	f001 fa15 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800135a:	2201      	movs	r2, #1
 800135c:	4619      	mov	r1, r3
 800135e:	f001 fa0d 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800136a:	2200      	movs	r2, #0
 800136c:	4619      	mov	r1, r3
 800136e:	f001 fa05 	bl	800277c <HAL_GPIO_WritePin>
		break;
 8001372:	e01a      	b.n	80013aa <Motor_MicroPinSet+0x132>

	case 4:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a18      	ldr	r0, [r3, #32]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800137c:	2201      	movs	r2, #1
 800137e:	4619      	mov	r1, r3
 8001380:	f001 f9fc 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800138c:	2201      	movs	r2, #1
 800138e:	4619      	mov	r1, r3
 8001390:	f001 f9f4 	bl	800277c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_SET);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800139c:	2201      	movs	r2, #1
 800139e:	4619      	mov	r1, r3
 80013a0:	f001 f9ec 	bl	800277c <HAL_GPIO_WritePin>
		break;
 80013a4:	e001      	b.n	80013aa <Motor_MicroPinSet+0x132>
	default:
		retValue = MOTOR_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
	}
	return retValue;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <Motor_Init>:

void Motor_Init(Motor_T *sett) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	sett->flags.isOn = 0;
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80013c2:	f36f 0300 	bfc	r3, #0, #1
 80013c6:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.reset = 0;
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80013d0:	f36f 0341 	bfc	r3, #1, #1
 80013d4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.direction = CWC;
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80013de:	f36f 03c3 	bfc	r3, #3, #1
 80013e2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.stepPhase = LOW;
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80013fa:	f36f 1304 	bfc	r3, #4, #1
 80013fe:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	sett->counter.pulse = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sett->counter.stepLeft = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
	sett->data.position = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	659a      	str	r2, [r3, #88]	; 0x58
	sett->device.points_num = -1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	22ff      	movs	r2, #255	; 0xff
 800141a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	sett->device.microstep = 0;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Motor_PinMode(sett);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fedd 	bl	80011e6 <Motor_PinMode>
	Motor_MicroPinSet(sett);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff23 	bl	8001278 <Motor_MicroPinSet>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <motorStop>:

MotorErr motorStop(Motor_T *sett) {
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]

	if (sett->flags.reset) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <motorStop+0x20>
		return MOTOR_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e018      	b.n	800148c <motorStop+0x52>
	}

	sett->flags.isOn = 0;
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001460:	f36f 0300 	bfc	r3, #0, #1
 8001464:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.stepPhase = LOW;
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800147c:	f36f 1304 	bfc	r3, #4, #1
 8001480:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	Motor_PinMode(sett);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff feae 	bl	80011e6 <Motor_PinMode>

	return retval;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <motorRun>:
MotorErr motorRun(Motor_T *sett) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
	if (!sett->flags.reset && !sett->flags.sleep) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 8081 	bne.w	80015b4 <motorRun+0x120>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d178      	bne.n	80015b4 <motorRun+0x120>
		--(sett->counter.changeTime);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	879a      	strh	r2, [r3, #60]	; 0x3c
		if (sett->counter.changeTime <= 0) {
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d171      	bne.n	80015ba <motorRun+0x126>
			sett->counter.changeTime = sett->counter.pulse;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	879a      	strh	r2, [r3, #60]	; 0x3c
			--(sett->counter.stepLeft);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40

			if (sett->counter.stepLeft <= 0) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	dc04      	bgt.n	80014fc <motorRun+0x68>
				motorStop(sett);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa1 	bl	800143a <motorStop>
				return MOTOR_INTERRUPT_ERROR;
 80014f8:	2302      	movs	r3, #2
 80014fa:	e060      	b.n	80015be <motorRun+0x12a>
			}

			switch (sett->flags.stepPhase) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001502:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d010      	beq.n	800152e <motorRun+0x9a>
 800150c:	2b01      	cmp	r3, #1
 800150e:	d148      	bne.n	80015a2 <motorRun+0x10e>
			case HIGH:
				sett->flags.stepPhase = LOW;
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001516:	f36f 1304 	bfc	r3, #4, #1
 800151a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 0;
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001524:	f36f 0300 	bfc	r3, #0, #1
 8001528:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				break;
 800152c:	e03b      	b.n	80015a6 <motorRun+0x112>
			case LOW:
				sett->flags.stepPhase = HIGH;
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001534:	f043 0310 	orr.w	r3, r3, #16
 8001538:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 1;
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				if (sett->flags.direction == CWC) {
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d111      	bne.n	800157e <motorRun+0xea>
					sett->data.position -= sett->device.stepSize;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001574:	ee17 2a90 	vmov	r2, s15
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	659a      	str	r2, [r3, #88]	; 0x58
				} else {
					sett->data.position += sett->device.stepSize;
				}
				break;
 800157c:	e013      	b.n	80015a6 <motorRun+0x112>
					sett->data.position += sett->device.stepSize;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001598:	ee17 2a90 	vmov	r2, s15
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	659a      	str	r2, [r3, #88]	; 0x58
				break;
 80015a0:	e001      	b.n	80015a6 <motorRun+0x112>
			default:
				retval = MOTOR_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
			}
			if (retval == MOTOR_OK) {
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d106      	bne.n	80015ba <motorRun+0x126>
				Motor_PinMode(sett);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fe1a 	bl	80011e6 <Motor_PinMode>
		if (sett->counter.changeTime <= 0) {
 80015b2:	e002      	b.n	80015ba <motorRun+0x126>
			}
		}
	} else {
		retval = MOTOR_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e000      	b.n	80015bc <motorRun+0x128>
		if (sett->counter.changeTime <= 0) {
 80015ba:	bf00      	nop
	}

	return retval;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <motorStartMove>:
MotorErr motorStartMove(Motor_T *sett) {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	if (sett->counter.stepLeft <= 0 || sett->counter.pulse <= 0) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	dd04      	ble.n	80015e0 <motorStartMove+0x1a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <motorStartMove+0x1e>
		return MOTOR_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e025      	b.n	8001630 <motorStartMove+0x6a>
	}

	if (sett->flags.reset) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <motorStartMove+0x32>
		return MOTOR_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e01b      	b.n	8001630 <motorStartMove+0x6a>
	}

	if (sett->flags.stepPhase != LOW) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <motorStartMove+0x46>
		return MOTOR_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e011      	b.n	8001630 <motorStartMove+0x6a>
	}

	sett->flags.sleep = 0;
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001612:	f36f 0382 	bfc	r3, #2, #1
 8001616:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 1;
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	Motor_PinMode(sett);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fddc 	bl	80011e6 <Motor_PinMode>

	return MOTOR_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <prepareMotor>:

void prepareMotor(Motor_T *sett)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	if(sett->device.positionStart <0)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8001646:	2b00      	cmp	r3, #0
 8001648:	da07      	bge.n	800165a <prepareMotor+0x22>
		sett->flags.direction = CWC;
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001650:	f36f 03c3 	bfc	r3, #3, #1
 8001654:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8001658:	e006      	b.n	8001668 <prepareMotor+0x30>
	else
		sett->flags.direction = CW;
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	sett->flags.sleep = 0;
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800166e:	f36f 0382 	bfc	r3, #2, #1
 8001672:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 1;
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	uint8_t iter = ceil(abs(sett->device.positionStart)/sett->device.stepSize);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800168a:	2b00      	cmp	r3, #0
 800168c:	bfb8      	it	lt
 800168e:	425b      	neglt	r3, r3
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800169e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016a2:	ee16 0a90 	vmov	r0, s13
 80016a6:	f7fe fefb 	bl	80004a0 <__aeabi_f2d>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	ec44 3b10 	vmov	d0, r3, r4
 80016b2:	f003 ff59 	bl	8005568 <ceil>
 80016b6:	ec54 3b10 	vmov	r3, r4, d0
 80016ba:	4618      	mov	r0, r3
 80016bc:	4621      	mov	r1, r4
 80016be:	f7ff fa1f 	bl	8000b00 <__aeabi_d2uiz>
 80016c2:	4603      	mov	r3, r0
 80016c4:	72fb      	strb	r3, [r7, #11]
	Motor_PinMode(sett);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fd8d 	bl	80011e6 <Motor_PinMode>

	for(int i=0;i<iter;++i)
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e018      	b.n	8001704 <prepareMotor+0xcc>
	{
		HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN, GPIO_PIN_SET);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6998      	ldr	r0, [r3, #24]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	8b9b      	ldrh	r3, [r3, #28]
 80016da:	2201      	movs	r2, #1
 80016dc:	4619      	mov	r1, r3
 80016de:	f001 f84d 	bl	800277c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 fd4e 	bl	8002184 <HAL_Delay>
		HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN, GPIO_PIN_RESET);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6998      	ldr	r0, [r3, #24]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	8b9b      	ldrh	r3, [r3, #28]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f001 f842 	bl	800277c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f000 fd43 	bl	8002184 <HAL_Delay>
	for(int i=0;i<iter;++i)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	7afb      	ldrb	r3, [r7, #11]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbe2      	blt.n	80016d2 <prepareMotor+0x9a>
	}

	sett->flags.sleep = 1;
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 0;
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001720:	f36f 0300 	bfc	r3, #0, #1
 8001724:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.direction = (sett->flags.direction) ? CWC : CW;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2d9      	uxtb	r1, r3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001744:	f361 03c3 	bfi	r3, r1, #3, #1
 8001748:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	Motor_PinMode(sett);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fd4a 	bl	80011e6 <Motor_PinMode>
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bd90      	pop	{r4, r7, pc}
	...

0800175c <UART_Confirm>:
#include <stdio.h>
#include <stdint.h>



void UART_Confirm(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	msg_size = 0;
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <UART_Confirm+0x2c>)
 8001762:	2200      	movs	r2, #0
 8001764:	801a      	strh	r2, [r3, #0]
	msg_size = sprintf((char*) msg, "get");
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <UART_Confirm+0x30>)
 8001768:	4a09      	ldr	r2, [pc, #36]	; (8001790 <UART_Confirm+0x34>)
 800176a:	6810      	ldr	r0, [r2, #0]
 800176c:	6018      	str	r0, [r3, #0]
 800176e:	2303      	movs	r3, #3
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <UART_Confirm+0x2c>)
 8001774:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart3, msg, msg_size, 10);
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <UART_Confirm+0x2c>)
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	230a      	movs	r3, #10
 800177c:	4903      	ldr	r1, [pc, #12]	; (800178c <UART_Confirm+0x30>)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <UART_Confirm+0x38>)
 8001780:	f002 fedc 	bl	800453c <HAL_UART_Transmit>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000282 	.word	0x20000282
 800178c:	2000021c 	.word	0x2000021c
 8001790:	08006730 	.word	0x08006730
 8001794:	2000045c 	.word	0x2000045c

08001798 <UART_startmove>:

void UART_startmove(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	msg_size2 = 0;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <UART_startmove+0x30>)
 800179e:	2200      	movs	r2, #0
 80017a0:	801a      	strh	r2, [r3, #0]
	msg_size2 = sprintf((char*) msg_v2, "start");
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <UART_startmove+0x34>)
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <UART_startmove+0x38>)
 80017a6:	6810      	ldr	r0, [r2, #0]
 80017a8:	6018      	str	r0, [r3, #0]
 80017aa:	8892      	ldrh	r2, [r2, #4]
 80017ac:	809a      	strh	r2, [r3, #4]
 80017ae:	2305      	movs	r3, #5
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <UART_startmove+0x30>)
 80017b4:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart3, msg_v2, msg_size2, 10);
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <UART_startmove+0x30>)
 80017b8:	881a      	ldrh	r2, [r3, #0]
 80017ba:	230a      	movs	r3, #10
 80017bc:	4903      	ldr	r1, [pc, #12]	; (80017cc <UART_startmove+0x34>)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <UART_startmove+0x3c>)
 80017c0:	f002 febc 	bl	800453c <HAL_UART_Transmit>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000218 	.word	0x20000218
 80017cc:	20000230 	.word	0x20000230
 80017d0:	08006734 	.word	0x08006734
 80017d4:	2000045c 	.word	0x2000045c

080017d8 <UART_WriteData>:

void UART_WriteData(Motor_T *data, uint16_t *tab, Trigger_T *time) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	uint8_t i = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	75fb      	strb	r3, [r7, #23]
	for (int j = 0; j < MOTORS_NUM; j++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e02b      	b.n	8001846 <UART_WriteData+0x6e>
		while ((uint16_t) -1 != tab[i]) {
			write_data_to_FIFO(&((data+j)->fifo), tab[i], tab[++i]);
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	4413      	add	r3, r2
 800180a:	8819      	ldrh	r1, [r3, #0]
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	3301      	adds	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	4413      	add	r3, r2
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	f7ff f9f0 	bl	8000c02 <write_data_to_FIFO>
			i++;
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	3301      	adds	r3, #1
 8001826:	75fb      	strb	r3, [r7, #23]
		while ((uint16_t) -1 != tab[i]) {
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	4413      	add	r3, r2
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001836:	4293      	cmp	r3, r2
 8001838:	d1d9      	bne.n	80017ee <UART_WriteData+0x16>
		}
		i++;
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	3301      	adds	r3, #1
 800183e:	75fb      	strb	r3, [r7, #23]
	for (int j = 0; j < MOTORS_NUM; j++) {
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	3301      	adds	r3, #1
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b02      	cmp	r3, #2
 800184a:	dded      	ble.n	8001828 <UART_WriteData+0x50>
	}
	time->device = tab[++i];
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	3301      	adds	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	729a      	strb	r2, [r3, #10]
	time->period = tab[++i];
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	3301      	adds	r3, #1
 8001866:	75fb      	strb	r3, [r7, #23]
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	4413      	add	r3, r2
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	725a      	strb	r2, [r3, #9]

	UART_Confirm();
 8001878:	f7ff ff70 	bl	800175c <UART_Confirm>
}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <DataReceive>:

DataReadEnum DataReceive(uint16_t *data) {
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	DataReadEnum retVal = data_unavailable;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < UARTpoint; ++i) {
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	e025      	b.n	80018e2 <DataReceive+0x5e>
		if (data[i] == (uint16_t) -2) {
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d102      	bne.n	80018ae <DataReceive+0x2a>
			retVal = data_available;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e016      	b.n	80018dc <DataReceive+0x58>
		} else if (data[i] == (uint16_t) -3) {
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80018bc:	4293      	cmp	r3, r2
 80018be:	d102      	bne.n	80018c6 <DataReceive+0x42>
			retVal = data_confirm;
 80018c0:	2302      	movs	r3, #2
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e00a      	b.n	80018dc <DataReceive+0x58>
		} else if (data[i] == (uint16_t) -4) {
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d101      	bne.n	80018dc <DataReceive+0x58>
			retVal = data_stop;
 80018d8:	2303      	movs	r3, #3
 80018da:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < UARTpoint; ++i) {
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	3301      	adds	r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b22      	cmp	r3, #34	; 0x22
 80018e6:	ddd6      	ble.n	8001896 <DataReceive+0x12>
		}
	}
	return retVal;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <device_choose>:
 *  Created on: Oct 21, 2020
 *      Author: rzesz
 */
#include "self_timer.h"
int flaga = 0;
void device_choose(Trigger_T *trig) {
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	trig->Pin_Trigger.PORT =
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001904:	601a      	str	r2, [r3, #0]
			(1 == trig->device) ? CAMERA_T_GPIO_Port : MOBILE_T_GPIO_Port;
	trig->Pin_Trigger.PIN = (1 == trig->device) ? CAMERA_T_Pin : MOBILE_T_Pin;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7a9b      	ldrb	r3, [r3, #10]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <device_choose+0x1c>
 800190e:	2204      	movs	r2, #4
 8001910:	e000      	b.n	8001914 <device_choose+0x1e>
 8001912:	2220      	movs	r2, #32
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	809a      	strh	r2, [r3, #4]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <calculate_intterupts>:

int calculate_intterupts(Trigger_T *trig) {
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	return (FREQ_T * trig->period);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7a5b      	ldrb	r3, [r3, #9]
 8001930:	461a      	mov	r2, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fb03 f302 	mul.w	r3, r3, r2
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <run_trigger>:

uint8_t run_trigger(Trigger_T *trig) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	uint32_t diff = trig->memTime-trig->changeTime;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	60fb      	str	r3, [r7, #12]
	--(trig->changeTime);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60da      	str	r2, [r3, #12]
	if (trig->changeTime <= 0) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	dc1a      	bgt.n	80019a4 <run_trigger+0x5c>
		trig->isOn = 1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	721a      	strb	r2, [r3, #8]
		--(trig->Time);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	615a      	str	r2, [r3, #20]
		trig->changeTime=trig->memTime;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(trig->Pin_Trigger.PORT,trig->Pin_Trigger.PIN, GPIO_PIN_RESET);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	889b      	ldrh	r3, [r3, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	f000 fef3 	bl	800277c <HAL_GPIO_WritePin>
		if(trig->Time<=0)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	dc02      	bgt.n	80019a4 <run_trigger+0x5c>
			HAL_TIM_Base_Stop_IT(&htim7);
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <run_trigger+0x8c>)
 80019a0:	f002 fac4 	bl	8003f2c <HAL_TIM_Base_Stop_IT>
	}
	if(diff==100 && trig->isOn)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d10e      	bne.n	80019c8 <run_trigger+0x80>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a1b      	ldrb	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <run_trigger+0x80>
	{
		trig->isOn=0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	721a      	strb	r2, [r3, #8]
		HAL_GPIO_WritePin(trig->Pin_Trigger.PORT,trig->Pin_Trigger.PIN, GPIO_PIN_SET);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	889b      	ldrh	r3, [r3, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4619      	mov	r1, r3
 80019c4:	f000 feda 	bl	800277c <HAL_GPIO_WritePin>
	}
	return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000041c 	.word	0x2000041c

080019d8 <set_trigger>:
void set_trigger(Trigger_T *trig, Motor_T *sett) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	trig->Time = read_time(sett->fifo) / trig->period;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f948 	bl	8000c7c <read_time>
 80019ec:	4602      	mov	r2, r0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7a5b      	ldrb	r3, [r3, #9]
 80019f2:	fb92 f2f3 	sdiv	r2, r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	615a      	str	r2, [r3, #20]
	trig->changeTime = calculate_intterupts(trig);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff92 	bl	8001924 <calculate_intterupts>
 8001a00:	4602      	mov	r2, r0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60da      	str	r2, [r3, #12]
	trig->memTime = trig->changeTime;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <init_t>:

void init_t(Trigger_T *trig, Motor_T *sett) {
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
	device_choose(trig);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff68 	bl	80018f6 <device_choose>
	set_trigger(trig, sett);
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ffd5 	bl	80019d8 <set_trigger>
	trig->isOn = 1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	721a      	strb	r2, [r3, #8]
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <set>:
#include <math.h>

static uint8_t stoppingPoint;
uint16_t time;

MotorErr set(Motor_T *sett) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	MotorErr retVal = MOTOR_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t micro = sett->device.microstep;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a4e:	75bb      	strb	r3, [r7, #22]
	if (sett->device.points_num == (uint8_t) -1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a56:	2bff      	cmp	r3, #255	; 0xff
 8001a58:	d109      	bne.n	8001a6e <set+0x32>
		sett->device.points_num = get_amount_of_times(sett->fifo);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f86e 	bl	8000b40 <get_amount_of_times>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	stoppingPoint = sett->device.points_num;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <set+0xac>)
 8001a76:	701a      	strb	r2, [r3, #0]
	read_data(&(sett->fifo), &time, &len);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3368      	adds	r3, #104	; 0x68
 8001a7c:	f107 020a 	add.w	r2, r7, #10
 8001a80:	491a      	ldr	r1, [pc, #104]	; (8001aec <set+0xb0>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f878 	bl	8000b78 <read_data>
	if (!time) {
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <set+0xb0>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <set+0x58>
		return MOTOR_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e024      	b.n	8001ade <set+0xa2>
	}
	//uint16_t length = round(len / sett->device.points_num);
	int stepSize = sett->device.stepSize;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9e:	ee17 3a90 	vmov	r3, s15
 8001aa2:	613b      	str	r3, [r7, #16]
	sett->counter.stepLeft = set_stepLeft(len, stepSize);
 8001aa4:	897b      	ldrh	r3, [r7, #10]
 8001aa6:	6939      	ldr	r1, [r7, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f891 	bl	8001bd0 <set_stepLeft>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
	//int (*fun)(uint16_t, int) = &set_stepLeft;
	int stepLeftx2 = sett->counter.stepLeft;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	60fb      	str	r3, [r7, #12]
	sett->counter.pulse = set_pulse(time, stepLeftx2, micro);
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <set+0xb0>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	7dba      	ldrb	r2, [r7, #22]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f8a4 	bl	8001c10 <set_pulse>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sett->counter.changeTime = sett->counter.pulse;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	879a      	strh	r2, [r3, #60]	; 0x3c

	return retVal;
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200001ed 	.word	0x200001ed
 8001aec:	200003da 	.word	0x200003da

08001af0 <set_for_angle>:
MotorErr set_for_angle(Motor_T *sett) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	MotorErr retVal = MOTOR_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	75fb      	strb	r3, [r7, #23]
	uint8_t micro = sett->device.microstep;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b02:	75bb      	strb	r3, [r7, #22]
	if (sett->device.points_num == (uint8_t) -1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b0a:	2bff      	cmp	r3, #255	; 0xff
 8001b0c:	d104      	bne.n	8001b18 <set_for_angle+0x28>
		sett->device.points_num = stoppingPoint;
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <set_for_angle+0xd8>)
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	read_data(&(sett->fifo), &(sett->device.positionStart), &(sett->device.positionEnd));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f103 0152 	add.w	r1, r3, #82	; 0x52
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3354      	adds	r3, #84	; 0x54
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f7ff f825 	bl	8000b78 <read_data>
	if (sett->device.positionStart != 0 && sett->counter.pulse == 0)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <set_for_angle+0x58>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <set_for_angle+0x58>
		prepareMotor(sett);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fd78 	bl	8001638 <prepareMotor>
	if (time == 0)
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <set_for_angle+0xdc>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <set_for_angle+0x64>
		return MOTOR_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e035      	b.n	8001bc0 <set_for_angle+0xd0>
	uint16_t diff = abs(sett->device.positionEnd - sett->device.positionStart);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bfb8      	it	lt
 8001b68:	425b      	neglt	r3, r3
 8001b6a:	82bb      	strh	r3, [r7, #20]
	int stepSize = sett->device.stepSize;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b76:	ee17 3a90 	vmov	r3, s15
 8001b7a:	613b      	str	r3, [r7, #16]
	sett->counter.stepLeft = set_stepLeft(diff / stoppingPoint, stepSize);
 8001b7c:	8abb      	ldrh	r3, [r7, #20]
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <set_for_angle+0xd8>)
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f820 	bl	8001bd0 <set_stepLeft>
 8001b90:	4602      	mov	r2, r0
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
	int stepLeftx2 = sett->counter.stepLeft;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	60fb      	str	r3, [r7, #12]
	sett->counter.pulse = set_pulse(time, stepLeftx2, micro);
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <set_for_angle+0xdc>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	7dba      	ldrb	r2, [r7, #22]
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f833 	bl	8001c10 <set_pulse>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sett->counter.changeTime = sett->counter.pulse;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	879a      	strh	r2, [r3, #60]	; 0x3c

	return retVal;
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200001ed 	.word	0x200001ed
 8001bcc:	200003da 	.word	0x200003da

08001bd0 <set_stepLeft>:
int set_stepLeft(uint16_t len, int step) {
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	80fb      	strh	r3, [r7, #6]
	return ceil((2 *10* len) / step);
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc44 	bl	800047c <__aeabi_i2d>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	f7fe ff58 	bl	8000ab0 <__aeabi_d2iz>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	0000      	movs	r0, r0
 8001c0c:	0000      	movs	r0, r0
	...

08001c10 <set_pulse>:
uint16_t set_pulse(uint16_t time, int stepleft, uint8_t micro) {
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	80fb      	strh	r3, [r7, #6]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	717b      	strb	r3, [r7, #5]
	return ((ceil(TIM_FREQ * time) / stepleft) * pow(2, micro));
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc26 	bl	800047c <__aeabi_i2d>
 8001c30:	4604      	mov	r4, r0
 8001c32:	460d      	mov	r5, r1
 8001c34:	6838      	ldr	r0, [r7, #0]
 8001c36:	f7fe fc21 	bl	800047c <__aeabi_i2d>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4620      	mov	r0, r4
 8001c40:	4629      	mov	r1, r5
 8001c42:	f7fe fdaf 	bl	80007a4 <__aeabi_ddiv>
 8001c46:	4603      	mov	r3, r0
 8001c48:	460c      	mov	r4, r1
 8001c4a:	4625      	mov	r5, r4
 8001c4c:	461c      	mov	r4, r3
 8001c4e:	797b      	ldrb	r3, [r7, #5]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc03 	bl	800045c <__aeabi_ui2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ec43 2b11 	vmov	d1, r2, r3
 8001c5e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001c90 <set_pulse+0x80>
 8001c62:	f003 fd01 	bl	8005668 <pow>
 8001c66:	ec53 2b10 	vmov	r2, r3, d0
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	f7fe fc6f 	bl	8000550 <__aeabi_dmul>
 8001c72:	4603      	mov	r3, r0
 8001c74:	460c      	mov	r4, r1
 8001c76:	4618      	mov	r0, r3
 8001c78:	4621      	mov	r1, r4
 8001c7a:	f7fe ff41 	bl	8000b00 <__aeabi_d2uiz>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29b      	uxth	r3, r3
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40000000 	.word	0x40000000

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_MspInit+0x44>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_MspInit+0x44>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_MspInit+0x44>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 fa06 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <USART3_IRQHandler+0x10>)
 8001d42:	f002 fd31 	bl	80047a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000045c 	.word	0x2000045c

08001d50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <TIM6_DAC_IRQHandler+0x10>)
 8001d56:	f002 f914 	bl	8003f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200003dc 	.word	0x200003dc

08001d64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <TIM7_IRQHandler+0x10>)
 8001d6a:	f002 f90a 	bl	8003f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000041c 	.word	0x2000041c

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f003 fad4 	bl	8005354 <__errno>
 8001dac:	4602      	mov	r2, r0
 8001dae:	230c      	movs	r3, #12
 8001db0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20010000 	.word	0x20010000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	200001f0 	.word	0x200001f0
 8001de0:	200004e8 	.word	0x200004e8

08001de4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <SystemInit+0x28>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <SystemInit+0x28>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SystemInit+0x28>)
 8001dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dfe:	609a      	str	r2, [r3, #8]
#endif
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <MX_TIM6_Init+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e28:	2247      	movs	r2, #71	; 0x47
 8001e2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e42:	f002 f81d 	bl	8003e80 <HAL_TIM_Base_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e4c:	f7ff f9c4 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e5e:	f002 fa75 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e68:	f7ff f9b6 	bl	80011d8 <Error_Handler>
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200003dc 	.word	0x200003dc
 8001e78:	40001000 	.word	0x40001000

08001e7c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <MX_TIM7_Init+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001e94:	2247      	movs	r2, #71	; 0x47
 8001e96:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ea4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001eae:	f001 ffe7 	bl	8003e80 <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001eb8:	f7ff f98e 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001eca:	f002 fa3f 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ed4:	f7ff f980 	bl	80011d8 <Error_Handler>
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000041c 	.word	0x2000041c
 8001ee4:	40001400 	.word	0x40001400

08001ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <HAL_TIM_Base_MspInit+0x78>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d114      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_TIM_Base_MspInit+0x7c>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_TIM_Base_MspInit+0x7c>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_TIM_Base_MspInit+0x7c>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2036      	movs	r0, #54	; 0x36
 8001f18:	f000 fa31 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f1c:	2036      	movs	r0, #54	; 0x36
 8001f1e:	f000 fa4a 	bl	80023b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001f22:	e018      	b.n	8001f56 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_TIM_Base_MspInit+0x80>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d113      	bne.n	8001f56 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_TIM_Base_MspInit+0x7c>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <HAL_TIM_Base_MspInit+0x7c>)
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_TIM_Base_MspInit+0x7c>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2037      	movs	r0, #55	; 0x37
 8001f4c:	f000 fa17 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f50:	2037      	movs	r0, #55	; 0x37
 8001f52:	f000 fa30 	bl	80023b6 <HAL_NVIC_EnableIRQ>
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40001000 	.word	0x40001000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40001400 	.word	0x40001400

08001f6c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <MX_USART3_UART_Init+0x5c>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001fb0:	f002 fa76 	bl	80044a0 <HAL_UART_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001fba:	f7ff f90d 	bl	80011d8 <Error_Handler>
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000045c 	.word	0x2000045c
 8001fc8:	40004800 	.word	0x40004800

08001fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_UART_MspInit+0x8c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d130      	bne.n	8002050 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_UART_MspInit+0x90>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_UART_MspInit+0x90>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	61d3      	str	r3, [r2, #28]
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_UART_MspInit+0x90>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_UART_MspInit+0x90>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4a14      	ldr	r2, [pc, #80]	; (800205c <HAL_UART_MspInit+0x90>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6153      	str	r3, [r2, #20]
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_UART_MspInit+0x90>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800201e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002030:	2307      	movs	r3, #7
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	4809      	ldr	r0, [pc, #36]	; (8002060 <HAL_UART_MspInit+0x94>)
 800203c:	f000 fa14 	bl	8002468 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2027      	movs	r0, #39	; 0x27
 8002046:	f000 f99a 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800204a:	2027      	movs	r0, #39	; 0x27
 800204c:	f000 f9b3 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40004800 	.word	0x40004800
 800205c:	40021000 	.word	0x40021000
 8002060:	48000400 	.word	0x48000400

08002064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800209c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002068:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800206a:	e003      	b.n	8002074 <LoopCopyDataInit>

0800206c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800206e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002070:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002072:	3104      	adds	r1, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002078:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800207a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800207c:	d3f6      	bcc.n	800206c <CopyDataInit>
	ldr	r2, =_sbss
 800207e:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8002080:	e002      	b.n	8002088 <LoopFillZerobss>

08002082 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002082:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002084:	f842 3b04 	str.w	r3, [r2], #4

08002088 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <LoopForever+0x16>)
	cmp	r2, r3
 800208a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800208c:	d3f9      	bcc.n	8002082 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800208e:	f7ff fea9 	bl	8001de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002092:	f003 f965 	bl	8005360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002096:	f7fe ffa1 	bl	8000fdc <main>

0800209a <LoopForever>:

LoopForever:
    b LoopForever
 800209a:	e7fe      	b.n	800209a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800209c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80020a0:	080067c0 	.word	0x080067c0
	ldr	r0, =_sdata
 80020a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020a8:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 80020ac:	200001d0 	.word	0x200001d0
	ldr	r3, = _ebss
 80020b0:	200004e4 	.word	0x200004e4

080020b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC1_2_IRQHandler>
	...

080020b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_Init+0x28>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <HAL_Init+0x28>)
 80020c2:	f043 0310 	orr.w	r3, r3, #16
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f000 f94d 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f000 f808 	bl	80020e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff fde0 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40022000 	.word	0x40022000

080020e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_InitTick+0x54>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_InitTick+0x58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f965 	bl	80023d2 <HAL_SYSTICK_Config>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00e      	b.n	8002130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d80a      	bhi.n	800212e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f000 f92d 	bl	800237e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_InitTick+0x5c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000158 	.word	0x20000158
 800213c:	20000160 	.word	0x20000160
 8002140:	2000015c 	.word	0x2000015c

08002144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x20>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x24>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_IncTick+0x24>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000160 	.word	0x20000160
 8002168:	200004dc 	.word	0x200004dc

0800216c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_GetTick+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	200004dc 	.word	0x200004dc

08002184 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ffee 	bl	800216c <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_Delay+0x40>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffde 	bl	800216c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000160 	.word	0x20000160

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	; (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	; (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	; (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f7ff ff8e 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff29 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff3e 	bl	8002210 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff8e 	bl	80022bc <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5d 	bl	8002268 <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff31 	bl	800222c <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa2 	bl	8002324 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d005      	beq.n	800240c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2204      	movs	r2, #4
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e027      	b.n	800245c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 020e 	bic.w	r2, r2, #14
 800241a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f202 	lsl.w	r2, r1, r2
 800243a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
    } 
  }
  return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002476:	e160      	b.n	800273a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8152 	beq.w	8002734 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d00b      	beq.n	80024b0 <HAL_GPIO_Init+0x48>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d007      	beq.n	80024b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a4:	2b11      	cmp	r3, #17
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b12      	cmp	r3, #18
 80024ae:	d130      	bne.n	8002512 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e6:	2201      	movs	r2, #1
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 0201 	and.w	r2, r3, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0xea>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b12      	cmp	r3, #18
 8002550:	d123      	bne.n	800259a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	6939      	ldr	r1, [r7, #16]
 8002596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0203 	and.w	r2, r3, #3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80ac 	beq.w	8002734 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a5d      	ldr	r2, [pc, #372]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b5b      	ldr	r3, [pc, #364]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025f4:	4a59      	ldr	r2, [pc, #356]	; (800275c <HAL_GPIO_Init+0x2f4>)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800261e:	d025      	beq.n	800266c <HAL_GPIO_Init+0x204>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a4f      	ldr	r2, [pc, #316]	; (8002760 <HAL_GPIO_Init+0x2f8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d01f      	beq.n	8002668 <HAL_GPIO_Init+0x200>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a4e      	ldr	r2, [pc, #312]	; (8002764 <HAL_GPIO_Init+0x2fc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d019      	beq.n	8002664 <HAL_GPIO_Init+0x1fc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a4d      	ldr	r2, [pc, #308]	; (8002768 <HAL_GPIO_Init+0x300>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_GPIO_Init+0x1f8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a4c      	ldr	r2, [pc, #304]	; (800276c <HAL_GPIO_Init+0x304>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00d      	beq.n	800265c <HAL_GPIO_Init+0x1f4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a4b      	ldr	r2, [pc, #300]	; (8002770 <HAL_GPIO_Init+0x308>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <HAL_GPIO_Init+0x1f0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a4a      	ldr	r2, [pc, #296]	; (8002774 <HAL_GPIO_Init+0x30c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d101      	bne.n	8002654 <HAL_GPIO_Init+0x1ec>
 8002650:	2306      	movs	r3, #6
 8002652:	e00c      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002654:	2307      	movs	r3, #7
 8002656:	e00a      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002658:	2305      	movs	r3, #5
 800265a:	e008      	b.n	800266e <HAL_GPIO_Init+0x206>
 800265c:	2304      	movs	r3, #4
 800265e:	e006      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002660:	2303      	movs	r3, #3
 8002662:	e004      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002664:	2302      	movs	r3, #2
 8002666:	e002      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_GPIO_Init+0x206>
 800266c:	2300      	movs	r3, #0
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	f002 0203 	and.w	r2, r2, #3
 8002674:	0092      	lsls	r2, r2, #2
 8002676:	4093      	lsls	r3, r2
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800267e:	4937      	ldr	r1, [pc, #220]	; (800275c <HAL_GPIO_Init+0x2f4>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_GPIO_Init+0x310>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026b0:	4a31      	ldr	r2, [pc, #196]	; (8002778 <HAL_GPIO_Init+0x310>)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026b6:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_GPIO_Init+0x310>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026da:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_GPIO_Init+0x310>)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_GPIO_Init+0x310>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002704:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <HAL_GPIO_Init+0x310>)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_GPIO_Init+0x310>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <HAL_GPIO_Init+0x310>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f ae97 	bne.w	8002478 <HAL_GPIO_Init+0x10>
  }
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000
 8002760:	48000400 	.word	0x48000400
 8002764:	48000800 	.word	0x48000800
 8002768:	48000c00 	.word	0x48000c00
 800276c:	48001000 	.word	0x48001000
 8002770:	48001400 	.word	0x48001400
 8002774:	48001800 	.word	0x48001800
 8002778:	40010400 	.word	0x40010400

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f000 bf01 	b.w	80035c8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8160 	beq.w	8002a96 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027d6:	4bae      	ldr	r3, [pc, #696]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00c      	beq.n	80027fc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027e2:	4bab      	ldr	r3, [pc, #684]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d159      	bne.n	80028a2 <HAL_RCC_OscConfig+0xf6>
 80027ee:	4ba8      	ldr	r3, [pc, #672]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fa:	d152      	bne.n	80028a2 <HAL_RCC_OscConfig+0xf6>
 80027fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002800:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002810:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d102      	bne.n	800282e <HAL_RCC_OscConfig+0x82>
 8002828:	4b99      	ldr	r3, [pc, #612]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0xae>
 800282e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002832:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002846:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800284a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002856:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002862:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002866:	fa92 f2a2 	rbit	r2, r2
 800286a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800286e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8102 	beq.w	8002a94 <HAL_RCC_OscConfig+0x2e8>
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 80fc 	bne.w	8002a94 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f000 be93 	b.w	80035c8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x110>
 80028ae:	4b78      	ldr	r3, [pc, #480]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a77      	ldr	r2, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e030      	b.n	800291e <HAL_RCC_OscConfig+0x172>
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x134>
 80028c6:	4b72      	ldr	r3, [pc, #456]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a71      	ldr	r2, [pc, #452]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6e      	ldr	r2, [pc, #440]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e01e      	b.n	800291e <HAL_RCC_OscConfig+0x172>
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ea:	d10c      	bne.n	8002906 <HAL_RCC_OscConfig+0x15a>
 80028ec:	4b68      	ldr	r3, [pc, #416]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a67      	ldr	r2, [pc, #412]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a64      	ldr	r2, [pc, #400]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x172>
 8002906:	4b62      	ldr	r3, [pc, #392]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a61      	ldr	r2, [pc, #388]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 800290c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b5f      	ldr	r3, [pc, #380]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5e      	ldr	r2, [pc, #376]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 8002918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d059      	beq.n	80029dc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fc20 	bl	800216c <HAL_GetTick>
 800292c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002932:	f7ff fc1b 	bl	800216c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d902      	bls.n	8002948 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	f000 be40 	b.w	80035c8 <HAL_RCC_OscConfig+0xe1c>
 8002948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800295c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_RCC_OscConfig+0x1ce>
 8002974:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	e015      	b.n	80029a6 <HAL_RCC_OscConfig+0x1fa>
 800297a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800298e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002992:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002996:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029a2:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029aa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80029ae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80029b2:	fa92 f2a2 	rbit	r2, r2
 80029b6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80029ba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029be:	fab2 f282 	clz	r2, r2
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f042 0220 	orr.w	r2, r2, #32
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f002 021f 	and.w	r2, r2, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f202 	lsl.w	r2, r1, r2
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ab      	beq.n	8002932 <HAL_RCC_OscConfig+0x186>
 80029da:	e05c      	b.n	8002a96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff fbc6 	bl	800216c <HAL_GetTick>
 80029e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e6:	f7ff fbc1 	bl	800216c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d902      	bls.n	80029fc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	f000 bde6 	b.w	80035c8 <HAL_RCC_OscConfig+0xe1c>
 80029fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a00:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002a10:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_OscConfig+0x282>
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x2ae>
 8002a2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_RCC_OscConfig+0x2e4>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002a62:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002a6e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ab      	bne.n	80029e6 <HAL_RCC_OscConfig+0x23a>
 8002a8e:	e002      	b.n	8002a96 <HAL_RCC_OscConfig+0x2ea>
 8002a90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8170 	beq.w	8002d86 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002aa6:	4bd0      	ldr	r3, [pc, #832]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ab2:	4bcd      	ldr	r3, [pc, #820]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d16d      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3ee>
 8002abe:	4bca      	ldr	r3, [pc, #808]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aca:	d166      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3ee>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002ade:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_OscConfig+0x350>
 8002af6:	4bbc      	ldr	r3, [pc, #752]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e013      	b.n	8002b24 <HAL_RCC_OscConfig+0x378>
 8002afc:	2302      	movs	r3, #2
 8002afe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002b0e:	2302      	movs	r3, #2
 8002b10:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b14:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b20:	4bb1      	ldr	r3, [pc, #708]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2202      	movs	r2, #2
 8002b26:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002b2a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002b2e:	fa92 f2a2 	rbit	r2, r2
 8002b32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002b36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b3a:	fab2 f282 	clz	r2, r2
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f042 0220 	orr.w	r2, r2, #32
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f002 021f 	and.w	r2, r2, #31
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3ba>
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d002      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f000 bd31 	b.w	80035c8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	21f8      	movs	r1, #248	; 0xf8
 8002b76:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002b7e:	fa91 f1a1 	rbit	r1, r1
 8002b82:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002b86:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b8a:	fab1 f181 	clz	r1, r1
 8002b8e:	b2c9      	uxtb	r1, r1
 8002b90:	408b      	lsls	r3, r1
 8002b92:	4995      	ldr	r1, [pc, #596]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b98:	e0f5      	b.n	8002d86 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8085 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x504>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002bb8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2301      	movs	r3, #1
 8002bd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7ff facb 	bl	800216c <HAL_GetTick>
 8002bd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7ff fac6 	bl	800216c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d902      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	f000 bceb 	b.w	80035c8 <HAL_RCC_OscConfig+0xe1c>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002c04:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d102      	bne.n	8002c22 <HAL_RCC_OscConfig+0x476>
 8002c1c:	4b72      	ldr	r3, [pc, #456]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	e013      	b.n	8002c4a <HAL_RCC_OscConfig+0x49e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002c2c:	fa93 f3a3 	rbit	r3, r3
 8002c30:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c3a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c46:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c50:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c54:	fa92 f2a2 	rbit	r2, r2
 8002c58:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002c5c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c60:	fab2 f282 	clz	r2, r2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0af      	beq.n	8002bdc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b5a      	ldr	r3, [pc, #360]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	21f8      	movs	r1, #248	; 0xf8
 8002c8c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002c94:	fa91 f1a1 	rbit	r1, r1
 8002c98:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002c9c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ca0:	fab1 f181 	clz	r1, r1
 8002ca4:	b2c9      	uxtb	r1, r1
 8002ca6:	408b      	lsls	r3, r1
 8002ca8:	494f      	ldr	r1, [pc, #316]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
 8002cae:	e06a      	b.n	8002d86 <HAL_RCC_OscConfig+0x5da>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002cc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7ff fa46 	bl	800216c <HAL_GetTick>
 8002ce0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7ff fa41 	bl	800216c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	f000 bc66 	b.w	80035c8 <HAL_RCC_OscConfig+0xe1c>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002d0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d102      	bne.n	8002d2c <HAL_RCC_OscConfig+0x580>
 8002d26:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	e013      	b.n	8002d54 <HAL_RCC_OscConfig+0x5a8>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_RCC_OscConfig+0x63c>)
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	2202      	movs	r2, #2
 8002d56:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d5a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002d5e:	fa92 f2a2 	rbit	r2, r2
 8002d62:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002d66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d6a:	fab2 f282 	clz	r2, r2
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	f042 0220 	orr.w	r2, r2, #32
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	f002 021f 	and.w	r2, r2, #31
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1af      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80da 	beq.w	8002f4a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d069      	beq.n	8002e74 <HAL_RCC_OscConfig+0x6c8>
 8002da0:	2301      	movs	r3, #1
 8002da2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002db2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x640>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7ff f9cf 	bl	800216c <HAL_GetTick>
 8002dce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	e00d      	b.n	8002df0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7ff f9ca 	bl	800216c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d905      	bls.n	8002df0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e3ef      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
 8002de8:	40021000 	.word	0x40021000
 8002dec:	10908120 	.word	0x10908120
 8002df0:	2302      	movs	r3, #2
 8002df2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002e08:	2202      	movs	r2, #2
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	fa93 f2a3 	rbit	r2, r3
 8002e16:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e32:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e34:	4ba4      	ldr	r3, [pc, #656]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e38:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	6019      	str	r1, [r3, #0]
 8002e40:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f1a3 	rbit	r1, r3
 8002e4a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e4e:	6019      	str	r1, [r3, #0]
  return result;
 8002e50:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0b0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x628>
 8002e72:	e06a      	b.n	8002f4a <HAL_RCC_OscConfig+0x79e>
 8002e74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	fa93 f2a3 	rbit	r2, r3
 8002e86:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e8a:	601a      	str	r2, [r3, #0]
  return result;
 8002e8c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e90:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b8c      	ldr	r3, [pc, #560]	; (80030cc <HAL_RCC_OscConfig+0x920>)
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7ff f961 	bl	800216c <HAL_GetTick>
 8002eaa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eae:	e009      	b.n	8002ec4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7ff f95c 	bl	800216c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e381      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
 8002ec4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ec8:	2202      	movs	r2, #2
 8002eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ef8:	2202      	movs	r2, #2
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	4b6e      	ldr	r3, [pc, #440]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f14:	2102      	movs	r1, #2
 8002f16:	6019      	str	r1, [r3, #0]
 8002f18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f1a3 	rbit	r1, r3
 8002f22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f26:	6019      	str	r1, [r3, #0]
  return result;
 8002f28:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1b2      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 8157 	beq.w	8003208 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d112      	bne.n	8002f92 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	4b56      	ldr	r3, [pc, #344]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	4a55      	ldr	r2, [pc, #340]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f76:	61d3      	str	r3, [r2, #28]
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f80:	f107 030c 	add.w	r3, r7, #12
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b4f      	ldr	r3, [pc, #316]	; (80030d0 <HAL_RCC_OscConfig+0x924>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b4c      	ldr	r3, [pc, #304]	; (80030d0 <HAL_RCC_OscConfig+0x924>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a4b      	ldr	r2, [pc, #300]	; (80030d0 <HAL_RCC_OscConfig+0x924>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7ff f8df 	bl	800216c <HAL_GetTick>
 8002fae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	e009      	b.n	8002fc8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb4:	f7ff f8da 	bl	800216c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b64      	cmp	r3, #100	; 0x64
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e2ff      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_RCC_OscConfig+0x924>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x840>
 8002fde:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a39      	ldr	r2, [pc, #228]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6213      	str	r3, [r2, #32]
 8002fea:	e02f      	b.n	800304c <HAL_RCC_OscConfig+0x8a0>
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x864>
 8002ff6:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4a33      	ldr	r2, [pc, #204]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	6213      	str	r3, [r2, #32]
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a30      	ldr	r2, [pc, #192]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8003008:	f023 0304 	bic.w	r3, r3, #4
 800300c:	6213      	str	r3, [r2, #32]
 800300e:	e01d      	b.n	800304c <HAL_RCC_OscConfig+0x8a0>
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b05      	cmp	r3, #5
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x888>
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	6213      	str	r3, [r2, #32]
 8003026:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	e00b      	b.n	800304c <HAL_RCC_OscConfig+0x8a0>
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a20      	ldr	r2, [pc, #128]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 8003046:	f023 0304 	bic.w	r3, r3, #4
 800304a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d06a      	beq.n	800312c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7ff f889 	bl	800216c <HAL_GetTick>
 800305a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7ff f884 	bl	800216c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e2a7      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
 8003078:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800307c:	2202      	movs	r2, #2
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003094:	2202      	movs	r2, #2
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030a6:	601a      	str	r2, [r3, #0]
  return result;
 80030a8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d108      	bne.n	80030d4 <HAL_RCC_OscConfig+0x928>
 80030c2:	4b01      	ldr	r3, [pc, #4]	; (80030c8 <HAL_RCC_OscConfig+0x91c>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	e013      	b.n	80030f0 <HAL_RCC_OscConfig+0x944>
 80030c8:	40021000 	.word	0x40021000
 80030cc:	10908120 	.word	0x10908120
 80030d0:	40007000 	.word	0x40007000
 80030d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030d8:	2202      	movs	r2, #2
 80030da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	4bc0      	ldr	r3, [pc, #768]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80030f4:	2102      	movs	r1, #2
 80030f6:	6011      	str	r1, [r2, #0]
 80030f8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	fa92 f1a2 	rbit	r1, r2
 8003102:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003106:	6011      	str	r1, [r2, #0]
  return result;
 8003108:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	fab2 f282 	clz	r2, r2
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f002 021f 	and.w	r2, r2, #31
 800311e:	2101      	movs	r1, #1
 8003120:	fa01 f202 	lsl.w	r2, r1, r2
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d09a      	beq.n	8003060 <HAL_RCC_OscConfig+0x8b4>
 800312a:	e063      	b.n	80031f4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312c:	f7ff f81e 	bl	800216c <HAL_GetTick>
 8003130:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003134:	e00b      	b.n	800314e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7ff f819 	bl	800216c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e23c      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
 800314e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003152:	2202      	movs	r2, #2
 8003154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	fa93 f2a3 	rbit	r2, r3
 8003160:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800316a:	2202      	movs	r2, #2
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800317c:	601a      	str	r2, [r3, #0]
  return result;
 800317e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003182:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d102      	bne.n	800319e <HAL_RCC_OscConfig+0x9f2>
 8003198:	4b95      	ldr	r3, [pc, #596]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	e00d      	b.n	80031ba <HAL_RCC_OscConfig+0xa0e>
 800319e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031a2:	2202      	movs	r2, #2
 80031a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	4b8e      	ldr	r3, [pc, #568]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80031be:	2102      	movs	r1, #2
 80031c0:	6011      	str	r1, [r2, #0]
 80031c2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	fa92 f1a2 	rbit	r1, r2
 80031cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031d0:	6011      	str	r1, [r2, #0]
  return result;
 80031d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	fab2 f282 	clz	r2, r2
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	f002 021f 	and.w	r2, r2, #31
 80031e8:	2101      	movs	r1, #1
 80031ea:	fa01 f202 	lsl.w	r2, r1, r2
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1a0      	bne.n	8003136 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031f4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fc:	4b7c      	ldr	r3, [pc, #496]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4a7b      	ldr	r2, [pc, #492]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 8003202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003206:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003208:	1d3b      	adds	r3, r7, #4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 81d9 	beq.w	80035c6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003214:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	f000 81a6 	beq.w	800356e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b02      	cmp	r3, #2
 800322a:	f040 811e 	bne.w	800346a <HAL_RCC_OscConfig+0xcbe>
 800322e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003232:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	fa93 f2a3 	rbit	r2, r3
 8003242:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003246:	601a      	str	r2, [r3, #0]
  return result;
 8003248:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800324c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003258:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	461a      	mov	r2, r3
 8003260:	2300      	movs	r3, #0
 8003262:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe ff82 	bl	800216c <HAL_GetTick>
 8003268:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326c:	e009      	b.n	8003282 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326e:	f7fe ff7d 	bl	800216c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1a2      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
 8003282:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	fa93 f2a3 	rbit	r2, r3
 8003296:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800329a:	601a      	str	r2, [r3, #0]
  return result;
 800329c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d102      	bne.n	80032bc <HAL_RCC_OscConfig+0xb10>
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	e01b      	b.n	80032f4 <HAL_RCC_OscConfig+0xb48>
 80032bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	fa93 f2a3 	rbit	r2, r3
 80032d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fa93 f2a3 	rbit	r2, r3
 80032ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80032f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032fc:	6011      	str	r1, [r2, #0]
 80032fe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	fa92 f1a2 	rbit	r1, r2
 8003308:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800330c:	6011      	str	r1, [r2, #0]
  return result;
 800330e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	fab2 f282 	clz	r2, r2
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	f042 0220 	orr.w	r2, r2, #32
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f002 021f 	and.w	r2, r2, #31
 8003324:	2101      	movs	r1, #1
 8003326:	fa01 f202 	lsl.w	r2, r1, r2
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d19e      	bne.n	800326e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003330:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f023 020f 	bic.w	r2, r3, #15
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	492c      	ldr	r1, [pc, #176]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 8003340:	4313      	orrs	r3, r2
 8003342:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6a19      	ldr	r1, [r3, #32]
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	430b      	orrs	r3, r1
 800335a:	4925      	ldr	r1, [pc, #148]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
 8003360:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f2a3 	rbit	r2, r3
 8003374:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003378:	601a      	str	r2, [r3, #0]
  return result;
 800337a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800337e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800338a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	461a      	mov	r2, r3
 8003392:	2301      	movs	r3, #1
 8003394:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fe fee9 	bl	800216c <HAL_GetTick>
 800339a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800339e:	e009      	b.n	80033b4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fee4 	bl	800216c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e109      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
 80033b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	fa93 f2a3 	rbit	r2, r3
 80033c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033cc:	601a      	str	r2, [r3, #0]
  return result;
 80033ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_RCC_OscConfig+0xc48>
 80033e8:	4b01      	ldr	r3, [pc, #4]	; (80033f0 <HAL_RCC_OscConfig+0xc44>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e01e      	b.n	800342c <HAL_RCC_OscConfig+0xc80>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fa93 f2a3 	rbit	r2, r3
 8003408:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003412:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f2a3 	rbit	r2, r3
 8003422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_OscConfig+0xe28>)
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003430:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003434:	6011      	str	r1, [r2, #0]
 8003436:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	fa92 f1a2 	rbit	r1, r2
 8003440:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003444:	6011      	str	r1, [r2, #0]
  return result;
 8003446:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	fab2 f282 	clz	r2, r2
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	f042 0220 	orr.w	r2, r2, #32
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	f002 021f 	and.w	r2, r2, #31
 800345c:	2101      	movs	r1, #1
 800345e:	fa01 f202 	lsl.w	r2, r1, r2
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d09b      	beq.n	80033a0 <HAL_RCC_OscConfig+0xbf4>
 8003468:	e0ad      	b.n	80035c6 <HAL_RCC_OscConfig+0xe1a>
 800346a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800346e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	fa93 f2a3 	rbit	r2, r3
 800347e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003482:	601a      	str	r2, [r3, #0]
  return result;
 8003484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003488:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003494:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	461a      	mov	r2, r3
 800349c:	2300      	movs	r3, #0
 800349e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7fe fe64 	bl	800216c <HAL_GetTick>
 80034a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a8:	e009      	b.n	80034be <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe fe5f 	bl	800216c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e084      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
 80034be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	fa93 f2a3 	rbit	r2, r3
 80034d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d6:	601a      	str	r2, [r3, #0]
  return result;
 80034d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_RCC_OscConfig+0xd4c>
 80034f2:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <HAL_RCC_OscConfig+0xe28>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e01b      	b.n	8003530 <HAL_RCC_OscConfig+0xd84>
 80034f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	fa93 f2a3 	rbit	r2, r3
 800350c:	f107 0320 	add.w	r3, r7, #32
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f107 0318 	add.w	r3, r7, #24
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_RCC_OscConfig+0xe28>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f107 0214 	add.w	r2, r7, #20
 8003534:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003538:	6011      	str	r1, [r2, #0]
 800353a:	f107 0214 	add.w	r2, r7, #20
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	fa92 f1a2 	rbit	r1, r2
 8003544:	f107 0210 	add.w	r2, r7, #16
 8003548:	6011      	str	r1, [r2, #0]
  return result;
 800354a:	f107 0210 	add.w	r2, r7, #16
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	fab2 f282 	clz	r2, r2
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f042 0220 	orr.w	r2, r2, #32
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	f002 021f 	and.w	r2, r2, #31
 8003560:	2101      	movs	r1, #1
 8003562:	fa01 f202 	lsl.w	r2, r1, r2
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d19e      	bne.n	80034aa <HAL_RCC_OscConfig+0xcfe>
 800356c:	e02b      	b.n	80035c6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e025      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800357c:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_RCC_OscConfig+0xe28>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <HAL_RCC_OscConfig+0xe28>)
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800358c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003590:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	429a      	cmp	r2, r3
 800359c:	d111      	bne.n	80035c2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800359e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80035a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d108      	bne.n	80035c2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80035b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b4:	f003 020f 	and.w	r2, r3, #15
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035be:	429a      	cmp	r2, r3
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000

080035d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b09e      	sub	sp, #120	; 0x78
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e162      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b90      	ldr	r3, [pc, #576]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d910      	bls.n	8003620 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b8d      	ldr	r3, [pc, #564]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	498b      	ldr	r1, [pc, #556]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b89      	ldr	r3, [pc, #548]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e14a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b82      	ldr	r3, [pc, #520]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	497f      	ldr	r1, [pc, #508]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80dc 	beq.w	8003804 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d13c      	bne.n	80036ce <HAL_RCC_ClockConfig+0xf6>
 8003654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003658:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d102      	bne.n	800367e <HAL_RCC_ClockConfig+0xa6>
 8003678:	4b6f      	ldr	r3, [pc, #444]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	e00f      	b.n	800369e <HAL_RCC_ClockConfig+0xc6>
 800367e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003682:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	667b      	str	r3, [r7, #100]	; 0x64
 800368c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003690:	663b      	str	r3, [r7, #96]	; 0x60
 8003692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800369a:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80036a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036a6:	fa92 f2a2 	rbit	r2, r2
 80036aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036ae:	fab2 f282 	clz	r2, r2
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	f042 0220 	orr.w	r2, r2, #32
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	f002 021f 	and.w	r2, r2, #31
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d17b      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0f3      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d13c      	bne.n	8003750 <HAL_RCC_ClockConfig+0x178>
 80036d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d102      	bne.n	8003700 <HAL_RCC_ClockConfig+0x128>
 80036fa:	4b4f      	ldr	r3, [pc, #316]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	e00f      	b.n	8003720 <HAL_RCC_ClockConfig+0x148>
 8003700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003704:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	647b      	str	r3, [r7, #68]	; 0x44
 800370e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003712:	643b      	str	r3, [r7, #64]	; 0x40
 8003714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003724:	63ba      	str	r2, [r7, #56]	; 0x38
 8003726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003728:	fa92 f2a2 	rbit	r2, r2
 800372c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800372e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003730:	fab2 f282 	clz	r2, r2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f042 0220 	orr.w	r2, r2, #32
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f002 021f 	and.w	r2, r2, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f202 	lsl.w	r2, r1, r2
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d13a      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b2      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
 8003750:	2302      	movs	r3, #2
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d102      	bne.n	8003778 <HAL_RCC_ClockConfig+0x1a0>
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	e00d      	b.n	8003794 <HAL_RCC_ClockConfig+0x1bc>
 8003778:	2302      	movs	r3, #2
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	2302      	movs	r3, #2
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	4b29      	ldr	r3, [pc, #164]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2202      	movs	r2, #2
 8003796:	61ba      	str	r2, [r7, #24]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	fa92 f2a2 	rbit	r2, r2
 800379e:	617a      	str	r2, [r7, #20]
  return result;
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	fab2 f282 	clz	r2, r2
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	f042 0220 	orr.w	r2, r2, #32
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	f002 021f 	and.w	r2, r2, #31
 80037b2:	2101      	movs	r1, #1
 80037b4:	fa01 f202 	lsl.w	r2, r1, r2
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e079      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	491a      	ldr	r1, [pc, #104]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d4:	f7fe fcca 	bl	800216c <HAL_GetTick>
 80037d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe fcc6 	bl	800216c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e061      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d214      	bcs.n	800383c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 0207 	bic.w	r2, r3, #7
 800381a:	4906      	ldr	r1, [pc, #24]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e040      	b.n	80038b6 <HAL_RCC_ClockConfig+0x2de>
 8003834:	40022000 	.word	0x40022000
 8003838:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	491a      	ldr	r1, [pc, #104]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4912      	ldr	r1, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800387a:	f000 f829 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800387e:	4601      	mov	r1, r0
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003888:	22f0      	movs	r2, #240	; 0xf0
 800388a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	fa92 f2a2 	rbit	r2, r2
 8003892:	60fa      	str	r2, [r7, #12]
  return result;
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	40d3      	lsrs	r3, r2
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x2ec>)
 80038a0:	5cd3      	ldrb	r3, [r2, r3]
 80038a2:	fa21 f303 	lsr.w	r3, r1, r3
 80038a6:	4a08      	ldr	r2, [pc, #32]	; (80038c8 <HAL_RCC_ClockConfig+0x2f0>)
 80038a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCC_ClockConfig+0x2f4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fc18 	bl	80020e4 <HAL_InitTick>
  
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3778      	adds	r7, #120	; 0x78
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	0800673c 	.word	0x0800673c
 80038c8:	20000158 	.word	0x20000158
 80038cc:	2000015c 	.word	0x2000015c

080038d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b08b      	sub	sp, #44	; 0x2c
 80038d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x30>
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x36>
 80038fe:	e03f      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003902:	623b      	str	r3, [r7, #32]
      break;
 8003904:	e03f      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800390c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003910:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	fa92 f2a2 	rbit	r2, r2
 8003918:	607a      	str	r2, [r7, #4]
  return result;
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	fab2 f282 	clz	r2, r2
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	40d3      	lsrs	r3, r2
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003926:	5cd3      	ldrb	r3, [r2, r3]
 8003928:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800392a:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_RCC_GetSysClockFreq+0xc4>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	220f      	movs	r2, #15
 8003934:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	fa92 f2a2 	rbit	r2, r2
 800393c:	60fa      	str	r2, [r7, #12]
  return result;
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	fab2 f282 	clz	r2, r2
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	40d3      	lsrs	r3, r2
 8003948:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003958:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <HAL_RCC_GetSysClockFreq+0xc8>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	e007      	b.n	800397a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800396a:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <HAL_RCC_GetSysClockFreq+0xc8>)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	623b      	str	r3, [r7, #32]
      break;
 800397e:	e002      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003982:	623b      	str	r3, [r7, #32]
      break;
 8003984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003986:	6a3b      	ldr	r3, [r7, #32]
}
 8003988:	4618      	mov	r0, r3
 800398a:	372c      	adds	r7, #44	; 0x2c
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40021000 	.word	0x40021000
 8003998:	007a1200 	.word	0x007a1200
 800399c:	08006754 	.word	0x08006754
 80039a0:	08006764 	.word	0x08006764

080039a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000158 	.word	0x20000158

080039bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039c2:	f7ff ffef 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039c6:	4601      	mov	r1, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	fa92 f2a2 	rbit	r2, r2
 80039dc:	603a      	str	r2, [r7, #0]
  return result;
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	40d3      	lsrs	r3, r2
 80039e8:	4a04      	ldr	r2, [pc, #16]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	0800674c 	.word	0x0800674c

08003a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a06:	f7ff ffcd 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	fa92 f2a2 	rbit	r2, r2
 8003a20:	603a      	str	r2, [r7, #0]
  return result;
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	fab2 f282 	clz	r2, r2
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	40d3      	lsrs	r3, r2
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	0800674c 	.word	0x0800674c

08003a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b092      	sub	sp, #72	; 0x48
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80d7 	beq.w	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a68:	4b4e      	ldr	r3, [pc, #312]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10e      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a74:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	4a4a      	ldr	r2, [pc, #296]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	61d3      	str	r3, [r2, #28]
 8003a80:	4b48      	ldr	r3, [pc, #288]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a92:	4b45      	ldr	r3, [pc, #276]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9e:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a41      	ldr	r2, [pc, #260]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe fb5f 	bl	800216c <HAL_GetTick>
 8003aae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fe fb5b 	bl	800216c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b64      	cmp	r3, #100	; 0x64
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e1d6      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ad0:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8084 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d07c      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2300      	movs	r3, #0
 8003b40:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b42:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b46:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04b      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fe fb0b 	bl	800216c <HAL_GetTick>
 8003b56:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fe fb07 	bl	800216c <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e180      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b70:	2302      	movs	r3, #2
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	fa93 f3a3 	rbit	r3, r3
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	623b      	str	r3, [r7, #32]
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	61fb      	str	r3, [r7, #28]
  return result;
 8003b88:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d108      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b9e:	4b01      	ldr	r3, [pc, #4]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	e00d      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	10908100 	.word	0x10908100
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	613a      	str	r2, [r7, #16]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	fa92 f2a2 	rbit	r2, r2
 8003bca:	60fa      	str	r2, [r7, #12]
  return result;
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	fab2 f282 	clz	r2, r2
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	f002 021f 	and.w	r2, r2, #31
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0b7      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bea:	4b95      	ldr	r3, [pc, #596]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4992      	ldr	r1, [pc, #584]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b8e      	ldr	r3, [pc, #568]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4a8d      	ldr	r2, [pc, #564]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c1c:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	f023 0203 	bic.w	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4985      	ldr	r1, [pc, #532]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c3a:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	497e      	ldr	r1, [pc, #504]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c58:	4b79      	ldr	r3, [pc, #484]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	4976      	ldr	r1, [pc, #472]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c76:	4b72      	ldr	r3, [pc, #456]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f023 0210 	bic.w	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	496f      	ldr	r1, [pc, #444]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	4967      	ldr	r1, [pc, #412]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cb2:	4b63      	ldr	r3, [pc, #396]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f023 0220 	bic.w	r2, r3, #32
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4960      	ldr	r1, [pc, #384]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cd0:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	4958      	ldr	r1, [pc, #352]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cee:	4b54      	ldr	r3, [pc, #336]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	4951      	ldr	r1, [pc, #324]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	4949      	ldr	r1, [pc, #292]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d2a:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4942      	ldr	r1, [pc, #264]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d48:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	493a      	ldr	r1, [pc, #232]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	4933      	ldr	r1, [pc, #204]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d84:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	492b      	ldr	r1, [pc, #172]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003da2:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4924      	ldr	r1, [pc, #144]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	491c      	ldr	r1, [pc, #112]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	4915      	ldr	r1, [pc, #84]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	490d      	ldr	r1, [pc, #52]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e26:	4906      	ldr	r1, [pc, #24]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00c      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e38:	4b01      	ldr	r3, [pc, #4]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4c:	490b      	ldr	r1, [pc, #44]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6a:	4904      	ldr	r1, [pc, #16]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3748      	adds	r7, #72	; 0x48
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000

08003e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e01d      	b.n	8003ece <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fe f81e 	bl	8001ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 f9a6 	bl	8004210 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <HAL_TIM_Base_Start_IT+0x50>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d00b      	beq.n	8003f1a <HAL_TIM_Base_Start_IT+0x42>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f08:	d007      	beq.n	8003f1a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	00010007 	.word	0x00010007

08003f2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10f      	bne.n	8003f74 <HAL_TIM_Base_Stop_IT+0x48>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6a1a      	ldr	r2, [r3, #32]
 8003f5a:	f240 4344 	movw	r3, #1092	; 0x444
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d107      	bne.n	8003f74 <HAL_TIM_Base_Stop_IT+0x48>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d122      	bne.n	8003fde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d11b      	bne.n	8003fde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f06f 0202 	mvn.w	r2, #2
 8003fae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f905 	bl	80041d4 <HAL_TIM_IC_CaptureCallback>
 8003fca:	e005      	b.n	8003fd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f8f7 	bl	80041c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f908 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d122      	bne.n	8004032 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d11b      	bne.n	8004032 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f06f 0204 	mvn.w	r2, #4
 8004002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8db 	bl	80041d4 <HAL_TIM_IC_CaptureCallback>
 800401e:	e005      	b.n	800402c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f8cd 	bl	80041c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8de 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b08      	cmp	r3, #8
 800403e:	d122      	bne.n	8004086 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b08      	cmp	r3, #8
 800404c:	d11b      	bne.n	8004086 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0208 	mvn.w	r2, #8
 8004056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2204      	movs	r2, #4
 800405c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f8b1 	bl	80041d4 <HAL_TIM_IC_CaptureCallback>
 8004072:	e005      	b.n	8004080 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f8a3 	bl	80041c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8b4 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b10      	cmp	r3, #16
 8004092:	d122      	bne.n	80040da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d11b      	bne.n	80040da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0210 	mvn.w	r2, #16
 80040aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2208      	movs	r2, #8
 80040b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f887 	bl	80041d4 <HAL_TIM_IC_CaptureCallback>
 80040c6:	e005      	b.n	80040d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f879 	bl	80041c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f88a 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10e      	bne.n	8004106 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f06f 0201 	mvn.w	r2, #1
 80040fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fc fdd9 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b80      	cmp	r3, #128	; 0x80
 8004112:	d10e      	bne.n	8004132 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b80      	cmp	r3, #128	; 0x80
 8004120:	d107      	bne.n	8004132 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800412a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f9a3 	bl	8004478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004140:	d10e      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	d107      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f996 	bl	800448c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d10e      	bne.n	800418c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d107      	bne.n	800418c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f838 	bl	80041fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b20      	cmp	r3, #32
 8004198:	d10e      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d107      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0220 	mvn.w	r2, #32
 80041b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f956 	bl	8004464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a42      	ldr	r2, [pc, #264]	; (800432c <TIM_Base_SetConfig+0x11c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d013      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d00f      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a3f      	ldr	r2, [pc, #252]	; (8004330 <TIM_Base_SetConfig+0x120>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00b      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3e      	ldr	r2, [pc, #248]	; (8004334 <TIM_Base_SetConfig+0x124>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3d      	ldr	r2, [pc, #244]	; (8004338 <TIM_Base_SetConfig+0x128>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3c      	ldr	r2, [pc, #240]	; (800433c <TIM_Base_SetConfig+0x12c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d108      	bne.n	8004262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a31      	ldr	r2, [pc, #196]	; (800432c <TIM_Base_SetConfig+0x11c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01f      	beq.n	80042aa <TIM_Base_SetConfig+0x9a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d01b      	beq.n	80042aa <TIM_Base_SetConfig+0x9a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <TIM_Base_SetConfig+0x120>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d017      	beq.n	80042aa <TIM_Base_SetConfig+0x9a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2d      	ldr	r2, [pc, #180]	; (8004334 <TIM_Base_SetConfig+0x124>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <TIM_Base_SetConfig+0x9a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <TIM_Base_SetConfig+0x128>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00f      	beq.n	80042aa <TIM_Base_SetConfig+0x9a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <TIM_Base_SetConfig+0x130>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00b      	beq.n	80042aa <TIM_Base_SetConfig+0x9a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2b      	ldr	r2, [pc, #172]	; (8004344 <TIM_Base_SetConfig+0x134>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <TIM_Base_SetConfig+0x9a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <TIM_Base_SetConfig+0x138>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_Base_SetConfig+0x9a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a25      	ldr	r2, [pc, #148]	; (800433c <TIM_Base_SetConfig+0x12c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d108      	bne.n	80042bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <TIM_Base_SetConfig+0x11c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <TIM_Base_SetConfig+0x100>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a13      	ldr	r2, [pc, #76]	; (8004338 <TIM_Base_SetConfig+0x128>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00f      	beq.n	8004310 <TIM_Base_SetConfig+0x100>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a13      	ldr	r2, [pc, #76]	; (8004340 <TIM_Base_SetConfig+0x130>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00b      	beq.n	8004310 <TIM_Base_SetConfig+0x100>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <TIM_Base_SetConfig+0x134>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_Base_SetConfig+0x100>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a11      	ldr	r2, [pc, #68]	; (8004348 <TIM_Base_SetConfig+0x138>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0x100>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0c      	ldr	r2, [pc, #48]	; (800433c <TIM_Base_SetConfig+0x12c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d103      	bne.n	8004318 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	615a      	str	r2, [r3, #20]
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40013400 	.word	0x40013400
 800433c:	40015000 	.word	0x40015000
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e06d      	b.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a30      	ldr	r2, [pc, #192]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d01d      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e0:	d018      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1a      	ldr	r2, [pc, #104]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a15      	ldr	r2, [pc, #84]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a16      	ldr	r2, [pc, #88]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a11      	ldr	r2, [pc, #68]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d10c      	bne.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800441a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	4313      	orrs	r3, r2
 8004424:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40013400 	.word	0x40013400
 8004454:	40015000 	.word	0x40015000
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40014000 	.word	0x40014000

08004464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e040      	b.n	8004534 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd fd82 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fabc 	bl	8004a5c <UART_SetConfig>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e022      	b.n	8004534 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fcca 	bl	8004e90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800450a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800451a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fd51 	bl	8004fd4 <UART_CheckIdleState>
 8004532:	4603      	mov	r3, r0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	2b20      	cmp	r3, #32
 8004552:	f040 8081 	bne.w	8004658 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_UART_Transmit+0x26>
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e079      	b.n	800465a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_UART_Transmit+0x38>
 8004570:	2302      	movs	r3, #2
 8004572:	e072      	b.n	800465a <HAL_UART_Transmit+0x11e>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2221      	movs	r2, #33	; 0x21
 8004586:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004588:	f7fd fdf0 	bl	800216c <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	88fa      	ldrh	r2, [r7, #6]
 8004592:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	88fa      	ldrh	r2, [r7, #6]
 800459a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d108      	bne.n	80045ba <HAL_UART_Transmit+0x7e>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e003      	b.n	80045c2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045c2:	e02d      	b.n	8004620 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fd45 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e03d      	b.n	800465a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	881a      	ldrh	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f0:	b292      	uxth	r2, r2
 80045f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	3302      	adds	r3, #2
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	e008      	b.n	800460e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	b292      	uxth	r2, r2
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3301      	adds	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1cb      	bne.n	80045c4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	2140      	movs	r1, #64	; 0x40
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fd11 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e009      	b.n	800465a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004676:	2b20      	cmp	r3, #32
 8004678:	f040 808a 	bne.w	8004790 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_UART_Receive_IT+0x24>
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e082      	b.n	8004792 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_UART_Receive_IT+0x36>
 8004696:	2302      	movs	r3, #2
 8004698:	e07b      	b.n	8004792 <HAL_UART_Receive_IT+0x12e>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c6:	d10e      	bne.n	80046e6 <HAL_UART_Receive_IT+0x82>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_UART_Receive_IT+0x78>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046da:	e02d      	b.n	8004738 <HAL_UART_Receive_IT+0xd4>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	22ff      	movs	r2, #255	; 0xff
 80046e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e4:	e028      	b.n	8004738 <HAL_UART_Receive_IT+0xd4>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <HAL_UART_Receive_IT+0xa6>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <HAL_UART_Receive_IT+0x9c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	22ff      	movs	r2, #255	; 0xff
 80046fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046fe:	e01b      	b.n	8004738 <HAL_UART_Receive_IT+0xd4>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	227f      	movs	r2, #127	; 0x7f
 8004704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004708:	e016      	b.n	8004738 <HAL_UART_Receive_IT+0xd4>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004712:	d10d      	bne.n	8004730 <HAL_UART_Receive_IT+0xcc>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_UART_Receive_IT+0xc2>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	227f      	movs	r2, #127	; 0x7f
 8004720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004724:	e008      	b.n	8004738 <HAL_UART_Receive_IT+0xd4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	223f      	movs	r2, #63	; 0x3f
 800472a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800472e:	e003      	b.n	8004738 <HAL_UART_Receive_IT+0xd4>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2222      	movs	r2, #34	; 0x22
 8004742:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475c:	d107      	bne.n	800476e <HAL_UART_Receive_IT+0x10a>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a0d      	ldr	r2, [pc, #52]	; (80047a0 <HAL_UART_Receive_IT+0x13c>)
 800476a:	661a      	str	r2, [r3, #96]	; 0x60
 800476c:	e002      	b.n	8004774 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a0c      	ldr	r2, [pc, #48]	; (80047a4 <HAL_UART_Receive_IT+0x140>)
 8004772:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800478a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	08005299 	.word	0x08005299
 80047a4:	080051f3 	.word	0x080051f3

080047a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d113      	bne.n	8004800 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00e      	beq.n	8004800 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8114 	beq.w	8004a1e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
      }
      return;
 80047fe:	e10e      	b.n	8004a1e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80d6 	beq.w	80049b4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80cb 	beq.w	80049b4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00e      	beq.n	8004846 <HAL_UART_IRQHandler+0x9e>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00e      	beq.n	800486e <HAL_UART_IRQHandler+0xc6>
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2202      	movs	r2, #2
 8004860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004866:	f043 0204 	orr.w	r2, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00e      	beq.n	8004896 <HAL_UART_IRQHandler+0xee>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2204      	movs	r2, #4
 8004888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488e:	f043 0202 	orr.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d013      	beq.n	80048c8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c0:	f043 0208 	orr.w	r2, r3, #8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00f      	beq.n	80048f2 <HAL_UART_IRQHandler+0x14a>
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ea:	f043 0220 	orr.w	r2, r3, #32
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8093 	beq.w	8004a22 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00c      	beq.n	8004920 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004924:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d004      	beq.n	800493e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800493a:	2b00      	cmp	r3, #0
 800493c:	d031      	beq.n	80049a2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fc08 	bl	8005154 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d123      	bne.n	800499a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004960:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d013      	beq.n	8004992 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496e:	4a30      	ldr	r2, [pc, #192]	; (8004a30 <HAL_UART_IRQHandler+0x288>)
 8004970:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004976:	4618      	mov	r0, r3
 8004978:	f7fd fd37 	bl	80023ea <HAL_DMA_Abort_IT>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800498c:	4610      	mov	r0, r2
 800498e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	e00e      	b.n	80049b0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f858 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	e00a      	b.n	80049b0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f854 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	e006      	b.n	80049b0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f850 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80049ae:	e038      	b.n	8004a22 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	bf00      	nop
    return;
 80049b2:	e036      	b.n	8004a22 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <HAL_UART_IRQHandler+0x232>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fcb3 	bl	800533e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049d8:	e026      	b.n	8004a28 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00d      	beq.n	8004a00 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d017      	beq.n	8004a26 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
    }
    return;
 80049fe:	e012      	b.n	8004a26 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00e      	beq.n	8004a28 <HAL_UART_IRQHandler+0x280>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d009      	beq.n	8004a28 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fbd3 	bl	80051c0 <UART_EndTransmit_IT>
    return;
 8004a1a:	bf00      	nop
 8004a1c:	e004      	b.n	8004a28 <HAL_UART_IRQHandler+0x280>
      return;
 8004a1e:	bf00      	nop
 8004a20:	e002      	b.n	8004a28 <HAL_UART_IRQHandler+0x280>
    return;
 8004a22:	bf00      	nop
 8004a24:	e000      	b.n	8004a28 <HAL_UART_IRQHandler+0x280>
    return;
 8004a26:	bf00      	nop
  }

}
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	08005195 	.word	0x08005195

08004a34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4bac      	ldr	r3, [pc, #688]	; (8004d3c <UART_SetConfig+0x2e0>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	6939      	ldr	r1, [r7, #16]
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a9a      	ldr	r2, [pc, #616]	; (8004d40 <UART_SetConfig+0x2e4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d121      	bne.n	8004b20 <UART_SetConfig+0xc4>
 8004adc:	4b99      	ldr	r3, [pc, #612]	; (8004d44 <UART_SetConfig+0x2e8>)
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d817      	bhi.n	8004b18 <UART_SetConfig+0xbc>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <UART_SetConfig+0x94>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b01 	.word	0x08004b01
 8004af4:	08004b0d 	.word	0x08004b0d
 8004af8:	08004b13 	.word	0x08004b13
 8004afc:	08004b07 	.word	0x08004b07
 8004b00:	2301      	movs	r3, #1
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e0b2      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b06:	2302      	movs	r3, #2
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e0af      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e0ac      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b12:	2308      	movs	r3, #8
 8004b14:	77fb      	strb	r3, [r7, #31]
 8004b16:	e0a9      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b18:	2310      	movs	r3, #16
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	bf00      	nop
 8004b1e:	e0a5      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a88      	ldr	r2, [pc, #544]	; (8004d48 <UART_SetConfig+0x2ec>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d123      	bne.n	8004b72 <UART_SetConfig+0x116>
 8004b2a:	4b86      	ldr	r3, [pc, #536]	; (8004d44 <UART_SetConfig+0x2e8>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b36:	d012      	beq.n	8004b5e <UART_SetConfig+0x102>
 8004b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3c:	d802      	bhi.n	8004b44 <UART_SetConfig+0xe8>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <UART_SetConfig+0xf6>
 8004b42:	e012      	b.n	8004b6a <UART_SetConfig+0x10e>
 8004b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b48:	d00c      	beq.n	8004b64 <UART_SetConfig+0x108>
 8004b4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b4e:	d003      	beq.n	8004b58 <UART_SetConfig+0xfc>
 8004b50:	e00b      	b.n	8004b6a <UART_SetConfig+0x10e>
 8004b52:	2300      	movs	r3, #0
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e089      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e086      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b5e:	2304      	movs	r3, #4
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e083      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b64:	2308      	movs	r3, #8
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e080      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b6a:	2310      	movs	r3, #16
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	bf00      	nop
 8004b70:	e07c      	b.n	8004c6c <UART_SetConfig+0x210>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a75      	ldr	r2, [pc, #468]	; (8004d4c <UART_SetConfig+0x2f0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d123      	bne.n	8004bc4 <UART_SetConfig+0x168>
 8004b7c:	4b71      	ldr	r3, [pc, #452]	; (8004d44 <UART_SetConfig+0x2e8>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b88:	d012      	beq.n	8004bb0 <UART_SetConfig+0x154>
 8004b8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b8e:	d802      	bhi.n	8004b96 <UART_SetConfig+0x13a>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <UART_SetConfig+0x148>
 8004b94:	e012      	b.n	8004bbc <UART_SetConfig+0x160>
 8004b96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b9a:	d00c      	beq.n	8004bb6 <UART_SetConfig+0x15a>
 8004b9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ba0:	d003      	beq.n	8004baa <UART_SetConfig+0x14e>
 8004ba2:	e00b      	b.n	8004bbc <UART_SetConfig+0x160>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e060      	b.n	8004c6c <UART_SetConfig+0x210>
 8004baa:	2302      	movs	r3, #2
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e05d      	b.n	8004c6c <UART_SetConfig+0x210>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e05a      	b.n	8004c6c <UART_SetConfig+0x210>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e057      	b.n	8004c6c <UART_SetConfig+0x210>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	bf00      	nop
 8004bc2:	e053      	b.n	8004c6c <UART_SetConfig+0x210>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a61      	ldr	r2, [pc, #388]	; (8004d50 <UART_SetConfig+0x2f4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d123      	bne.n	8004c16 <UART_SetConfig+0x1ba>
 8004bce:	4b5d      	ldr	r3, [pc, #372]	; (8004d44 <UART_SetConfig+0x2e8>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bda:	d012      	beq.n	8004c02 <UART_SetConfig+0x1a6>
 8004bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be0:	d802      	bhi.n	8004be8 <UART_SetConfig+0x18c>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <UART_SetConfig+0x19a>
 8004be6:	e012      	b.n	8004c0e <UART_SetConfig+0x1b2>
 8004be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bec:	d00c      	beq.n	8004c08 <UART_SetConfig+0x1ac>
 8004bee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bf2:	d003      	beq.n	8004bfc <UART_SetConfig+0x1a0>
 8004bf4:	e00b      	b.n	8004c0e <UART_SetConfig+0x1b2>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e037      	b.n	8004c6c <UART_SetConfig+0x210>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e034      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c02:	2304      	movs	r3, #4
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e031      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e02e      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c0e:	2310      	movs	r3, #16
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	bf00      	nop
 8004c14:	e02a      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a4e      	ldr	r2, [pc, #312]	; (8004d54 <UART_SetConfig+0x2f8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d123      	bne.n	8004c68 <UART_SetConfig+0x20c>
 8004c20:	4b48      	ldr	r3, [pc, #288]	; (8004d44 <UART_SetConfig+0x2e8>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2c:	d012      	beq.n	8004c54 <UART_SetConfig+0x1f8>
 8004c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c32:	d802      	bhi.n	8004c3a <UART_SetConfig+0x1de>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <UART_SetConfig+0x1ec>
 8004c38:	e012      	b.n	8004c60 <UART_SetConfig+0x204>
 8004c3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c3e:	d00c      	beq.n	8004c5a <UART_SetConfig+0x1fe>
 8004c40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c44:	d003      	beq.n	8004c4e <UART_SetConfig+0x1f2>
 8004c46:	e00b      	b.n	8004c60 <UART_SetConfig+0x204>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e00e      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e00b      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c54:	2304      	movs	r3, #4
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e008      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e005      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c60:	2310      	movs	r3, #16
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	bf00      	nop
 8004c66:	e001      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c74:	f040 8090 	bne.w	8004d98 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d86c      	bhi.n	8004d58 <UART_SetConfig+0x2fc>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x228>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cc9 	.word	0x08004cc9
 8004c8c:	08004ce9 	.word	0x08004ce9
 8004c90:	08004d59 	.word	0x08004d59
 8004c94:	08004d05 	.word	0x08004d05
 8004c98:	08004d59 	.word	0x08004d59
 8004c9c:	08004d59 	.word	0x08004d59
 8004ca0:	08004d59 	.word	0x08004d59
 8004ca4:	08004d25 	.word	0x08004d25
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe fe88 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 8004cac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	005a      	lsls	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	61bb      	str	r3, [r7, #24]
        break;
 8004cc6:	e04a      	b.n	8004d5e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc8:	f7fe fe9a 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8004ccc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	005a      	lsls	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	61bb      	str	r3, [r7, #24]
        break;
 8004ce6:	e03a      	b.n	8004d5e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004cf2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6852      	ldr	r2, [r2, #4]
 8004cfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	61bb      	str	r3, [r7, #24]
        break;
 8004d02:	e02c      	b.n	8004d5e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d04:	f7fe fde4 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8004d08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	005a      	lsls	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	61bb      	str	r3, [r7, #24]
        break;
 8004d22:	e01c      	b.n	8004d5e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	61bb      	str	r3, [r7, #24]
        break;
 8004d3a:	e010      	b.n	8004d5e <UART_SetConfig+0x302>
 8004d3c:	efff69f3 	.word	0xefff69f3
 8004d40:	40013800 	.word	0x40013800
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40004400 	.word	0x40004400
 8004d4c:	40004800 	.word	0x40004800
 8004d50:	40004c00 	.word	0x40004c00
 8004d54:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	75fb      	strb	r3, [r7, #23]
        break;
 8004d5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b0f      	cmp	r3, #15
 8004d62:	d916      	bls.n	8004d92 <UART_SetConfig+0x336>
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6a:	d212      	bcs.n	8004d92 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f023 030f 	bic.w	r3, r3, #15
 8004d74:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	897b      	ldrh	r3, [r7, #10]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	897a      	ldrh	r2, [r7, #10]
 8004d8e:	60da      	str	r2, [r3, #12]
 8004d90:	e072      	b.n	8004e78 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
 8004d96:	e06f      	b.n	8004e78 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004d98:	7ffb      	ldrb	r3, [r7, #31]
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d85b      	bhi.n	8004e56 <UART_SetConfig+0x3fa>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0x348>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004de7 	.word	0x08004de7
 8004dac:	08004e05 	.word	0x08004e05
 8004db0:	08004e57 	.word	0x08004e57
 8004db4:	08004e21 	.word	0x08004e21
 8004db8:	08004e57 	.word	0x08004e57
 8004dbc:	08004e57 	.word	0x08004e57
 8004dc0:	08004e57 	.word	0x08004e57
 8004dc4:	08004e3f 	.word	0x08004e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7fe fdf8 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 8004dcc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	085a      	lsrs	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	61bb      	str	r3, [r7, #24]
        break;
 8004de4:	e03a      	b.n	8004e5c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de6:	f7fe fe0b 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8004dea:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	085a      	lsrs	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	441a      	add	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	61bb      	str	r3, [r7, #24]
        break;
 8004e02:	e02b      	b.n	8004e5c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004e0e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6852      	ldr	r2, [r2, #4]
 8004e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	61bb      	str	r3, [r7, #24]
        break;
 8004e1e:	e01d      	b.n	8004e5c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e20:	f7fe fd56 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8004e24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	085a      	lsrs	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	441a      	add	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	61bb      	str	r3, [r7, #24]
        break;
 8004e3c:	e00e      	b.n	8004e5c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	61bb      	str	r3, [r7, #24]
        break;
 8004e54:	e002      	b.n	8004e5c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
        break;
 8004e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	d908      	bls.n	8004e74 <UART_SetConfig+0x418>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e68:	d204      	bcs.n	8004e74 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	e001      	b.n	8004e78 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop

08004e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8e:	d10a      	bne.n	8004fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fe2:	f7fd f8c3 	bl	800216c <HAL_GetTick>
 8004fe6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d10e      	bne.n	8005014 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f82a 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e020      	b.n	8005056 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b04      	cmp	r3, #4
 8005020:	d10e      	bne.n	8005040 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005022:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f814 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e00a      	b.n	8005056 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	e05d      	b.n	800512c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d059      	beq.n	800512c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005078:	f7fd f878 	bl	800216c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	429a      	cmp	r2, r3
 8005086:	d302      	bcc.n	800508e <UART_WaitOnFlagUntilTimeout+0x30>
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d11b      	bne.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800509c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e042      	b.n	800514c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02b      	beq.n	800512c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e2:	d123      	bne.n	800512c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e00f      	b.n	800514c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4013      	ands	r3, r2
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	429a      	cmp	r2, r3
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	429a      	cmp	r2, r3
 8005148:	d092      	beq.n	8005070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800516a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff fc48 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fc25 	bl	8004a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005200:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005206:	2b22      	cmp	r3, #34	; 0x22
 8005208:	d13a      	bne.n	8005280 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005210:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005212:	89bb      	ldrh	r3, [r7, #12]
 8005214:	b2d9      	uxtb	r1, r3
 8005216:	89fb      	ldrh	r3, [r7, #14]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	400a      	ands	r2, r1
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d121      	bne.n	8005290 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800525a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fb fda7 	bl	8000dcc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800527e:	e007      	b.n	8005290 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0208 	orr.w	r2, r2, #8
 800528e:	619a      	str	r2, [r3, #24]
}
 8005290:	bf00      	nop
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052a6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ac:	2b22      	cmp	r3, #34	; 0x22
 80052ae:	d13a      	bne.n	8005326 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052b6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80052be:	89ba      	ldrh	r2, [r7, #12]
 80052c0:	89fb      	ldrh	r3, [r7, #14]
 80052c2:	4013      	ands	r3, r2
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d121      	bne.n	8005336 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005300:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fb fd54 	bl	8000dcc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005324:	e007      	b.n	8005336 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0208 	orr.w	r2, r2, #8
 8005334:	619a      	str	r2, [r3, #24]
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <__errno>:
 8005354:	4b01      	ldr	r3, [pc, #4]	; (800535c <__errno+0x8>)
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000164 	.word	0x20000164

08005360 <__libc_init_array>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4e0d      	ldr	r6, [pc, #52]	; (8005398 <__libc_init_array+0x38>)
 8005364:	4c0d      	ldr	r4, [pc, #52]	; (800539c <__libc_init_array+0x3c>)
 8005366:	1ba4      	subs	r4, r4, r6
 8005368:	10a4      	asrs	r4, r4, #2
 800536a:	2500      	movs	r5, #0
 800536c:	42a5      	cmp	r5, r4
 800536e:	d109      	bne.n	8005384 <__libc_init_array+0x24>
 8005370:	4e0b      	ldr	r6, [pc, #44]	; (80053a0 <__libc_init_array+0x40>)
 8005372:	4c0c      	ldr	r4, [pc, #48]	; (80053a4 <__libc_init_array+0x44>)
 8005374:	f001 f9ce 	bl	8006714 <_init>
 8005378:	1ba4      	subs	r4, r4, r6
 800537a:	10a4      	asrs	r4, r4, #2
 800537c:	2500      	movs	r5, #0
 800537e:	42a5      	cmp	r5, r4
 8005380:	d105      	bne.n	800538e <__libc_init_array+0x2e>
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005388:	4798      	blx	r3
 800538a:	3501      	adds	r5, #1
 800538c:	e7ee      	b.n	800536c <__libc_init_array+0xc>
 800538e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005392:	4798      	blx	r3
 8005394:	3501      	adds	r5, #1
 8005396:	e7f2      	b.n	800537e <__libc_init_array+0x1e>
 8005398:	080067b8 	.word	0x080067b8
 800539c:	080067b8 	.word	0x080067b8
 80053a0:	080067b8 	.word	0x080067b8
 80053a4:	080067bc 	.word	0x080067bc

080053a8 <malloc>:
 80053a8:	4b02      	ldr	r3, [pc, #8]	; (80053b4 <malloc+0xc>)
 80053aa:	4601      	mov	r1, r0
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	f000 b86d 	b.w	800548c <_malloc_r>
 80053b2:	bf00      	nop
 80053b4:	20000164 	.word	0x20000164

080053b8 <free>:
 80053b8:	4b02      	ldr	r3, [pc, #8]	; (80053c4 <free+0xc>)
 80053ba:	4601      	mov	r1, r0
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	f000 b817 	b.w	80053f0 <_free_r>
 80053c2:	bf00      	nop
 80053c4:	20000164 	.word	0x20000164

080053c8 <memcpy>:
 80053c8:	b510      	push	{r4, lr}
 80053ca:	1e43      	subs	r3, r0, #1
 80053cc:	440a      	add	r2, r1
 80053ce:	4291      	cmp	r1, r2
 80053d0:	d100      	bne.n	80053d4 <memcpy+0xc>
 80053d2:	bd10      	pop	{r4, pc}
 80053d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053dc:	e7f7      	b.n	80053ce <memcpy+0x6>

080053de <memset>:
 80053de:	4402      	add	r2, r0
 80053e0:	4603      	mov	r3, r0
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d100      	bne.n	80053e8 <memset+0xa>
 80053e6:	4770      	bx	lr
 80053e8:	f803 1b01 	strb.w	r1, [r3], #1
 80053ec:	e7f9      	b.n	80053e2 <memset+0x4>
	...

080053f0 <_free_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4605      	mov	r5, r0
 80053f4:	2900      	cmp	r1, #0
 80053f6:	d045      	beq.n	8005484 <_free_r+0x94>
 80053f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053fc:	1f0c      	subs	r4, r1, #4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bfb8      	it	lt
 8005402:	18e4      	addlt	r4, r4, r3
 8005404:	f000 f8ac 	bl	8005560 <__malloc_lock>
 8005408:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <_free_r+0x98>)
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	4610      	mov	r0, r2
 800540e:	b933      	cbnz	r3, 800541e <_free_r+0x2e>
 8005410:	6063      	str	r3, [r4, #4]
 8005412:	6014      	str	r4, [r2, #0]
 8005414:	4628      	mov	r0, r5
 8005416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800541a:	f000 b8a2 	b.w	8005562 <__malloc_unlock>
 800541e:	42a3      	cmp	r3, r4
 8005420:	d90c      	bls.n	800543c <_free_r+0x4c>
 8005422:	6821      	ldr	r1, [r4, #0]
 8005424:	1862      	adds	r2, r4, r1
 8005426:	4293      	cmp	r3, r2
 8005428:	bf04      	itt	eq
 800542a:	681a      	ldreq	r2, [r3, #0]
 800542c:	685b      	ldreq	r3, [r3, #4]
 800542e:	6063      	str	r3, [r4, #4]
 8005430:	bf04      	itt	eq
 8005432:	1852      	addeq	r2, r2, r1
 8005434:	6022      	streq	r2, [r4, #0]
 8005436:	6004      	str	r4, [r0, #0]
 8005438:	e7ec      	b.n	8005414 <_free_r+0x24>
 800543a:	4613      	mov	r3, r2
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	b10a      	cbz	r2, 8005444 <_free_r+0x54>
 8005440:	42a2      	cmp	r2, r4
 8005442:	d9fa      	bls.n	800543a <_free_r+0x4a>
 8005444:	6819      	ldr	r1, [r3, #0]
 8005446:	1858      	adds	r0, r3, r1
 8005448:	42a0      	cmp	r0, r4
 800544a:	d10b      	bne.n	8005464 <_free_r+0x74>
 800544c:	6820      	ldr	r0, [r4, #0]
 800544e:	4401      	add	r1, r0
 8005450:	1858      	adds	r0, r3, r1
 8005452:	4282      	cmp	r2, r0
 8005454:	6019      	str	r1, [r3, #0]
 8005456:	d1dd      	bne.n	8005414 <_free_r+0x24>
 8005458:	6810      	ldr	r0, [r2, #0]
 800545a:	6852      	ldr	r2, [r2, #4]
 800545c:	605a      	str	r2, [r3, #4]
 800545e:	4401      	add	r1, r0
 8005460:	6019      	str	r1, [r3, #0]
 8005462:	e7d7      	b.n	8005414 <_free_r+0x24>
 8005464:	d902      	bls.n	800546c <_free_r+0x7c>
 8005466:	230c      	movs	r3, #12
 8005468:	602b      	str	r3, [r5, #0]
 800546a:	e7d3      	b.n	8005414 <_free_r+0x24>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	1821      	adds	r1, r4, r0
 8005470:	428a      	cmp	r2, r1
 8005472:	bf04      	itt	eq
 8005474:	6811      	ldreq	r1, [r2, #0]
 8005476:	6852      	ldreq	r2, [r2, #4]
 8005478:	6062      	str	r2, [r4, #4]
 800547a:	bf04      	itt	eq
 800547c:	1809      	addeq	r1, r1, r0
 800547e:	6021      	streq	r1, [r4, #0]
 8005480:	605c      	str	r4, [r3, #4]
 8005482:	e7c7      	b.n	8005414 <_free_r+0x24>
 8005484:	bd38      	pop	{r3, r4, r5, pc}
 8005486:	bf00      	nop
 8005488:	200001f4 	.word	0x200001f4

0800548c <_malloc_r>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	1ccd      	adds	r5, r1, #3
 8005490:	f025 0503 	bic.w	r5, r5, #3
 8005494:	3508      	adds	r5, #8
 8005496:	2d0c      	cmp	r5, #12
 8005498:	bf38      	it	cc
 800549a:	250c      	movcc	r5, #12
 800549c:	2d00      	cmp	r5, #0
 800549e:	4606      	mov	r6, r0
 80054a0:	db01      	blt.n	80054a6 <_malloc_r+0x1a>
 80054a2:	42a9      	cmp	r1, r5
 80054a4:	d903      	bls.n	80054ae <_malloc_r+0x22>
 80054a6:	230c      	movs	r3, #12
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	2000      	movs	r0, #0
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
 80054ae:	f000 f857 	bl	8005560 <__malloc_lock>
 80054b2:	4a21      	ldr	r2, [pc, #132]	; (8005538 <_malloc_r+0xac>)
 80054b4:	6814      	ldr	r4, [r2, #0]
 80054b6:	4621      	mov	r1, r4
 80054b8:	b991      	cbnz	r1, 80054e0 <_malloc_r+0x54>
 80054ba:	4c20      	ldr	r4, [pc, #128]	; (800553c <_malloc_r+0xb0>)
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	b91b      	cbnz	r3, 80054c8 <_malloc_r+0x3c>
 80054c0:	4630      	mov	r0, r6
 80054c2:	f000 f83d 	bl	8005540 <_sbrk_r>
 80054c6:	6020      	str	r0, [r4, #0]
 80054c8:	4629      	mov	r1, r5
 80054ca:	4630      	mov	r0, r6
 80054cc:	f000 f838 	bl	8005540 <_sbrk_r>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d124      	bne.n	800551e <_malloc_r+0x92>
 80054d4:	230c      	movs	r3, #12
 80054d6:	6033      	str	r3, [r6, #0]
 80054d8:	4630      	mov	r0, r6
 80054da:	f000 f842 	bl	8005562 <__malloc_unlock>
 80054de:	e7e4      	b.n	80054aa <_malloc_r+0x1e>
 80054e0:	680b      	ldr	r3, [r1, #0]
 80054e2:	1b5b      	subs	r3, r3, r5
 80054e4:	d418      	bmi.n	8005518 <_malloc_r+0x8c>
 80054e6:	2b0b      	cmp	r3, #11
 80054e8:	d90f      	bls.n	800550a <_malloc_r+0x7e>
 80054ea:	600b      	str	r3, [r1, #0]
 80054ec:	50cd      	str	r5, [r1, r3]
 80054ee:	18cc      	adds	r4, r1, r3
 80054f0:	4630      	mov	r0, r6
 80054f2:	f000 f836 	bl	8005562 <__malloc_unlock>
 80054f6:	f104 000b 	add.w	r0, r4, #11
 80054fa:	1d23      	adds	r3, r4, #4
 80054fc:	f020 0007 	bic.w	r0, r0, #7
 8005500:	1ac3      	subs	r3, r0, r3
 8005502:	d0d3      	beq.n	80054ac <_malloc_r+0x20>
 8005504:	425a      	negs	r2, r3
 8005506:	50e2      	str	r2, [r4, r3]
 8005508:	e7d0      	b.n	80054ac <_malloc_r+0x20>
 800550a:	428c      	cmp	r4, r1
 800550c:	684b      	ldr	r3, [r1, #4]
 800550e:	bf16      	itet	ne
 8005510:	6063      	strne	r3, [r4, #4]
 8005512:	6013      	streq	r3, [r2, #0]
 8005514:	460c      	movne	r4, r1
 8005516:	e7eb      	b.n	80054f0 <_malloc_r+0x64>
 8005518:	460c      	mov	r4, r1
 800551a:	6849      	ldr	r1, [r1, #4]
 800551c:	e7cc      	b.n	80054b8 <_malloc_r+0x2c>
 800551e:	1cc4      	adds	r4, r0, #3
 8005520:	f024 0403 	bic.w	r4, r4, #3
 8005524:	42a0      	cmp	r0, r4
 8005526:	d005      	beq.n	8005534 <_malloc_r+0xa8>
 8005528:	1a21      	subs	r1, r4, r0
 800552a:	4630      	mov	r0, r6
 800552c:	f000 f808 	bl	8005540 <_sbrk_r>
 8005530:	3001      	adds	r0, #1
 8005532:	d0cf      	beq.n	80054d4 <_malloc_r+0x48>
 8005534:	6025      	str	r5, [r4, #0]
 8005536:	e7db      	b.n	80054f0 <_malloc_r+0x64>
 8005538:	200001f4 	.word	0x200001f4
 800553c:	200001f8 	.word	0x200001f8

08005540 <_sbrk_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4c06      	ldr	r4, [pc, #24]	; (800555c <_sbrk_r+0x1c>)
 8005544:	2300      	movs	r3, #0
 8005546:	4605      	mov	r5, r0
 8005548:	4608      	mov	r0, r1
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	f7fc fc14 	bl	8001d78 <_sbrk>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d102      	bne.n	800555a <_sbrk_r+0x1a>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	b103      	cbz	r3, 800555a <_sbrk_r+0x1a>
 8005558:	602b      	str	r3, [r5, #0]
 800555a:	bd38      	pop	{r3, r4, r5, pc}
 800555c:	200004e0 	.word	0x200004e0

08005560 <__malloc_lock>:
 8005560:	4770      	bx	lr

08005562 <__malloc_unlock>:
 8005562:	4770      	bx	lr
 8005564:	0000      	movs	r0, r0
	...

08005568 <ceil>:
 8005568:	ec51 0b10 	vmov	r0, r1, d0
 800556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005570:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005574:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005578:	2e13      	cmp	r6, #19
 800557a:	460c      	mov	r4, r1
 800557c:	ee10 5a10 	vmov	r5, s0
 8005580:	4680      	mov	r8, r0
 8005582:	dc30      	bgt.n	80055e6 <ceil+0x7e>
 8005584:	2e00      	cmp	r6, #0
 8005586:	da12      	bge.n	80055ae <ceil+0x46>
 8005588:	a333      	add	r3, pc, #204	; (adr r3, 8005658 <ceil+0xf0>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fa fe29 	bl	80001e4 <__adddf3>
 8005592:	2200      	movs	r2, #0
 8005594:	2300      	movs	r3, #0
 8005596:	f7fb fa6b 	bl	8000a70 <__aeabi_dcmpgt>
 800559a:	b128      	cbz	r0, 80055a8 <ceil+0x40>
 800559c:	2c00      	cmp	r4, #0
 800559e:	db55      	blt.n	800564c <ceil+0xe4>
 80055a0:	432c      	orrs	r4, r5
 80055a2:	d057      	beq.n	8005654 <ceil+0xec>
 80055a4:	4c2e      	ldr	r4, [pc, #184]	; (8005660 <ceil+0xf8>)
 80055a6:	2500      	movs	r5, #0
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	e025      	b.n	80055fa <ceil+0x92>
 80055ae:	4f2d      	ldr	r7, [pc, #180]	; (8005664 <ceil+0xfc>)
 80055b0:	4137      	asrs	r7, r6
 80055b2:	ea01 0307 	and.w	r3, r1, r7
 80055b6:	4303      	orrs	r3, r0
 80055b8:	d01f      	beq.n	80055fa <ceil+0x92>
 80055ba:	a327      	add	r3, pc, #156	; (adr r3, 8005658 <ceil+0xf0>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fa fe10 	bl	80001e4 <__adddf3>
 80055c4:	2200      	movs	r2, #0
 80055c6:	2300      	movs	r3, #0
 80055c8:	f7fb fa52 	bl	8000a70 <__aeabi_dcmpgt>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d0eb      	beq.n	80055a8 <ceil+0x40>
 80055d0:	2c00      	cmp	r4, #0
 80055d2:	bfc2      	ittt	gt
 80055d4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80055d8:	fa43 f606 	asrgt.w	r6, r3, r6
 80055dc:	19a4      	addgt	r4, r4, r6
 80055de:	ea24 0407 	bic.w	r4, r4, r7
 80055e2:	2500      	movs	r5, #0
 80055e4:	e7e0      	b.n	80055a8 <ceil+0x40>
 80055e6:	2e33      	cmp	r6, #51	; 0x33
 80055e8:	dd0b      	ble.n	8005602 <ceil+0x9a>
 80055ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80055ee:	d104      	bne.n	80055fa <ceil+0x92>
 80055f0:	ee10 2a10 	vmov	r2, s0
 80055f4:	460b      	mov	r3, r1
 80055f6:	f7fa fdf5 	bl	80001e4 <__adddf3>
 80055fa:	ec41 0b10 	vmov	d0, r0, r1
 80055fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005602:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005606:	f04f 33ff 	mov.w	r3, #4294967295
 800560a:	fa23 f707 	lsr.w	r7, r3, r7
 800560e:	4207      	tst	r7, r0
 8005610:	d0f3      	beq.n	80055fa <ceil+0x92>
 8005612:	a311      	add	r3, pc, #68	; (adr r3, 8005658 <ceil+0xf0>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fa fde4 	bl	80001e4 <__adddf3>
 800561c:	2200      	movs	r2, #0
 800561e:	2300      	movs	r3, #0
 8005620:	f7fb fa26 	bl	8000a70 <__aeabi_dcmpgt>
 8005624:	2800      	cmp	r0, #0
 8005626:	d0bf      	beq.n	80055a8 <ceil+0x40>
 8005628:	2c00      	cmp	r4, #0
 800562a:	dd02      	ble.n	8005632 <ceil+0xca>
 800562c:	2e14      	cmp	r6, #20
 800562e:	d103      	bne.n	8005638 <ceil+0xd0>
 8005630:	3401      	adds	r4, #1
 8005632:	ea25 0507 	bic.w	r5, r5, r7
 8005636:	e7b7      	b.n	80055a8 <ceil+0x40>
 8005638:	2301      	movs	r3, #1
 800563a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800563e:	fa03 f606 	lsl.w	r6, r3, r6
 8005642:	4435      	add	r5, r6
 8005644:	4545      	cmp	r5, r8
 8005646:	bf38      	it	cc
 8005648:	18e4      	addcc	r4, r4, r3
 800564a:	e7f2      	b.n	8005632 <ceil+0xca>
 800564c:	2500      	movs	r5, #0
 800564e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005652:	e7a9      	b.n	80055a8 <ceil+0x40>
 8005654:	4625      	mov	r5, r4
 8005656:	e7a7      	b.n	80055a8 <ceil+0x40>
 8005658:	8800759c 	.word	0x8800759c
 800565c:	7e37e43c 	.word	0x7e37e43c
 8005660:	3ff00000 	.word	0x3ff00000
 8005664:	000fffff 	.word	0x000fffff

08005668 <pow>:
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	ed2d 8b04 	vpush	{d8-d9}
 8005670:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8005944 <pow+0x2dc>
 8005674:	b08d      	sub	sp, #52	; 0x34
 8005676:	ec57 6b10 	vmov	r6, r7, d0
 800567a:	ec55 4b11 	vmov	r4, r5, d1
 800567e:	f000 f963 	bl	8005948 <__ieee754_pow>
 8005682:	f999 3000 	ldrsb.w	r3, [r9]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	eeb0 8a40 	vmov.f32	s16, s0
 800568e:	eef0 8a60 	vmov.f32	s17, s1
 8005692:	46c8      	mov	r8, r9
 8005694:	d05f      	beq.n	8005756 <pow+0xee>
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	4620      	mov	r0, r4
 800569c:	4629      	mov	r1, r5
 800569e:	f7fb f9f1 	bl	8000a84 <__aeabi_dcmpun>
 80056a2:	4683      	mov	fp, r0
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d156      	bne.n	8005756 <pow+0xee>
 80056a8:	4632      	mov	r2, r6
 80056aa:	463b      	mov	r3, r7
 80056ac:	4630      	mov	r0, r6
 80056ae:	4639      	mov	r1, r7
 80056b0:	f7fb f9e8 	bl	8000a84 <__aeabi_dcmpun>
 80056b4:	9001      	str	r0, [sp, #4]
 80056b6:	b1e8      	cbz	r0, 80056f4 <pow+0x8c>
 80056b8:	2200      	movs	r2, #0
 80056ba:	2300      	movs	r3, #0
 80056bc:	4620      	mov	r0, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	f7fb f9ae 	bl	8000a20 <__aeabi_dcmpeq>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d046      	beq.n	8005756 <pow+0xee>
 80056c8:	2301      	movs	r3, #1
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	4b96      	ldr	r3, [pc, #600]	; (8005928 <pow+0x2c0>)
 80056ce:	9303      	str	r3, [sp, #12]
 80056d0:	4b96      	ldr	r3, [pc, #600]	; (800592c <pow+0x2c4>)
 80056d2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80056d6:	2200      	movs	r2, #0
 80056d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80056dc:	9b00      	ldr	r3, [sp, #0]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80056e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80056e8:	d033      	beq.n	8005752 <pow+0xea>
 80056ea:	a802      	add	r0, sp, #8
 80056ec:	f000 fefb 	bl	80064e6 <matherr>
 80056f0:	bb48      	cbnz	r0, 8005746 <pow+0xde>
 80056f2:	e05d      	b.n	80057b0 <pow+0x148>
 80056f4:	f04f 0a00 	mov.w	sl, #0
 80056f8:	f04f 0b00 	mov.w	fp, #0
 80056fc:	4652      	mov	r2, sl
 80056fe:	465b      	mov	r3, fp
 8005700:	4630      	mov	r0, r6
 8005702:	4639      	mov	r1, r7
 8005704:	f7fb f98c 	bl	8000a20 <__aeabi_dcmpeq>
 8005708:	ec4b ab19 	vmov	d9, sl, fp
 800570c:	2800      	cmp	r0, #0
 800570e:	d054      	beq.n	80057ba <pow+0x152>
 8005710:	4652      	mov	r2, sl
 8005712:	465b      	mov	r3, fp
 8005714:	4620      	mov	r0, r4
 8005716:	4629      	mov	r1, r5
 8005718:	f7fb f982 	bl	8000a20 <__aeabi_dcmpeq>
 800571c:	4680      	mov	r8, r0
 800571e:	b318      	cbz	r0, 8005768 <pow+0x100>
 8005720:	2301      	movs	r3, #1
 8005722:	9302      	str	r3, [sp, #8]
 8005724:	4b80      	ldr	r3, [pc, #512]	; (8005928 <pow+0x2c0>)
 8005726:	9303      	str	r3, [sp, #12]
 8005728:	9b01      	ldr	r3, [sp, #4]
 800572a:	930a      	str	r3, [sp, #40]	; 0x28
 800572c:	9b00      	ldr	r3, [sp, #0]
 800572e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005732:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005736:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0d5      	beq.n	80056ea <pow+0x82>
 800573e:	4b7b      	ldr	r3, [pc, #492]	; (800592c <pow+0x2c4>)
 8005740:	2200      	movs	r2, #0
 8005742:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005748:	b11b      	cbz	r3, 8005752 <pow+0xea>
 800574a:	f7ff fe03 	bl	8005354 <__errno>
 800574e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005750:	6003      	str	r3, [r0, #0]
 8005752:	ed9d 8b08 	vldr	d8, [sp, #32]
 8005756:	eeb0 0a48 	vmov.f32	s0, s16
 800575a:	eef0 0a68 	vmov.f32	s1, s17
 800575e:	b00d      	add	sp, #52	; 0x34
 8005760:	ecbd 8b04 	vpop	{d8-d9}
 8005764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005768:	ec45 4b10 	vmov	d0, r4, r5
 800576c:	f000 feb3 	bl	80064d6 <finite>
 8005770:	2800      	cmp	r0, #0
 8005772:	d0f0      	beq.n	8005756 <pow+0xee>
 8005774:	4652      	mov	r2, sl
 8005776:	465b      	mov	r3, fp
 8005778:	4620      	mov	r0, r4
 800577a:	4629      	mov	r1, r5
 800577c:	f7fb f95a 	bl	8000a34 <__aeabi_dcmplt>
 8005780:	2800      	cmp	r0, #0
 8005782:	d0e8      	beq.n	8005756 <pow+0xee>
 8005784:	2301      	movs	r3, #1
 8005786:	9302      	str	r3, [sp, #8]
 8005788:	4b67      	ldr	r3, [pc, #412]	; (8005928 <pow+0x2c0>)
 800578a:	9303      	str	r3, [sp, #12]
 800578c:	f999 3000 	ldrsb.w	r3, [r9]
 8005790:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005794:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005798:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800579c:	b913      	cbnz	r3, 80057a4 <pow+0x13c>
 800579e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80057a2:	e7a2      	b.n	80056ea <pow+0x82>
 80057a4:	4962      	ldr	r1, [pc, #392]	; (8005930 <pow+0x2c8>)
 80057a6:	2000      	movs	r0, #0
 80057a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d19c      	bne.n	80056ea <pow+0x82>
 80057b0:	f7ff fdd0 	bl	8005354 <__errno>
 80057b4:	2321      	movs	r3, #33	; 0x21
 80057b6:	6003      	str	r3, [r0, #0]
 80057b8:	e7c5      	b.n	8005746 <pow+0xde>
 80057ba:	eeb0 0a48 	vmov.f32	s0, s16
 80057be:	eef0 0a68 	vmov.f32	s1, s17
 80057c2:	f000 fe88 	bl	80064d6 <finite>
 80057c6:	9000      	str	r0, [sp, #0]
 80057c8:	2800      	cmp	r0, #0
 80057ca:	f040 8081 	bne.w	80058d0 <pow+0x268>
 80057ce:	ec47 6b10 	vmov	d0, r6, r7
 80057d2:	f000 fe80 	bl	80064d6 <finite>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d07a      	beq.n	80058d0 <pow+0x268>
 80057da:	ec45 4b10 	vmov	d0, r4, r5
 80057de:	f000 fe7a 	bl	80064d6 <finite>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d074      	beq.n	80058d0 <pow+0x268>
 80057e6:	ec53 2b18 	vmov	r2, r3, d8
 80057ea:	ee18 0a10 	vmov	r0, s16
 80057ee:	4619      	mov	r1, r3
 80057f0:	f7fb f948 	bl	8000a84 <__aeabi_dcmpun>
 80057f4:	f999 9000 	ldrsb.w	r9, [r9]
 80057f8:	4b4b      	ldr	r3, [pc, #300]	; (8005928 <pow+0x2c0>)
 80057fa:	b1b0      	cbz	r0, 800582a <pow+0x1c2>
 80057fc:	2201      	movs	r2, #1
 80057fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005802:	9b00      	ldr	r3, [sp, #0]
 8005804:	930a      	str	r3, [sp, #40]	; 0x28
 8005806:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800580a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800580e:	f1b9 0f00 	cmp.w	r9, #0
 8005812:	d0c4      	beq.n	800579e <pow+0x136>
 8005814:	4652      	mov	r2, sl
 8005816:	465b      	mov	r3, fp
 8005818:	4650      	mov	r0, sl
 800581a:	4659      	mov	r1, fp
 800581c:	f7fa ffc2 	bl	80007a4 <__aeabi_ddiv>
 8005820:	f1b9 0f02 	cmp.w	r9, #2
 8005824:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005828:	e7c1      	b.n	80057ae <pow+0x146>
 800582a:	2203      	movs	r2, #3
 800582c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005830:	900a      	str	r0, [sp, #40]	; 0x28
 8005832:	4629      	mov	r1, r5
 8005834:	4620      	mov	r0, r4
 8005836:	2200      	movs	r2, #0
 8005838:	4b3e      	ldr	r3, [pc, #248]	; (8005934 <pow+0x2cc>)
 800583a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800583e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005842:	f7fa fe85 	bl	8000550 <__aeabi_dmul>
 8005846:	4604      	mov	r4, r0
 8005848:	460d      	mov	r5, r1
 800584a:	f1b9 0f00 	cmp.w	r9, #0
 800584e:	d124      	bne.n	800589a <pow+0x232>
 8005850:	4b39      	ldr	r3, [pc, #228]	; (8005938 <pow+0x2d0>)
 8005852:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005856:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800585a:	4630      	mov	r0, r6
 800585c:	4652      	mov	r2, sl
 800585e:	465b      	mov	r3, fp
 8005860:	4639      	mov	r1, r7
 8005862:	f7fb f8e7 	bl	8000a34 <__aeabi_dcmplt>
 8005866:	2800      	cmp	r0, #0
 8005868:	d056      	beq.n	8005918 <pow+0x2b0>
 800586a:	ec45 4b10 	vmov	d0, r4, r5
 800586e:	f000 fe47 	bl	8006500 <rint>
 8005872:	4622      	mov	r2, r4
 8005874:	462b      	mov	r3, r5
 8005876:	ec51 0b10 	vmov	r0, r1, d0
 800587a:	f7fb f8d1 	bl	8000a20 <__aeabi_dcmpeq>
 800587e:	b920      	cbnz	r0, 800588a <pow+0x222>
 8005880:	4b2e      	ldr	r3, [pc, #184]	; (800593c <pow+0x2d4>)
 8005882:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005886:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800588a:	f998 3000 	ldrsb.w	r3, [r8]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d142      	bne.n	8005918 <pow+0x2b0>
 8005892:	f7ff fd5f 	bl	8005354 <__errno>
 8005896:	2322      	movs	r3, #34	; 0x22
 8005898:	e78d      	b.n	80057b6 <pow+0x14e>
 800589a:	4b29      	ldr	r3, [pc, #164]	; (8005940 <pow+0x2d8>)
 800589c:	2200      	movs	r2, #0
 800589e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80058a2:	4630      	mov	r0, r6
 80058a4:	4652      	mov	r2, sl
 80058a6:	465b      	mov	r3, fp
 80058a8:	4639      	mov	r1, r7
 80058aa:	f7fb f8c3 	bl	8000a34 <__aeabi_dcmplt>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d0eb      	beq.n	800588a <pow+0x222>
 80058b2:	ec45 4b10 	vmov	d0, r4, r5
 80058b6:	f000 fe23 	bl	8006500 <rint>
 80058ba:	4622      	mov	r2, r4
 80058bc:	462b      	mov	r3, r5
 80058be:	ec51 0b10 	vmov	r0, r1, d0
 80058c2:	f7fb f8ad 	bl	8000a20 <__aeabi_dcmpeq>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	d1df      	bne.n	800588a <pow+0x222>
 80058ca:	2200      	movs	r2, #0
 80058cc:	4b18      	ldr	r3, [pc, #96]	; (8005930 <pow+0x2c8>)
 80058ce:	e7da      	b.n	8005886 <pow+0x21e>
 80058d0:	2200      	movs	r2, #0
 80058d2:	2300      	movs	r3, #0
 80058d4:	ec51 0b18 	vmov	r0, r1, d8
 80058d8:	f7fb f8a2 	bl	8000a20 <__aeabi_dcmpeq>
 80058dc:	2800      	cmp	r0, #0
 80058de:	f43f af3a 	beq.w	8005756 <pow+0xee>
 80058e2:	ec47 6b10 	vmov	d0, r6, r7
 80058e6:	f000 fdf6 	bl	80064d6 <finite>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	f43f af33 	beq.w	8005756 <pow+0xee>
 80058f0:	ec45 4b10 	vmov	d0, r4, r5
 80058f4:	f000 fdef 	bl	80064d6 <finite>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	f43f af2c 	beq.w	8005756 <pow+0xee>
 80058fe:	2304      	movs	r3, #4
 8005900:	9302      	str	r3, [sp, #8]
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <pow+0x2c0>)
 8005904:	9303      	str	r3, [sp, #12]
 8005906:	2300      	movs	r3, #0
 8005908:	930a      	str	r3, [sp, #40]	; 0x28
 800590a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800590e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005912:	ed8d 9b08 	vstr	d9, [sp, #32]
 8005916:	e7b8      	b.n	800588a <pow+0x222>
 8005918:	a802      	add	r0, sp, #8
 800591a:	f000 fde4 	bl	80064e6 <matherr>
 800591e:	2800      	cmp	r0, #0
 8005920:	f47f af11 	bne.w	8005746 <pow+0xde>
 8005924:	e7b5      	b.n	8005892 <pow+0x22a>
 8005926:	bf00      	nop
 8005928:	08006774 	.word	0x08006774
 800592c:	3ff00000 	.word	0x3ff00000
 8005930:	fff00000 	.word	0xfff00000
 8005934:	3fe00000 	.word	0x3fe00000
 8005938:	47efffff 	.word	0x47efffff
 800593c:	c7efffff 	.word	0xc7efffff
 8005940:	7ff00000 	.word	0x7ff00000
 8005944:	200001c8 	.word	0x200001c8

08005948 <__ieee754_pow>:
 8005948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	b091      	sub	sp, #68	; 0x44
 800594e:	ed8d 1b00 	vstr	d1, [sp]
 8005952:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005956:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800595a:	ea58 0302 	orrs.w	r3, r8, r2
 800595e:	ec57 6b10 	vmov	r6, r7, d0
 8005962:	f000 84be 	beq.w	80062e2 <__ieee754_pow+0x99a>
 8005966:	4b7a      	ldr	r3, [pc, #488]	; (8005b50 <__ieee754_pow+0x208>)
 8005968:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800596c:	429c      	cmp	r4, r3
 800596e:	463d      	mov	r5, r7
 8005970:	ee10 aa10 	vmov	sl, s0
 8005974:	dc09      	bgt.n	800598a <__ieee754_pow+0x42>
 8005976:	d103      	bne.n	8005980 <__ieee754_pow+0x38>
 8005978:	b93e      	cbnz	r6, 800598a <__ieee754_pow+0x42>
 800597a:	45a0      	cmp	r8, r4
 800597c:	dc0d      	bgt.n	800599a <__ieee754_pow+0x52>
 800597e:	e001      	b.n	8005984 <__ieee754_pow+0x3c>
 8005980:	4598      	cmp	r8, r3
 8005982:	dc02      	bgt.n	800598a <__ieee754_pow+0x42>
 8005984:	4598      	cmp	r8, r3
 8005986:	d10e      	bne.n	80059a6 <__ieee754_pow+0x5e>
 8005988:	b16a      	cbz	r2, 80059a6 <__ieee754_pow+0x5e>
 800598a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800598e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005992:	ea54 030a 	orrs.w	r3, r4, sl
 8005996:	f000 84a4 	beq.w	80062e2 <__ieee754_pow+0x99a>
 800599a:	486e      	ldr	r0, [pc, #440]	; (8005b54 <__ieee754_pow+0x20c>)
 800599c:	b011      	add	sp, #68	; 0x44
 800599e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a2:	f000 bda5 	b.w	80064f0 <nan>
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	da53      	bge.n	8005a52 <__ieee754_pow+0x10a>
 80059aa:	4b6b      	ldr	r3, [pc, #428]	; (8005b58 <__ieee754_pow+0x210>)
 80059ac:	4598      	cmp	r8, r3
 80059ae:	dc4d      	bgt.n	8005a4c <__ieee754_pow+0x104>
 80059b0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80059b4:	4598      	cmp	r8, r3
 80059b6:	dd4c      	ble.n	8005a52 <__ieee754_pow+0x10a>
 80059b8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80059bc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059c0:	2b14      	cmp	r3, #20
 80059c2:	dd26      	ble.n	8005a12 <__ieee754_pow+0xca>
 80059c4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80059c8:	fa22 f103 	lsr.w	r1, r2, r3
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d13e      	bne.n	8005a52 <__ieee754_pow+0x10a>
 80059d4:	f001 0101 	and.w	r1, r1, #1
 80059d8:	f1c1 0b02 	rsb	fp, r1, #2
 80059dc:	2a00      	cmp	r2, #0
 80059de:	d15b      	bne.n	8005a98 <__ieee754_pow+0x150>
 80059e0:	4b5b      	ldr	r3, [pc, #364]	; (8005b50 <__ieee754_pow+0x208>)
 80059e2:	4598      	cmp	r8, r3
 80059e4:	d124      	bne.n	8005a30 <__ieee754_pow+0xe8>
 80059e6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80059ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80059ee:	ea53 030a 	orrs.w	r3, r3, sl
 80059f2:	f000 8476 	beq.w	80062e2 <__ieee754_pow+0x99a>
 80059f6:	4b59      	ldr	r3, [pc, #356]	; (8005b5c <__ieee754_pow+0x214>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	dd2d      	ble.n	8005a58 <__ieee754_pow+0x110>
 80059fc:	f1b9 0f00 	cmp.w	r9, #0
 8005a00:	f280 8473 	bge.w	80062ea <__ieee754_pow+0x9a2>
 8005a04:	2000      	movs	r0, #0
 8005a06:	2100      	movs	r1, #0
 8005a08:	ec41 0b10 	vmov	d0, r0, r1
 8005a0c:	b011      	add	sp, #68	; 0x44
 8005a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	d13e      	bne.n	8005a94 <__ieee754_pow+0x14c>
 8005a16:	f1c3 0314 	rsb	r3, r3, #20
 8005a1a:	fa48 f103 	asr.w	r1, r8, r3
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	4543      	cmp	r3, r8
 8005a24:	f040 8469 	bne.w	80062fa <__ieee754_pow+0x9b2>
 8005a28:	f001 0101 	and.w	r1, r1, #1
 8005a2c:	f1c1 0b02 	rsb	fp, r1, #2
 8005a30:	4b4b      	ldr	r3, [pc, #300]	; (8005b60 <__ieee754_pow+0x218>)
 8005a32:	4598      	cmp	r8, r3
 8005a34:	d118      	bne.n	8005a68 <__ieee754_pow+0x120>
 8005a36:	f1b9 0f00 	cmp.w	r9, #0
 8005a3a:	f280 845a 	bge.w	80062f2 <__ieee754_pow+0x9aa>
 8005a3e:	4948      	ldr	r1, [pc, #288]	; (8005b60 <__ieee754_pow+0x218>)
 8005a40:	4632      	mov	r2, r6
 8005a42:	463b      	mov	r3, r7
 8005a44:	2000      	movs	r0, #0
 8005a46:	f7fa fead 	bl	80007a4 <__aeabi_ddiv>
 8005a4a:	e7dd      	b.n	8005a08 <__ieee754_pow+0xc0>
 8005a4c:	f04f 0b02 	mov.w	fp, #2
 8005a50:	e7c4      	b.n	80059dc <__ieee754_pow+0x94>
 8005a52:	f04f 0b00 	mov.w	fp, #0
 8005a56:	e7c1      	b.n	80059dc <__ieee754_pow+0x94>
 8005a58:	f1b9 0f00 	cmp.w	r9, #0
 8005a5c:	dad2      	bge.n	8005a04 <__ieee754_pow+0xbc>
 8005a5e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005a62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a66:	e7cf      	b.n	8005a08 <__ieee754_pow+0xc0>
 8005a68:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005a6c:	d106      	bne.n	8005a7c <__ieee754_pow+0x134>
 8005a6e:	4632      	mov	r2, r6
 8005a70:	463b      	mov	r3, r7
 8005a72:	4610      	mov	r0, r2
 8005a74:	4619      	mov	r1, r3
 8005a76:	f7fa fd6b 	bl	8000550 <__aeabi_dmul>
 8005a7a:	e7c5      	b.n	8005a08 <__ieee754_pow+0xc0>
 8005a7c:	4b39      	ldr	r3, [pc, #228]	; (8005b64 <__ieee754_pow+0x21c>)
 8005a7e:	4599      	cmp	r9, r3
 8005a80:	d10a      	bne.n	8005a98 <__ieee754_pow+0x150>
 8005a82:	2d00      	cmp	r5, #0
 8005a84:	db08      	blt.n	8005a98 <__ieee754_pow+0x150>
 8005a86:	ec47 6b10 	vmov	d0, r6, r7
 8005a8a:	b011      	add	sp, #68	; 0x44
 8005a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	f000 bc68 	b.w	8006364 <__ieee754_sqrt>
 8005a94:	f04f 0b00 	mov.w	fp, #0
 8005a98:	ec47 6b10 	vmov	d0, r6, r7
 8005a9c:	f000 fd12 	bl	80064c4 <fabs>
 8005aa0:	ec51 0b10 	vmov	r0, r1, d0
 8005aa4:	f1ba 0f00 	cmp.w	sl, #0
 8005aa8:	d127      	bne.n	8005afa <__ieee754_pow+0x1b2>
 8005aaa:	b124      	cbz	r4, 8005ab6 <__ieee754_pow+0x16e>
 8005aac:	4b2c      	ldr	r3, [pc, #176]	; (8005b60 <__ieee754_pow+0x218>)
 8005aae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d121      	bne.n	8005afa <__ieee754_pow+0x1b2>
 8005ab6:	f1b9 0f00 	cmp.w	r9, #0
 8005aba:	da05      	bge.n	8005ac8 <__ieee754_pow+0x180>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	4927      	ldr	r1, [pc, #156]	; (8005b60 <__ieee754_pow+0x218>)
 8005ac4:	f7fa fe6e 	bl	80007a4 <__aeabi_ddiv>
 8005ac8:	2d00      	cmp	r5, #0
 8005aca:	da9d      	bge.n	8005a08 <__ieee754_pow+0xc0>
 8005acc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005ad0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005ad4:	ea54 030b 	orrs.w	r3, r4, fp
 8005ad8:	d108      	bne.n	8005aec <__ieee754_pow+0x1a4>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f7fa fb7d 	bl	80001e0 <__aeabi_dsub>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	e7ac      	b.n	8005a46 <__ieee754_pow+0xfe>
 8005aec:	f1bb 0f01 	cmp.w	fp, #1
 8005af0:	d18a      	bne.n	8005a08 <__ieee754_pow+0xc0>
 8005af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005af6:	4619      	mov	r1, r3
 8005af8:	e786      	b.n	8005a08 <__ieee754_pow+0xc0>
 8005afa:	0fed      	lsrs	r5, r5, #31
 8005afc:	1e6b      	subs	r3, r5, #1
 8005afe:	930d      	str	r3, [sp, #52]	; 0x34
 8005b00:	ea5b 0303 	orrs.w	r3, fp, r3
 8005b04:	d102      	bne.n	8005b0c <__ieee754_pow+0x1c4>
 8005b06:	4632      	mov	r2, r6
 8005b08:	463b      	mov	r3, r7
 8005b0a:	e7e8      	b.n	8005ade <__ieee754_pow+0x196>
 8005b0c:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <__ieee754_pow+0x220>)
 8005b0e:	4598      	cmp	r8, r3
 8005b10:	f340 80fe 	ble.w	8005d10 <__ieee754_pow+0x3c8>
 8005b14:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005b18:	4598      	cmp	r8, r3
 8005b1a:	dd0a      	ble.n	8005b32 <__ieee754_pow+0x1ea>
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <__ieee754_pow+0x214>)
 8005b1e:	429c      	cmp	r4, r3
 8005b20:	dc0d      	bgt.n	8005b3e <__ieee754_pow+0x1f6>
 8005b22:	f1b9 0f00 	cmp.w	r9, #0
 8005b26:	f6bf af6d 	bge.w	8005a04 <__ieee754_pow+0xbc>
 8005b2a:	a307      	add	r3, pc, #28	; (adr r3, 8005b48 <__ieee754_pow+0x200>)
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	e79f      	b.n	8005a72 <__ieee754_pow+0x12a>
 8005b32:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <__ieee754_pow+0x224>)
 8005b34:	429c      	cmp	r4, r3
 8005b36:	ddf4      	ble.n	8005b22 <__ieee754_pow+0x1da>
 8005b38:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <__ieee754_pow+0x218>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	dd18      	ble.n	8005b70 <__ieee754_pow+0x228>
 8005b3e:	f1b9 0f00 	cmp.w	r9, #0
 8005b42:	dcf2      	bgt.n	8005b2a <__ieee754_pow+0x1e2>
 8005b44:	e75e      	b.n	8005a04 <__ieee754_pow+0xbc>
 8005b46:	bf00      	nop
 8005b48:	8800759c 	.word	0x8800759c
 8005b4c:	7e37e43c 	.word	0x7e37e43c
 8005b50:	7ff00000 	.word	0x7ff00000
 8005b54:	08006777 	.word	0x08006777
 8005b58:	433fffff 	.word	0x433fffff
 8005b5c:	3fefffff 	.word	0x3fefffff
 8005b60:	3ff00000 	.word	0x3ff00000
 8005b64:	3fe00000 	.word	0x3fe00000
 8005b68:	41e00000 	.word	0x41e00000
 8005b6c:	3feffffe 	.word	0x3feffffe
 8005b70:	2200      	movs	r2, #0
 8005b72:	4b63      	ldr	r3, [pc, #396]	; (8005d00 <__ieee754_pow+0x3b8>)
 8005b74:	f7fa fb34 	bl	80001e0 <__aeabi_dsub>
 8005b78:	a355      	add	r3, pc, #340	; (adr r3, 8005cd0 <__ieee754_pow+0x388>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	4604      	mov	r4, r0
 8005b80:	460d      	mov	r5, r1
 8005b82:	f7fa fce5 	bl	8000550 <__aeabi_dmul>
 8005b86:	a354      	add	r3, pc, #336	; (adr r3, 8005cd8 <__ieee754_pow+0x390>)
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	460f      	mov	r7, r1
 8005b90:	4620      	mov	r0, r4
 8005b92:	4629      	mov	r1, r5
 8005b94:	f7fa fcdc 	bl	8000550 <__aeabi_dmul>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b9e:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <__ieee754_pow+0x3bc>)
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	f7fa fcd4 	bl	8000550 <__aeabi_dmul>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	a14c      	add	r1, pc, #304	; (adr r1, 8005ce0 <__ieee754_pow+0x398>)
 8005bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bb2:	f7fa fb15 	bl	80001e0 <__aeabi_dsub>
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	462b      	mov	r3, r5
 8005bba:	f7fa fcc9 	bl	8000550 <__aeabi_dmul>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	4950      	ldr	r1, [pc, #320]	; (8005d08 <__ieee754_pow+0x3c0>)
 8005bc6:	f7fa fb0b 	bl	80001e0 <__aeabi_dsub>
 8005bca:	4622      	mov	r2, r4
 8005bcc:	462b      	mov	r3, r5
 8005bce:	4680      	mov	r8, r0
 8005bd0:	4689      	mov	r9, r1
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7fa fcbb 	bl	8000550 <__aeabi_dmul>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4640      	mov	r0, r8
 8005be0:	4649      	mov	r1, r9
 8005be2:	f7fa fcb5 	bl	8000550 <__aeabi_dmul>
 8005be6:	a340      	add	r3, pc, #256	; (adr r3, 8005ce8 <__ieee754_pow+0x3a0>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa fcb0 	bl	8000550 <__aeabi_dmul>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf8:	f7fa faf2 	bl	80001e0 <__aeabi_dsub>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	4630      	mov	r0, r6
 8005c06:	4639      	mov	r1, r7
 8005c08:	f7fa faec 	bl	80001e4 <__adddf3>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c12:	4632      	mov	r2, r6
 8005c14:	463b      	mov	r3, r7
 8005c16:	f7fa fae3 	bl	80001e0 <__aeabi_dsub>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4620      	mov	r0, r4
 8005c20:	4629      	mov	r1, r5
 8005c22:	f7fa fadd 	bl	80001e0 <__aeabi_dsub>
 8005c26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c28:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460f      	mov	r7, r1
 8005c32:	f040 81eb 	bne.w	800600c <__ieee754_pow+0x6c4>
 8005c36:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005cf0 <__ieee754_pow+0x3a8>
 8005c3a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005c3e:	2400      	movs	r4, #0
 8005c40:	4622      	mov	r2, r4
 8005c42:	462b      	mov	r3, r5
 8005c44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c4c:	f7fa fac8 	bl	80001e0 <__aeabi_dsub>
 8005c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c54:	f7fa fc7c 	bl	8000550 <__aeabi_dmul>
 8005c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4689      	mov	r9, r1
 8005c60:	4630      	mov	r0, r6
 8005c62:	4639      	mov	r1, r7
 8005c64:	f7fa fc74 	bl	8000550 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	4649      	mov	r1, r9
 8005c70:	f7fa fab8 	bl	80001e4 <__adddf3>
 8005c74:	4622      	mov	r2, r4
 8005c76:	462b      	mov	r3, r5
 8005c78:	4680      	mov	r8, r0
 8005c7a:	4689      	mov	r9, r1
 8005c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c80:	f7fa fc66 	bl	8000550 <__aeabi_dmul>
 8005c84:	460b      	mov	r3, r1
 8005c86:	4604      	mov	r4, r0
 8005c88:	460d      	mov	r5, r1
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	4640      	mov	r0, r8
 8005c90:	e9cd 4500 	strd	r4, r5, [sp]
 8005c94:	f7fa faa6 	bl	80001e4 <__adddf3>
 8005c98:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <__ieee754_pow+0x3c4>)
 8005c9a:	4299      	cmp	r1, r3
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	468b      	mov	fp, r1
 8005ca2:	f340 82f7 	ble.w	8006294 <__ieee754_pow+0x94c>
 8005ca6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005caa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005cae:	4303      	orrs	r3, r0
 8005cb0:	f000 81ea 	beq.w	8006088 <__ieee754_pow+0x740>
 8005cb4:	a310      	add	r3, pc, #64	; (adr r3, 8005cf8 <__ieee754_pow+0x3b0>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cbe:	f7fa fc47 	bl	8000550 <__aeabi_dmul>
 8005cc2:	a30d      	add	r3, pc, #52	; (adr r3, 8005cf8 <__ieee754_pow+0x3b0>)
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	e6d5      	b.n	8005a76 <__ieee754_pow+0x12e>
 8005cca:	bf00      	nop
 8005ccc:	f3af 8000 	nop.w
 8005cd0:	60000000 	.word	0x60000000
 8005cd4:	3ff71547 	.word	0x3ff71547
 8005cd8:	f85ddf44 	.word	0xf85ddf44
 8005cdc:	3e54ae0b 	.word	0x3e54ae0b
 8005ce0:	55555555 	.word	0x55555555
 8005ce4:	3fd55555 	.word	0x3fd55555
 8005ce8:	652b82fe 	.word	0x652b82fe
 8005cec:	3ff71547 	.word	0x3ff71547
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	bff00000 	.word	0xbff00000
 8005cf8:	8800759c 	.word	0x8800759c
 8005cfc:	7e37e43c 	.word	0x7e37e43c
 8005d00:	3ff00000 	.word	0x3ff00000
 8005d04:	3fd00000 	.word	0x3fd00000
 8005d08:	3fe00000 	.word	0x3fe00000
 8005d0c:	408fffff 	.word	0x408fffff
 8005d10:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	da05      	bge.n	8005d26 <__ieee754_pow+0x3de>
 8005d1a:	4bd3      	ldr	r3, [pc, #844]	; (8006068 <__ieee754_pow+0x720>)
 8005d1c:	f7fa fc18 	bl	8000550 <__aeabi_dmul>
 8005d20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005d24:	460c      	mov	r4, r1
 8005d26:	1523      	asrs	r3, r4, #20
 8005d28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d2c:	4413      	add	r3, r2
 8005d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d30:	4bce      	ldr	r3, [pc, #824]	; (800606c <__ieee754_pow+0x724>)
 8005d32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005d36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005d3a:	429c      	cmp	r4, r3
 8005d3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005d40:	dd08      	ble.n	8005d54 <__ieee754_pow+0x40c>
 8005d42:	4bcb      	ldr	r3, [pc, #812]	; (8006070 <__ieee754_pow+0x728>)
 8005d44:	429c      	cmp	r4, r3
 8005d46:	f340 815e 	ble.w	8006006 <__ieee754_pow+0x6be>
 8005d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005d54:	f04f 0a00 	mov.w	sl, #0
 8005d58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005d5c:	930c      	str	r3, [sp, #48]	; 0x30
 8005d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d60:	4bc4      	ldr	r3, [pc, #784]	; (8006074 <__ieee754_pow+0x72c>)
 8005d62:	4413      	add	r3, r2
 8005d64:	ed93 7b00 	vldr	d7, [r3]
 8005d68:	4629      	mov	r1, r5
 8005d6a:	ec53 2b17 	vmov	r2, r3, d7
 8005d6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005d72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d76:	f7fa fa33 	bl	80001e0 <__aeabi_dsub>
 8005d7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d7e:	4606      	mov	r6, r0
 8005d80:	460f      	mov	r7, r1
 8005d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d86:	f7fa fa2d 	bl	80001e4 <__adddf3>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	2000      	movs	r0, #0
 8005d90:	49b9      	ldr	r1, [pc, #740]	; (8006078 <__ieee754_pow+0x730>)
 8005d92:	f7fa fd07 	bl	80007a4 <__aeabi_ddiv>
 8005d96:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4630      	mov	r0, r6
 8005da0:	4639      	mov	r1, r7
 8005da2:	f7fa fbd5 	bl	8000550 <__aeabi_dmul>
 8005da6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005daa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005dae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005db2:	2300      	movs	r3, #0
 8005db4:	9302      	str	r3, [sp, #8]
 8005db6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005dba:	106d      	asrs	r5, r5, #1
 8005dbc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005dc0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4614      	mov	r4, r2
 8005dd0:	461d      	mov	r5, r3
 8005dd2:	f7fa fbbd 	bl	8000550 <__aeabi_dmul>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4630      	mov	r0, r6
 8005ddc:	4639      	mov	r1, r7
 8005dde:	f7fa f9ff 	bl	80001e0 <__aeabi_dsub>
 8005de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005de6:	4606      	mov	r6, r0
 8005de8:	460f      	mov	r7, r1
 8005dea:	4620      	mov	r0, r4
 8005dec:	4629      	mov	r1, r5
 8005dee:	f7fa f9f7 	bl	80001e0 <__aeabi_dsub>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dfa:	f7fa f9f1 	bl	80001e0 <__aeabi_dsub>
 8005dfe:	4642      	mov	r2, r8
 8005e00:	464b      	mov	r3, r9
 8005e02:	f7fa fba5 	bl	8000550 <__aeabi_dmul>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	f7fa f9e7 	bl	80001e0 <__aeabi_dsub>
 8005e12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e16:	f7fa fb9b 	bl	8000550 <__aeabi_dmul>
 8005e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e22:	4610      	mov	r0, r2
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7fa fb93 	bl	8000550 <__aeabi_dmul>
 8005e2a:	a37b      	add	r3, pc, #492	; (adr r3, 8006018 <__ieee754_pow+0x6d0>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	4604      	mov	r4, r0
 8005e32:	460d      	mov	r5, r1
 8005e34:	f7fa fb8c 	bl	8000550 <__aeabi_dmul>
 8005e38:	a379      	add	r3, pc, #484	; (adr r3, 8006020 <__ieee754_pow+0x6d8>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa f9d1 	bl	80001e4 <__adddf3>
 8005e42:	4622      	mov	r2, r4
 8005e44:	462b      	mov	r3, r5
 8005e46:	f7fa fb83 	bl	8000550 <__aeabi_dmul>
 8005e4a:	a377      	add	r3, pc, #476	; (adr r3, 8006028 <__ieee754_pow+0x6e0>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa f9c8 	bl	80001e4 <__adddf3>
 8005e54:	4622      	mov	r2, r4
 8005e56:	462b      	mov	r3, r5
 8005e58:	f7fa fb7a 	bl	8000550 <__aeabi_dmul>
 8005e5c:	a374      	add	r3, pc, #464	; (adr r3, 8006030 <__ieee754_pow+0x6e8>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa f9bf 	bl	80001e4 <__adddf3>
 8005e66:	4622      	mov	r2, r4
 8005e68:	462b      	mov	r3, r5
 8005e6a:	f7fa fb71 	bl	8000550 <__aeabi_dmul>
 8005e6e:	a372      	add	r3, pc, #456	; (adr r3, 8006038 <__ieee754_pow+0x6f0>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa f9b6 	bl	80001e4 <__adddf3>
 8005e78:	4622      	mov	r2, r4
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	f7fa fb68 	bl	8000550 <__aeabi_dmul>
 8005e80:	a36f      	add	r3, pc, #444	; (adr r3, 8006040 <__ieee754_pow+0x6f8>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f7fa f9ad 	bl	80001e4 <__adddf3>
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	462b      	mov	r3, r5
 8005e92:	4620      	mov	r0, r4
 8005e94:	4629      	mov	r1, r5
 8005e96:	f7fa fb5b 	bl	8000550 <__aeabi_dmul>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	f7fa fb55 	bl	8000550 <__aeabi_dmul>
 8005ea6:	4642      	mov	r2, r8
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	460d      	mov	r5, r1
 8005eac:	464b      	mov	r3, r9
 8005eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eb2:	f7fa f997 	bl	80001e4 <__adddf3>
 8005eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005eba:	f7fa fb49 	bl	8000550 <__aeabi_dmul>
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	f7fa f98f 	bl	80001e4 <__adddf3>
 8005ec6:	4642      	mov	r2, r8
 8005ec8:	4606      	mov	r6, r0
 8005eca:	460f      	mov	r7, r1
 8005ecc:	464b      	mov	r3, r9
 8005ece:	4640      	mov	r0, r8
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	f7fa fb3d 	bl	8000550 <__aeabi_dmul>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4b68      	ldr	r3, [pc, #416]	; (800607c <__ieee754_pow+0x734>)
 8005eda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ede:	f7fa f981 	bl	80001e4 <__adddf3>
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	f7fa f97d 	bl	80001e4 <__adddf3>
 8005eea:	9802      	ldr	r0, [sp, #8]
 8005eec:	460d      	mov	r5, r1
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	f7fa fb2a 	bl	8000550 <__aeabi_dmul>
 8005efc:	2200      	movs	r2, #0
 8005efe:	4680      	mov	r8, r0
 8005f00:	4689      	mov	r9, r1
 8005f02:	4b5e      	ldr	r3, [pc, #376]	; (800607c <__ieee754_pow+0x734>)
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7fa f96a 	bl	80001e0 <__aeabi_dsub>
 8005f0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f10:	f7fa f966 	bl	80001e0 <__aeabi_dsub>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4630      	mov	r0, r6
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	f7fa f960 	bl	80001e0 <__aeabi_dsub>
 8005f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f24:	f7fa fb14 	bl	8000550 <__aeabi_dmul>
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	462b      	mov	r3, r5
 8005f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f34:	f7fa fb0c 	bl	8000550 <__aeabi_dmul>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	4639      	mov	r1, r7
 8005f40:	f7fa f950 	bl	80001e4 <__adddf3>
 8005f44:	4606      	mov	r6, r0
 8005f46:	460f      	mov	r7, r1
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	4649      	mov	r1, r9
 8005f50:	f7fa f948 	bl	80001e4 <__adddf3>
 8005f54:	9802      	ldr	r0, [sp, #8]
 8005f56:	a33c      	add	r3, pc, #240	; (adr r3, 8006048 <__ieee754_pow+0x700>)
 8005f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	460d      	mov	r5, r1
 8005f60:	f7fa faf6 	bl	8000550 <__aeabi_dmul>
 8005f64:	4642      	mov	r2, r8
 8005f66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	f7fa f936 	bl	80001e0 <__aeabi_dsub>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7fa f930 	bl	80001e0 <__aeabi_dsub>
 8005f80:	a333      	add	r3, pc, #204	; (adr r3, 8006050 <__ieee754_pow+0x708>)
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f7fa fae3 	bl	8000550 <__aeabi_dmul>
 8005f8a:	a333      	add	r3, pc, #204	; (adr r3, 8006058 <__ieee754_pow+0x710>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	4606      	mov	r6, r0
 8005f92:	460f      	mov	r7, r1
 8005f94:	4620      	mov	r0, r4
 8005f96:	4629      	mov	r1, r5
 8005f98:	f7fa fada 	bl	8000550 <__aeabi_dmul>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa f91e 	bl	80001e4 <__adddf3>
 8005fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005faa:	4b35      	ldr	r3, [pc, #212]	; (8006080 <__ieee754_pow+0x738>)
 8005fac:	4413      	add	r3, r2
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa f917 	bl	80001e4 <__adddf3>
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fba:	460d      	mov	r5, r1
 8005fbc:	f7fa fa5e 	bl	800047c <__aeabi_i2d>
 8005fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fc2:	4b30      	ldr	r3, [pc, #192]	; (8006084 <__ieee754_pow+0x73c>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fca:	4606      	mov	r6, r0
 8005fcc:	460f      	mov	r7, r1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fd6:	f7fa f905 	bl	80001e4 <__adddf3>
 8005fda:	4642      	mov	r2, r8
 8005fdc:	464b      	mov	r3, r9
 8005fde:	f7fa f901 	bl	80001e4 <__adddf3>
 8005fe2:	4632      	mov	r2, r6
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	f7fa f8fd 	bl	80001e4 <__adddf3>
 8005fea:	9802      	ldr	r0, [sp, #8]
 8005fec:	4632      	mov	r2, r6
 8005fee:	463b      	mov	r3, r7
 8005ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ff4:	f7fa f8f4 	bl	80001e0 <__aeabi_dsub>
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	f7fa f8f0 	bl	80001e0 <__aeabi_dsub>
 8006000:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006004:	e607      	b.n	8005c16 <__ieee754_pow+0x2ce>
 8006006:	f04f 0a01 	mov.w	sl, #1
 800600a:	e6a5      	b.n	8005d58 <__ieee754_pow+0x410>
 800600c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006060 <__ieee754_pow+0x718>
 8006010:	e613      	b.n	8005c3a <__ieee754_pow+0x2f2>
 8006012:	bf00      	nop
 8006014:	f3af 8000 	nop.w
 8006018:	4a454eef 	.word	0x4a454eef
 800601c:	3fca7e28 	.word	0x3fca7e28
 8006020:	93c9db65 	.word	0x93c9db65
 8006024:	3fcd864a 	.word	0x3fcd864a
 8006028:	a91d4101 	.word	0xa91d4101
 800602c:	3fd17460 	.word	0x3fd17460
 8006030:	518f264d 	.word	0x518f264d
 8006034:	3fd55555 	.word	0x3fd55555
 8006038:	db6fabff 	.word	0xdb6fabff
 800603c:	3fdb6db6 	.word	0x3fdb6db6
 8006040:	33333303 	.word	0x33333303
 8006044:	3fe33333 	.word	0x3fe33333
 8006048:	e0000000 	.word	0xe0000000
 800604c:	3feec709 	.word	0x3feec709
 8006050:	dc3a03fd 	.word	0xdc3a03fd
 8006054:	3feec709 	.word	0x3feec709
 8006058:	145b01f5 	.word	0x145b01f5
 800605c:	be3e2fe0 	.word	0xbe3e2fe0
 8006060:	00000000 	.word	0x00000000
 8006064:	3ff00000 	.word	0x3ff00000
 8006068:	43400000 	.word	0x43400000
 800606c:	0003988e 	.word	0x0003988e
 8006070:	000bb679 	.word	0x000bb679
 8006074:	08006778 	.word	0x08006778
 8006078:	3ff00000 	.word	0x3ff00000
 800607c:	40080000 	.word	0x40080000
 8006080:	08006798 	.word	0x08006798
 8006084:	08006788 	.word	0x08006788
 8006088:	a3b4      	add	r3, pc, #720	; (adr r3, 800635c <__ieee754_pow+0xa14>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa f8a7 	bl	80001e4 <__adddf3>
 8006096:	4622      	mov	r2, r4
 8006098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800609c:	462b      	mov	r3, r5
 800609e:	4630      	mov	r0, r6
 80060a0:	4639      	mov	r1, r7
 80060a2:	f7fa f89d 	bl	80001e0 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060ae:	f7fa fcdf 	bl	8000a70 <__aeabi_dcmpgt>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	f47f adfe 	bne.w	8005cb4 <__ieee754_pow+0x36c>
 80060b8:	4aa3      	ldr	r2, [pc, #652]	; (8006348 <__ieee754_pow+0xa00>)
 80060ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060be:	4293      	cmp	r3, r2
 80060c0:	f340 810a 	ble.w	80062d8 <__ieee754_pow+0x990>
 80060c4:	151b      	asrs	r3, r3, #20
 80060c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80060ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80060ce:	fa4a f303 	asr.w	r3, sl, r3
 80060d2:	445b      	add	r3, fp
 80060d4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80060d8:	4e9c      	ldr	r6, [pc, #624]	; (800634c <__ieee754_pow+0xa04>)
 80060da:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80060de:	4116      	asrs	r6, r2
 80060e0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80060e4:	2000      	movs	r0, #0
 80060e6:	ea23 0106 	bic.w	r1, r3, r6
 80060ea:	f1c2 0214 	rsb	r2, r2, #20
 80060ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80060f2:	fa4a fa02 	asr.w	sl, sl, r2
 80060f6:	f1bb 0f00 	cmp.w	fp, #0
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	bfb8      	it	lt
 8006104:	f1ca 0a00 	rsblt	sl, sl, #0
 8006108:	f7fa f86a 	bl	80001e0 <__aeabi_dsub>
 800610c:	e9cd 0100 	strd	r0, r1, [sp]
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006118:	f7fa f864 	bl	80001e4 <__adddf3>
 800611c:	2000      	movs	r0, #0
 800611e:	a378      	add	r3, pc, #480	; (adr r3, 8006300 <__ieee754_pow+0x9b8>)
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	4604      	mov	r4, r0
 8006126:	460d      	mov	r5, r1
 8006128:	f7fa fa12 	bl	8000550 <__aeabi_dmul>
 800612c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006130:	4606      	mov	r6, r0
 8006132:	460f      	mov	r7, r1
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa f852 	bl	80001e0 <__aeabi_dsub>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa f84c 	bl	80001e0 <__aeabi_dsub>
 8006148:	a36f      	add	r3, pc, #444	; (adr r3, 8006308 <__ieee754_pow+0x9c0>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f7fa f9ff 	bl	8000550 <__aeabi_dmul>
 8006152:	a36f      	add	r3, pc, #444	; (adr r3, 8006310 <__ieee754_pow+0x9c8>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	4680      	mov	r8, r0
 800615a:	4689      	mov	r9, r1
 800615c:	4620      	mov	r0, r4
 800615e:	4629      	mov	r1, r5
 8006160:	f7fa f9f6 	bl	8000550 <__aeabi_dmul>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4640      	mov	r0, r8
 800616a:	4649      	mov	r1, r9
 800616c:	f7fa f83a 	bl	80001e4 <__adddf3>
 8006170:	4604      	mov	r4, r0
 8006172:	460d      	mov	r5, r1
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4630      	mov	r0, r6
 800617a:	4639      	mov	r1, r7
 800617c:	f7fa f832 	bl	80001e4 <__adddf3>
 8006180:	4632      	mov	r2, r6
 8006182:	463b      	mov	r3, r7
 8006184:	4680      	mov	r8, r0
 8006186:	4689      	mov	r9, r1
 8006188:	f7fa f82a 	bl	80001e0 <__aeabi_dsub>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4620      	mov	r0, r4
 8006192:	4629      	mov	r1, r5
 8006194:	f7fa f824 	bl	80001e0 <__aeabi_dsub>
 8006198:	4642      	mov	r2, r8
 800619a:	4606      	mov	r6, r0
 800619c:	460f      	mov	r7, r1
 800619e:	464b      	mov	r3, r9
 80061a0:	4640      	mov	r0, r8
 80061a2:	4649      	mov	r1, r9
 80061a4:	f7fa f9d4 	bl	8000550 <__aeabi_dmul>
 80061a8:	a35b      	add	r3, pc, #364	; (adr r3, 8006318 <__ieee754_pow+0x9d0>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	4604      	mov	r4, r0
 80061b0:	460d      	mov	r5, r1
 80061b2:	f7fa f9cd 	bl	8000550 <__aeabi_dmul>
 80061b6:	a35a      	add	r3, pc, #360	; (adr r3, 8006320 <__ieee754_pow+0x9d8>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f7fa f810 	bl	80001e0 <__aeabi_dsub>
 80061c0:	4622      	mov	r2, r4
 80061c2:	462b      	mov	r3, r5
 80061c4:	f7fa f9c4 	bl	8000550 <__aeabi_dmul>
 80061c8:	a357      	add	r3, pc, #348	; (adr r3, 8006328 <__ieee754_pow+0x9e0>)
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	f7fa f809 	bl	80001e4 <__adddf3>
 80061d2:	4622      	mov	r2, r4
 80061d4:	462b      	mov	r3, r5
 80061d6:	f7fa f9bb 	bl	8000550 <__aeabi_dmul>
 80061da:	a355      	add	r3, pc, #340	; (adr r3, 8006330 <__ieee754_pow+0x9e8>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f7f9 fffe 	bl	80001e0 <__aeabi_dsub>
 80061e4:	4622      	mov	r2, r4
 80061e6:	462b      	mov	r3, r5
 80061e8:	f7fa f9b2 	bl	8000550 <__aeabi_dmul>
 80061ec:	a352      	add	r3, pc, #328	; (adr r3, 8006338 <__ieee754_pow+0x9f0>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f7f9 fff7 	bl	80001e4 <__adddf3>
 80061f6:	4622      	mov	r2, r4
 80061f8:	462b      	mov	r3, r5
 80061fa:	f7fa f9a9 	bl	8000550 <__aeabi_dmul>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4640      	mov	r0, r8
 8006204:	4649      	mov	r1, r9
 8006206:	f7f9 ffeb 	bl	80001e0 <__aeabi_dsub>
 800620a:	4604      	mov	r4, r0
 800620c:	460d      	mov	r5, r1
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4640      	mov	r0, r8
 8006214:	4649      	mov	r1, r9
 8006216:	f7fa f99b 	bl	8000550 <__aeabi_dmul>
 800621a:	2200      	movs	r2, #0
 800621c:	e9cd 0100 	strd	r0, r1, [sp]
 8006220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	f7f9 ffda 	bl	80001e0 <__aeabi_dsub>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006234:	f7fa fab6 	bl	80007a4 <__aeabi_ddiv>
 8006238:	4632      	mov	r2, r6
 800623a:	4604      	mov	r4, r0
 800623c:	460d      	mov	r5, r1
 800623e:	463b      	mov	r3, r7
 8006240:	4640      	mov	r0, r8
 8006242:	4649      	mov	r1, r9
 8006244:	f7fa f984 	bl	8000550 <__aeabi_dmul>
 8006248:	4632      	mov	r2, r6
 800624a:	463b      	mov	r3, r7
 800624c:	f7f9 ffca 	bl	80001e4 <__adddf3>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4620      	mov	r0, r4
 8006256:	4629      	mov	r1, r5
 8006258:	f7f9 ffc2 	bl	80001e0 <__aeabi_dsub>
 800625c:	4642      	mov	r2, r8
 800625e:	464b      	mov	r3, r9
 8006260:	f7f9 ffbe 	bl	80001e0 <__aeabi_dsub>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	2000      	movs	r0, #0
 800626a:	4939      	ldr	r1, [pc, #228]	; (8006350 <__ieee754_pow+0xa08>)
 800626c:	f7f9 ffb8 	bl	80001e0 <__aeabi_dsub>
 8006270:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006274:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	da2f      	bge.n	80062de <__ieee754_pow+0x996>
 800627e:	4650      	mov	r0, sl
 8006280:	ec43 2b10 	vmov	d0, r2, r3
 8006284:	f000 f9c0 	bl	8006608 <scalbn>
 8006288:	ec51 0b10 	vmov	r0, r1, d0
 800628c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006290:	f7ff bbf1 	b.w	8005a76 <__ieee754_pow+0x12e>
 8006294:	4b2f      	ldr	r3, [pc, #188]	; (8006354 <__ieee754_pow+0xa0c>)
 8006296:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800629a:	429e      	cmp	r6, r3
 800629c:	f77f af0c 	ble.w	80060b8 <__ieee754_pow+0x770>
 80062a0:	4b2d      	ldr	r3, [pc, #180]	; (8006358 <__ieee754_pow+0xa10>)
 80062a2:	440b      	add	r3, r1
 80062a4:	4303      	orrs	r3, r0
 80062a6:	d00b      	beq.n	80062c0 <__ieee754_pow+0x978>
 80062a8:	a325      	add	r3, pc, #148	; (adr r3, 8006340 <__ieee754_pow+0x9f8>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b2:	f7fa f94d 	bl	8000550 <__aeabi_dmul>
 80062b6:	a322      	add	r3, pc, #136	; (adr r3, 8006340 <__ieee754_pow+0x9f8>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f7ff bbdb 	b.w	8005a76 <__ieee754_pow+0x12e>
 80062c0:	4622      	mov	r2, r4
 80062c2:	462b      	mov	r3, r5
 80062c4:	f7f9 ff8c 	bl	80001e0 <__aeabi_dsub>
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	f7fa fbc6 	bl	8000a5c <__aeabi_dcmpge>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	f43f aef1 	beq.w	80060b8 <__ieee754_pow+0x770>
 80062d6:	e7e7      	b.n	80062a8 <__ieee754_pow+0x960>
 80062d8:	f04f 0a00 	mov.w	sl, #0
 80062dc:	e718      	b.n	8006110 <__ieee754_pow+0x7c8>
 80062de:	4621      	mov	r1, r4
 80062e0:	e7d4      	b.n	800628c <__ieee754_pow+0x944>
 80062e2:	2000      	movs	r0, #0
 80062e4:	491a      	ldr	r1, [pc, #104]	; (8006350 <__ieee754_pow+0xa08>)
 80062e6:	f7ff bb8f 	b.w	8005a08 <__ieee754_pow+0xc0>
 80062ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ee:	f7ff bb8b 	b.w	8005a08 <__ieee754_pow+0xc0>
 80062f2:	4630      	mov	r0, r6
 80062f4:	4639      	mov	r1, r7
 80062f6:	f7ff bb87 	b.w	8005a08 <__ieee754_pow+0xc0>
 80062fa:	4693      	mov	fp, r2
 80062fc:	f7ff bb98 	b.w	8005a30 <__ieee754_pow+0xe8>
 8006300:	00000000 	.word	0x00000000
 8006304:	3fe62e43 	.word	0x3fe62e43
 8006308:	fefa39ef 	.word	0xfefa39ef
 800630c:	3fe62e42 	.word	0x3fe62e42
 8006310:	0ca86c39 	.word	0x0ca86c39
 8006314:	be205c61 	.word	0xbe205c61
 8006318:	72bea4d0 	.word	0x72bea4d0
 800631c:	3e663769 	.word	0x3e663769
 8006320:	c5d26bf1 	.word	0xc5d26bf1
 8006324:	3ebbbd41 	.word	0x3ebbbd41
 8006328:	af25de2c 	.word	0xaf25de2c
 800632c:	3f11566a 	.word	0x3f11566a
 8006330:	16bebd93 	.word	0x16bebd93
 8006334:	3f66c16c 	.word	0x3f66c16c
 8006338:	5555553e 	.word	0x5555553e
 800633c:	3fc55555 	.word	0x3fc55555
 8006340:	c2f8f359 	.word	0xc2f8f359
 8006344:	01a56e1f 	.word	0x01a56e1f
 8006348:	3fe00000 	.word	0x3fe00000
 800634c:	000fffff 	.word	0x000fffff
 8006350:	3ff00000 	.word	0x3ff00000
 8006354:	4090cbff 	.word	0x4090cbff
 8006358:	3f6f3400 	.word	0x3f6f3400
 800635c:	652b82fe 	.word	0x652b82fe
 8006360:	3c971547 	.word	0x3c971547

08006364 <__ieee754_sqrt>:
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	4955      	ldr	r1, [pc, #340]	; (80064c0 <__ieee754_sqrt+0x15c>)
 800636a:	ec55 4b10 	vmov	r4, r5, d0
 800636e:	43a9      	bics	r1, r5
 8006370:	462b      	mov	r3, r5
 8006372:	462a      	mov	r2, r5
 8006374:	d112      	bne.n	800639c <__ieee754_sqrt+0x38>
 8006376:	ee10 2a10 	vmov	r2, s0
 800637a:	ee10 0a10 	vmov	r0, s0
 800637e:	4629      	mov	r1, r5
 8006380:	f7fa f8e6 	bl	8000550 <__aeabi_dmul>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4620      	mov	r0, r4
 800638a:	4629      	mov	r1, r5
 800638c:	f7f9 ff2a 	bl	80001e4 <__adddf3>
 8006390:	4604      	mov	r4, r0
 8006392:	460d      	mov	r5, r1
 8006394:	ec45 4b10 	vmov	d0, r4, r5
 8006398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800639c:	2d00      	cmp	r5, #0
 800639e:	ee10 0a10 	vmov	r0, s0
 80063a2:	4621      	mov	r1, r4
 80063a4:	dc0f      	bgt.n	80063c6 <__ieee754_sqrt+0x62>
 80063a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80063aa:	4330      	orrs	r0, r6
 80063ac:	d0f2      	beq.n	8006394 <__ieee754_sqrt+0x30>
 80063ae:	b155      	cbz	r5, 80063c6 <__ieee754_sqrt+0x62>
 80063b0:	ee10 2a10 	vmov	r2, s0
 80063b4:	4620      	mov	r0, r4
 80063b6:	4629      	mov	r1, r5
 80063b8:	f7f9 ff12 	bl	80001e0 <__aeabi_dsub>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	f7fa f9f0 	bl	80007a4 <__aeabi_ddiv>
 80063c4:	e7e4      	b.n	8006390 <__ieee754_sqrt+0x2c>
 80063c6:	151b      	asrs	r3, r3, #20
 80063c8:	d073      	beq.n	80064b2 <__ieee754_sqrt+0x14e>
 80063ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063ce:	07dd      	lsls	r5, r3, #31
 80063d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80063d4:	bf48      	it	mi
 80063d6:	0fc8      	lsrmi	r0, r1, #31
 80063d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80063dc:	bf44      	itt	mi
 80063de:	0049      	lslmi	r1, r1, #1
 80063e0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80063e4:	2500      	movs	r5, #0
 80063e6:	1058      	asrs	r0, r3, #1
 80063e8:	0fcb      	lsrs	r3, r1, #31
 80063ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80063ee:	0049      	lsls	r1, r1, #1
 80063f0:	2316      	movs	r3, #22
 80063f2:	462c      	mov	r4, r5
 80063f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80063f8:	19a7      	adds	r7, r4, r6
 80063fa:	4297      	cmp	r7, r2
 80063fc:	bfde      	ittt	le
 80063fe:	19bc      	addle	r4, r7, r6
 8006400:	1bd2      	suble	r2, r2, r7
 8006402:	19ad      	addle	r5, r5, r6
 8006404:	0fcf      	lsrs	r7, r1, #31
 8006406:	3b01      	subs	r3, #1
 8006408:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800640c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006410:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006414:	d1f0      	bne.n	80063f8 <__ieee754_sqrt+0x94>
 8006416:	f04f 0c20 	mov.w	ip, #32
 800641a:	469e      	mov	lr, r3
 800641c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006420:	42a2      	cmp	r2, r4
 8006422:	eb06 070e 	add.w	r7, r6, lr
 8006426:	dc02      	bgt.n	800642e <__ieee754_sqrt+0xca>
 8006428:	d112      	bne.n	8006450 <__ieee754_sqrt+0xec>
 800642a:	428f      	cmp	r7, r1
 800642c:	d810      	bhi.n	8006450 <__ieee754_sqrt+0xec>
 800642e:	2f00      	cmp	r7, #0
 8006430:	eb07 0e06 	add.w	lr, r7, r6
 8006434:	da42      	bge.n	80064bc <__ieee754_sqrt+0x158>
 8006436:	f1be 0f00 	cmp.w	lr, #0
 800643a:	db3f      	blt.n	80064bc <__ieee754_sqrt+0x158>
 800643c:	f104 0801 	add.w	r8, r4, #1
 8006440:	1b12      	subs	r2, r2, r4
 8006442:	428f      	cmp	r7, r1
 8006444:	bf88      	it	hi
 8006446:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800644a:	1bc9      	subs	r1, r1, r7
 800644c:	4433      	add	r3, r6
 800644e:	4644      	mov	r4, r8
 8006450:	0052      	lsls	r2, r2, #1
 8006452:	f1bc 0c01 	subs.w	ip, ip, #1
 8006456:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800645a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800645e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006462:	d1dd      	bne.n	8006420 <__ieee754_sqrt+0xbc>
 8006464:	430a      	orrs	r2, r1
 8006466:	d006      	beq.n	8006476 <__ieee754_sqrt+0x112>
 8006468:	1c5c      	adds	r4, r3, #1
 800646a:	bf13      	iteet	ne
 800646c:	3301      	addne	r3, #1
 800646e:	3501      	addeq	r5, #1
 8006470:	4663      	moveq	r3, ip
 8006472:	f023 0301 	bicne.w	r3, r3, #1
 8006476:	106a      	asrs	r2, r5, #1
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	07e9      	lsls	r1, r5, #31
 800647c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006480:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006484:	bf48      	it	mi
 8006486:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800648a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800648e:	461c      	mov	r4, r3
 8006490:	e780      	b.n	8006394 <__ieee754_sqrt+0x30>
 8006492:	0aca      	lsrs	r2, r1, #11
 8006494:	3815      	subs	r0, #21
 8006496:	0549      	lsls	r1, r1, #21
 8006498:	2a00      	cmp	r2, #0
 800649a:	d0fa      	beq.n	8006492 <__ieee754_sqrt+0x12e>
 800649c:	02d6      	lsls	r6, r2, #11
 800649e:	d50a      	bpl.n	80064b6 <__ieee754_sqrt+0x152>
 80064a0:	f1c3 0420 	rsb	r4, r3, #32
 80064a4:	fa21 f404 	lsr.w	r4, r1, r4
 80064a8:	1e5d      	subs	r5, r3, #1
 80064aa:	4099      	lsls	r1, r3
 80064ac:	4322      	orrs	r2, r4
 80064ae:	1b43      	subs	r3, r0, r5
 80064b0:	e78b      	b.n	80063ca <__ieee754_sqrt+0x66>
 80064b2:	4618      	mov	r0, r3
 80064b4:	e7f0      	b.n	8006498 <__ieee754_sqrt+0x134>
 80064b6:	0052      	lsls	r2, r2, #1
 80064b8:	3301      	adds	r3, #1
 80064ba:	e7ef      	b.n	800649c <__ieee754_sqrt+0x138>
 80064bc:	46a0      	mov	r8, r4
 80064be:	e7bf      	b.n	8006440 <__ieee754_sqrt+0xdc>
 80064c0:	7ff00000 	.word	0x7ff00000

080064c4 <fabs>:
 80064c4:	ec51 0b10 	vmov	r0, r1, d0
 80064c8:	ee10 2a10 	vmov	r2, s0
 80064cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064d0:	ec43 2b10 	vmov	d0, r2, r3
 80064d4:	4770      	bx	lr

080064d6 <finite>:
 80064d6:	ee10 3a90 	vmov	r3, s1
 80064da:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80064de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80064e2:	0fc0      	lsrs	r0, r0, #31
 80064e4:	4770      	bx	lr

080064e6 <matherr>:
 80064e6:	2000      	movs	r0, #0
 80064e8:	4770      	bx	lr
 80064ea:	0000      	movs	r0, r0
 80064ec:	0000      	movs	r0, r0
	...

080064f0 <nan>:
 80064f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80064f8 <nan+0x8>
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	00000000 	.word	0x00000000
 80064fc:	7ff80000 	.word	0x7ff80000

08006500 <rint>:
 8006500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006502:	ec51 0b10 	vmov	r0, r1, d0
 8006506:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800650a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800650e:	2e13      	cmp	r6, #19
 8006510:	460b      	mov	r3, r1
 8006512:	ee10 4a10 	vmov	r4, s0
 8006516:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800651a:	dc56      	bgt.n	80065ca <rint+0xca>
 800651c:	2e00      	cmp	r6, #0
 800651e:	da2b      	bge.n	8006578 <rint+0x78>
 8006520:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006524:	4302      	orrs	r2, r0
 8006526:	d023      	beq.n	8006570 <rint+0x70>
 8006528:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800652c:	4302      	orrs	r2, r0
 800652e:	4254      	negs	r4, r2
 8006530:	4314      	orrs	r4, r2
 8006532:	0c4b      	lsrs	r3, r1, #17
 8006534:	0b24      	lsrs	r4, r4, #12
 8006536:	045b      	lsls	r3, r3, #17
 8006538:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800653c:	ea44 0103 	orr.w	r1, r4, r3
 8006540:	460b      	mov	r3, r1
 8006542:	492f      	ldr	r1, [pc, #188]	; (8006600 <rint+0x100>)
 8006544:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006548:	e9d1 6700 	ldrd	r6, r7, [r1]
 800654c:	4602      	mov	r2, r0
 800654e:	4639      	mov	r1, r7
 8006550:	4630      	mov	r0, r6
 8006552:	f7f9 fe47 	bl	80001e4 <__adddf3>
 8006556:	e9cd 0100 	strd	r0, r1, [sp]
 800655a:	463b      	mov	r3, r7
 800655c:	4632      	mov	r2, r6
 800655e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006562:	f7f9 fe3d 	bl	80001e0 <__aeabi_dsub>
 8006566:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800656a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800656e:	4639      	mov	r1, r7
 8006570:	ec41 0b10 	vmov	d0, r0, r1
 8006574:	b003      	add	sp, #12
 8006576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006578:	4a22      	ldr	r2, [pc, #136]	; (8006604 <rint+0x104>)
 800657a:	4132      	asrs	r2, r6
 800657c:	ea01 0702 	and.w	r7, r1, r2
 8006580:	4307      	orrs	r7, r0
 8006582:	d0f5      	beq.n	8006570 <rint+0x70>
 8006584:	0852      	lsrs	r2, r2, #1
 8006586:	4011      	ands	r1, r2
 8006588:	430c      	orrs	r4, r1
 800658a:	d00b      	beq.n	80065a4 <rint+0xa4>
 800658c:	ea23 0202 	bic.w	r2, r3, r2
 8006590:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006594:	2e13      	cmp	r6, #19
 8006596:	fa43 f306 	asr.w	r3, r3, r6
 800659a:	bf0c      	ite	eq
 800659c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80065a0:	2400      	movne	r4, #0
 80065a2:	4313      	orrs	r3, r2
 80065a4:	4916      	ldr	r1, [pc, #88]	; (8006600 <rint+0x100>)
 80065a6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80065aa:	4622      	mov	r2, r4
 80065ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80065b0:	4620      	mov	r0, r4
 80065b2:	4629      	mov	r1, r5
 80065b4:	f7f9 fe16 	bl	80001e4 <__adddf3>
 80065b8:	e9cd 0100 	strd	r0, r1, [sp]
 80065bc:	4622      	mov	r2, r4
 80065be:	462b      	mov	r3, r5
 80065c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065c4:	f7f9 fe0c 	bl	80001e0 <__aeabi_dsub>
 80065c8:	e7d2      	b.n	8006570 <rint+0x70>
 80065ca:	2e33      	cmp	r6, #51	; 0x33
 80065cc:	dd07      	ble.n	80065de <rint+0xde>
 80065ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80065d2:	d1cd      	bne.n	8006570 <rint+0x70>
 80065d4:	ee10 2a10 	vmov	r2, s0
 80065d8:	f7f9 fe04 	bl	80001e4 <__adddf3>
 80065dc:	e7c8      	b.n	8006570 <rint+0x70>
 80065de:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80065e2:	f04f 32ff 	mov.w	r2, #4294967295
 80065e6:	40f2      	lsrs	r2, r6
 80065e8:	4210      	tst	r0, r2
 80065ea:	d0c1      	beq.n	8006570 <rint+0x70>
 80065ec:	0852      	lsrs	r2, r2, #1
 80065ee:	4210      	tst	r0, r2
 80065f0:	bf1f      	itttt	ne
 80065f2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80065f6:	ea20 0202 	bicne.w	r2, r0, r2
 80065fa:	4134      	asrne	r4, r6
 80065fc:	4314      	orrne	r4, r2
 80065fe:	e7d1      	b.n	80065a4 <rint+0xa4>
 8006600:	080067a8 	.word	0x080067a8
 8006604:	000fffff 	.word	0x000fffff

08006608 <scalbn>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	ec55 4b10 	vmov	r4, r5, d0
 800660e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006612:	4606      	mov	r6, r0
 8006614:	462b      	mov	r3, r5
 8006616:	b9aa      	cbnz	r2, 8006644 <scalbn+0x3c>
 8006618:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800661c:	4323      	orrs	r3, r4
 800661e:	d03b      	beq.n	8006698 <scalbn+0x90>
 8006620:	4b31      	ldr	r3, [pc, #196]	; (80066e8 <scalbn+0xe0>)
 8006622:	4629      	mov	r1, r5
 8006624:	2200      	movs	r2, #0
 8006626:	ee10 0a10 	vmov	r0, s0
 800662a:	f7f9 ff91 	bl	8000550 <__aeabi_dmul>
 800662e:	4b2f      	ldr	r3, [pc, #188]	; (80066ec <scalbn+0xe4>)
 8006630:	429e      	cmp	r6, r3
 8006632:	4604      	mov	r4, r0
 8006634:	460d      	mov	r5, r1
 8006636:	da12      	bge.n	800665e <scalbn+0x56>
 8006638:	a327      	add	r3, pc, #156	; (adr r3, 80066d8 <scalbn+0xd0>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f7f9 ff87 	bl	8000550 <__aeabi_dmul>
 8006642:	e009      	b.n	8006658 <scalbn+0x50>
 8006644:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006648:	428a      	cmp	r2, r1
 800664a:	d10c      	bne.n	8006666 <scalbn+0x5e>
 800664c:	ee10 2a10 	vmov	r2, s0
 8006650:	4620      	mov	r0, r4
 8006652:	4629      	mov	r1, r5
 8006654:	f7f9 fdc6 	bl	80001e4 <__adddf3>
 8006658:	4604      	mov	r4, r0
 800665a:	460d      	mov	r5, r1
 800665c:	e01c      	b.n	8006698 <scalbn+0x90>
 800665e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006662:	460b      	mov	r3, r1
 8006664:	3a36      	subs	r2, #54	; 0x36
 8006666:	4432      	add	r2, r6
 8006668:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800666c:	428a      	cmp	r2, r1
 800666e:	dd0b      	ble.n	8006688 <scalbn+0x80>
 8006670:	ec45 4b11 	vmov	d1, r4, r5
 8006674:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80066e0 <scalbn+0xd8>
 8006678:	f000 f83c 	bl	80066f4 <copysign>
 800667c:	a318      	add	r3, pc, #96	; (adr r3, 80066e0 <scalbn+0xd8>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	ec51 0b10 	vmov	r0, r1, d0
 8006686:	e7da      	b.n	800663e <scalbn+0x36>
 8006688:	2a00      	cmp	r2, #0
 800668a:	dd08      	ble.n	800669e <scalbn+0x96>
 800668c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006690:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006694:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006698:	ec45 4b10 	vmov	d0, r4, r5
 800669c:	bd70      	pop	{r4, r5, r6, pc}
 800669e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066a2:	da0d      	bge.n	80066c0 <scalbn+0xb8>
 80066a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80066a8:	429e      	cmp	r6, r3
 80066aa:	ec45 4b11 	vmov	d1, r4, r5
 80066ae:	dce1      	bgt.n	8006674 <scalbn+0x6c>
 80066b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80066d8 <scalbn+0xd0>
 80066b4:	f000 f81e 	bl	80066f4 <copysign>
 80066b8:	a307      	add	r3, pc, #28	; (adr r3, 80066d8 <scalbn+0xd0>)
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	e7e0      	b.n	8006682 <scalbn+0x7a>
 80066c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066c4:	3236      	adds	r2, #54	; 0x36
 80066c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066ce:	4620      	mov	r0, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	2200      	movs	r2, #0
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <scalbn+0xe8>)
 80066d6:	e7b2      	b.n	800663e <scalbn+0x36>
 80066d8:	c2f8f359 	.word	0xc2f8f359
 80066dc:	01a56e1f 	.word	0x01a56e1f
 80066e0:	8800759c 	.word	0x8800759c
 80066e4:	7e37e43c 	.word	0x7e37e43c
 80066e8:	43500000 	.word	0x43500000
 80066ec:	ffff3cb0 	.word	0xffff3cb0
 80066f0:	3c900000 	.word	0x3c900000

080066f4 <copysign>:
 80066f4:	ec51 0b10 	vmov	r0, r1, d0
 80066f8:	ee11 0a90 	vmov	r0, s3
 80066fc:	ee10 2a10 	vmov	r2, s0
 8006700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006704:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006708:	ea41 0300 	orr.w	r3, r1, r0
 800670c:	ec43 2b10 	vmov	d0, r2, r3
 8006710:	4770      	bx	lr
	...

08006714 <_init>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr

08006720 <_fini>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	bf00      	nop
 8006724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006726:	bc08      	pop	{r3}
 8006728:	469e      	mov	lr, r3
 800672a:	4770      	bx	lr
