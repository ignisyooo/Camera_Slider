
Slider_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fcc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004198  08004198  00020140  2**0
                  CONTENTS
  4 .ARM          00000000  08004198  08004198  00020140  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004198  08004198  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  080041a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000140  080042e0  00020140  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080042e0  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cf5  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000290a  00000000  00000000  00030e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  00034540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ec00  00000000  00000000  000351a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d393  00000000  00000000  00053da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0a5b  00000000  00000000  0006113b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111b96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  00111c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000140 	.word	0x20000140
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004148 	.word	0x08004148

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000144 	.word	0x20000144
 80001d0:	08004148 	.word	0x08004148

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000312:	f1a4 0401 	sub.w	r4, r4, #1
 8000316:	d1e9      	bne.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_d2uiz>:
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	d211      	bcs.n	8000574 <__aeabi_d2uiz+0x28>
 8000550:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000554:	d211      	bcs.n	800057a <__aeabi_d2uiz+0x2e>
 8000556:	d50d      	bpl.n	8000574 <__aeabi_d2uiz+0x28>
 8000558:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800055c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000560:	d40e      	bmi.n	8000580 <__aeabi_d2uiz+0x34>
 8000562:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056e:	fa23 f002 	lsr.w	r0, r3, r2
 8000572:	4770      	bx	lr
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	4770      	bx	lr
 800057a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057e:	d102      	bne.n	8000586 <__aeabi_d2uiz+0x3a>
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	4770      	bx	lr
 8000586:	f04f 0000 	mov.w	r0, #0
 800058a:	4770      	bx	lr

0800058c <read_data>:
		data = data->next;
	}
	return size;
}

uint16_t read_data(Fifo_data **data) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	uint16_t retVal;
	if (*data) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <read_data+0x16>
		return -1;
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	e012      	b.n	80005c8 <read_data+0x3c>
	} else {
		Fifo_data *new = NULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
		retVal = (*data)->time;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	889b      	ldrh	r3, [r3, #4]
 80005ac:	817b      	strh	r3, [r7, #10]
		new = (*data)->next;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	60fb      	str	r3, [r7, #12]
		free(*data);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fd58 	bl	8004070 <free>
		(*data) = new;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	601a      	str	r2, [r3, #0]
		return retVal;
 80005c6:	897b      	ldrh	r3, [r7, #10]
	}
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <HAL_TIM_PeriodElapsedCallback>:

#include "Interrupt.h"
#include "Objects.h"
#include "main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d13e      	bne.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x90>
		static MotorErr retval = MOTOR_OK;
		for (int i = 0; i < MOTORS_NUM - 1; i++) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e038      	b.n	800065a <HAL_TIM_PeriodElapsedCallback+0x8a>
			if (MOTOR_OK == retval) {
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d10d      	bne.n	800060c <HAL_TIM_PeriodElapsedCallback+0x3c>
				retval = motorRun(&Motor_set[i]);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2268      	movs	r2, #104	; 0x68
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80005fa:	4413      	add	r3, r2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fb04 	bl	8000c0a <motorRun>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	e023      	b.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x84>
			} else if (MOTOR_INTERRUPT_ERROR == retval) {
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d116      	bne.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x72>
					retval = set(&Motor_set[i]);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2268      	movs	r2, #104	; 0x68
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800061e:	4413      	add	r3, r2
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fbae 	bl	8000d82 <set>
 8000626:	4603      	mov	r3, r0
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800062c:	701a      	strb	r2, [r3, #0]
					motorStartMove(&Motor_set[i]);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2268      	movs	r2, #104	; 0x68
 8000632:	fb02 f303 	mul.w	r3, r2, r3
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000638:	4413      	add	r3, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fb69 	bl	8000d12 <motorStartMove>
 8000640:	e008      	b.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x84>
			}else{
				motorStop(&Motor_set[i]);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2268      	movs	r2, #104	; 0x68
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800064c:	4413      	add	r3, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f000 faae 	bl	8000bb0 <motorStop>
		for (int i = 0; i < MOTORS_NUM - 1; i++) {
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b01      	cmp	r3, #1
 800065e:	ddc3      	ble.n	80005e8 <HAL_TIM_PeriodElapsedCallback+0x18>
			}
		}
	}

}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40001000 	.word	0x40001000
 800066c:	2000015c 	.word	0x2000015c
 8000670:	20000168 	.word	0x20000168

08000674 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LIMIT_SWITCH_Pin) {
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	2b04      	cmp	r3, #4
 8000682:	d111      	bne.n	80006a8 <HAL_GPIO_EXTI_Callback+0x34>
		for (int i = 0; i < MOTORS_NUM; i++) {
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e00b      	b.n	80006a2 <HAL_GPIO_EXTI_Callback+0x2e>
			motorStop(Motor_set + i);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	2268      	movs	r2, #104	; 0x68
 800068e:	fb02 f303 	mul.w	r3, r2, r3
 8000692:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000694:	4413      	add	r3, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fa8a 	bl	8000bb0 <motorStop>
		for (int i = 0; i < MOTORS_NUM; i++) {
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3301      	adds	r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	ddf0      	ble.n	800068a <HAL_GPIO_EXTI_Callback+0x16>
		}
	}
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000168 	.word	0x20000168

080006b4 <add_motors>:
				},
};


void add_motors(Motor_T *sett)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	sett[0]=motor1;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <add_motors+0x34>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	4611      	mov	r1, r2
 80006c4:	2368      	movs	r3, #104	; 0x68
 80006c6:	461a      	mov	r2, r3
 80006c8:	f003 fcda 	bl	8004080 <memcpy>
	sett[1]=motor2;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3368      	adds	r3, #104	; 0x68
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <add_motors+0x38>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	4611      	mov	r1, r2
 80006d6:	2368      	movs	r3, #104	; 0x68
 80006d8:	461a      	mov	r2, r3
 80006da:	f003 fcd1 	bl	8004080 <memcpy>
	//sett[2]=&motor3;
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000068 	.word	0x20000068

080006f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	4b44      	ldr	r3, [pc, #272]	; (8000818 <MX_GPIO_Init+0x128>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a43      	ldr	r2, [pc, #268]	; (8000818 <MX_GPIO_Init+0x128>)
 800070c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b41      	ldr	r3, [pc, #260]	; (8000818 <MX_GPIO_Init+0x128>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <MX_GPIO_Init+0x128>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a3d      	ldr	r2, [pc, #244]	; (8000818 <MX_GPIO_Init+0x128>)
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b3b      	ldr	r3, [pc, #236]	; (8000818 <MX_GPIO_Init+0x128>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <MX_GPIO_Init+0x128>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a37      	ldr	r2, [pc, #220]	; (8000818 <MX_GPIO_Init+0x128>)
 800073c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <MX_GPIO_Init+0x128>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <MX_GPIO_Init+0x128>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a31      	ldr	r2, [pc, #196]	; (8000818 <MX_GPIO_Init+0x128>)
 8000754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_GPIO_Init+0x128>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_MS1_Pin|MOTOR2_STEP_Pin|MOTOR2_DIR_Pin|MOTOR1_STEP_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f001 f85c 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800077a:	4828      	ldr	r0, [pc, #160]	; (800081c <MX_GPIO_Init+0x12c>)
 800077c:	f001 f856 	bl	800182c <HAL_GPIO_WritePin>
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f24c 0103 	movw	r1, #49155	; 0xc003
 8000786:	4826      	ldr	r0, [pc, #152]	; (8000820 <MX_GPIO_Init+0x130>)
 8000788:	f001 f850 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR2_MS1_Pin|MOTOR2_STEP_Pin|MOTOR2_DIR_Pin|MOTOR1_STEP_Pin;
 800078c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f000 feb6 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 80007ac:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80007b0:	617b      	str	r3, [r7, #20]
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4815      	ldr	r0, [pc, #84]	; (800081c <MX_GPIO_Init+0x12c>)
 80007c6:	f000 fea7 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin;
 80007ca:	f24c 0303 	movw	r3, #49155	; 0xc003
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	480f      	ldr	r0, [pc, #60]	; (8000820 <MX_GPIO_Init+0x130>)
 80007e4:	f000 fe98 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_Pin;
 80007e8:	2304      	movs	r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_GPIO_Init+0x134>)
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4809      	ldr	r0, [pc, #36]	; (8000820 <MX_GPIO_Init+0x130>)
 80007fc:	f000 fe8c 	bl	8001518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2008      	movs	r0, #8
 8000806:	f000 fe12 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800080a:	2008      	movs	r0, #8
 800080c:	f000 fe2b 	bl	8001466 <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	48000800 	.word	0x48000800
 8000820:	48000400 	.word	0x48000400
 8000824:	10110000 	.word	0x10110000

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fcbd 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f82f 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f7ff ff5b 	bl	80006f0 <MX_GPIO_Init>
  MX_TIM6_Init();
 800083a:	f000 fbb5 	bl	8000fa8 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800083e:	f000 fc0f 	bl	8001060 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	add_motors(Motor_set);
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <main+0x60>)
 8000844:	f7ff ff36 	bl	80006b4 <add_motors>


	for (int i = 0; i < MOTORS_NUM - 1; i++) {
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	e00e      	b.n	800086c <main+0x44>
		Motor_Init(&Motor_set[i]);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2268      	movs	r2, #104	; 0x68
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <main+0x60>)
 8000858:	4413      	add	r3, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f966 	bl	8000b2c <Motor_Init>
		set(&Motor_set[0]);
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <main+0x60>)
 8000862:	f000 fa8e 	bl	8000d82 <set>
	for (int i = 0; i < MOTORS_NUM - 1; i++) {
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b01      	cmp	r3, #1
 8000870:	dded      	ble.n	800084e <main+0x26>
	}
	motorStartMove(&Motor_set[0]);
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <main+0x60>)
 8000874:	f000 fa4d 	bl	8000d12 <motorStartMove>
	motorStartMove(&Motor_set[1]);
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <main+0x64>)
 800087a:	f000 fa4a 	bl	8000d12 <motorStartMove>
	HAL_TIM_Base_Start_IT(&htim6);
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <main+0x68>)
 8000880:	f002 fb9a 	bl	8002fb8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000884:	e7fe      	b.n	8000884 <main+0x5c>
 8000886:	bf00      	nop
 8000888:	20000168 	.word	0x20000168
 800088c:	200001d0 	.word	0x200001d0
 8000890:	200002a4 	.word	0x200002a4

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0a6      	sub	sp, #152	; 0x98
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800089e:	2228      	movs	r2, #40	; 0x28
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 fbf7 	bl	8004096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2258      	movs	r2, #88	; 0x58
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 fbe9 	bl	8004096 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ce:	2301      	movs	r3, #1
 80008d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 ffca 	bl	800188c <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008fe:	f000 f827 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2302      	movs	r3, #2
 8000908:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000918:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800091c:	2102      	movs	r1, #2
 800091e:	4618      	mov	r0, r3
 8000920:	f001 feca 	bl	80026b8 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800092a:	f000 f811 	bl	8000950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800092e:	2304      	movs	r3, #4
 8000930:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4618      	mov	r0, r3
 800093a:	f002 f8f3 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000944:	f000 f804 	bl	8000950 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3798      	adds	r7, #152	; 0x98
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <Motor_PinMode>:
 * 4 -> 1/16 steep
 *
 * While init mircosteep is set to 0 ( Full steep)
 ********************************************/

void Motor_PinMode(Motor_T *sett) {
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6998      	ldr	r0, [r3, #24]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	8b99      	ldrh	r1, [r3, #28]
			(sett->flags.isOn) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 800097a:	461a      	mov	r2, r3
 800097c:	f000 ff56 	bl	800182c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	8899      	ldrh	r1, [r3, #4]
			(sett->flags.reset) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	bf0c      	ite	eq
 8000998:	2301      	moveq	r3, #1
 800099a:	2300      	movne	r3, #0
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	f000 ff44 	bl	800182c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6898      	ldr	r0, [r3, #8]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	8999      	ldrh	r1, [r3, #12]
			(sett->flags.sleep) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	bf0c      	ite	eq
 80009bc:	2301      	moveq	r3, #1
 80009be:	2300      	movne	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	f000 ff32 	bl	800182c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6918      	ldr	r0, [r3, #16]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	8a99      	ldrh	r1, [r3, #20]
			(sett->flags.direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 80009e0:	461a      	mov	r2, r3
 80009e2:	f000 ff23 	bl	800182c <HAL_GPIO_WritePin>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <Motor_MicroPinSet>:

MotorErr Motor_MicroPinSet(Motor_T *sett) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	MotorErr retValue = MOTOR_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]
	switch (sett->device.microstep) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	f200 808b 	bhi.w	8000b1e <Motor_MicroPinSet+0x12e>
 8000a08:	a201      	add	r2, pc, #4	; (adr r2, 8000a10 <Motor_MicroPinSet+0x20>)
 8000a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0e:	bf00      	nop
 8000a10:	08000a25 	.word	0x08000a25
 8000a14:	08000a57 	.word	0x08000a57
 8000a18:	08000a89 	.word	0x08000a89
 8000a1c:	08000abb 	.word	0x08000abb
 8000a20:	08000aed 	.word	0x08000aed
	case 0:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6a18      	ldr	r0, [r3, #32]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f000 fefc 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f000 fef4 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f000 feec 	bl	800182c <HAL_GPIO_WritePin>
		break;
 8000a54:	e065      	b.n	8000b22 <Motor_MicroPinSet+0x132>
	case 1:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a18      	ldr	r0, [r3, #32]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4619      	mov	r1, r3
 8000a62:	f000 fee3 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	f000 fedb 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	f000 fed3 	bl	800182c <HAL_GPIO_WritePin>
		break;
 8000a86:	e04c      	b.n	8000b22 <Motor_MicroPinSet+0x132>
	case 2:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a18      	ldr	r0, [r3, #32]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a90:	2200      	movs	r2, #0
 8000a92:	4619      	mov	r1, r3
 8000a94:	f000 feca 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f000 fec2 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f000 feba 	bl	800182c <HAL_GPIO_WritePin>
		break;
 8000ab8:	e033      	b.n	8000b22 <Motor_MicroPinSet+0x132>
	case 3:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a18      	ldr	r0, [r3, #32]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f000 feb1 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f000 fea9 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f000 fea1 	bl	800182c <HAL_GPIO_WritePin>
		break;
 8000aea:	e01a      	b.n	8000b22 <Motor_MicroPinSet+0x132>

	case 4:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a18      	ldr	r0, [r3, #32]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000af4:	2201      	movs	r2, #1
 8000af6:	4619      	mov	r1, r3
 8000af8:	f000 fe98 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	f000 fe90 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_SET);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000b14:	2201      	movs	r2, #1
 8000b16:	4619      	mov	r1, r3
 8000b18:	f000 fe88 	bl	800182c <HAL_GPIO_WritePin>
		break;
 8000b1c:	e001      	b.n	8000b22 <Motor_MicroPinSet+0x132>
	default:
		retValue = MOTOR_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73fb      	strb	r3, [r7, #15]
	}
	return retValue;
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <Motor_Init>:

void Motor_Init(Motor_T *sett) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	sett->flags.isOn = 0;
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000b3a:	f36f 0300 	bfc	r3, #0, #1
 8000b3e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.reset = 0;
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000b48:	f36f 0341 	bfc	r3, #1, #1
 8000b4c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.direction = CWC;
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000b56:	f36f 03c3 	bfc	r3, #3, #1
 8000b5a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.stepPhase = LOW;
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000b72:	f36f 1304 	bfc	r3, #4, #1
 8000b76:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	sett->counter.pulse = 0;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
	sett->counter.stepLeft = 0;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	879a      	strh	r2, [r3, #60]	; 0x3c
	sett->device.positionStart = 0;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	64da      	str	r2, [r3, #76]	; 0x4c
	sett->device.points_num = -1;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	sett->device.microstep = 0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Motor_PinMode(sett);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fede 	bl	800095e <Motor_PinMode>
	Motor_MicroPinSet(sett);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ff24 	bl	80009f0 <Motor_MicroPinSet>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <motorStop>:

MotorErr motorStop(Motor_T *sett) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]

	if (sett->flags.reset) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <motorStop+0x20>
		return MOTOR_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e018      	b.n	8000c02 <motorStop+0x52>
	}

	sett->flags.isOn = 0;
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000bd6:	f36f 0300 	bfc	r3, #0, #1
 8000bda:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.stepPhase = LOW;
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000bf2:	f36f 1304 	bfc	r3, #4, #1
 8000bf6:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	Motor_PinMode(sett);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff feaf 	bl	800095e <Motor_PinMode>

	return retval;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <motorRun>:
MotorErr motorRun(Motor_T *sett) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
	if (!sett->flags.reset && !sett->flags.sleep) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d16c      	bne.n	8000d00 <motorRun+0xf6>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d164      	bne.n	8000d00 <motorRun+0xf6>
		--(sett->counter.changeTime);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	875a      	strh	r2, [r3, #58]	; 0x3a
		if (sett->counter.changeTime <= 0) {
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d15d      	bne.n	8000d06 <motorRun+0xfc>
			sett->counter.changeTime = sett->counter.pulse;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	875a      	strh	r2, [r3, #58]	; 0x3a
			--(sett->counter.stepLeft);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000c56:	3b01      	subs	r3, #1
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	879a      	strh	r2, [r3, #60]	; 0x3c

			if (sett->counter.stepLeft <= 0) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d104      	bne.n	8000c70 <motorRun+0x66>
				//sett->flags.isOn = 0;
				motorStop(sett);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffa2 	bl	8000bb0 <motorStop>
				return MOTOR_INTERRUPT_ERROR;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e04c      	b.n	8000d0a <motorRun+0x100>
			}

			switch (sett->flags.stepPhase) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c76:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d010      	beq.n	8000ca2 <motorRun+0x98>
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d134      	bne.n	8000cee <motorRun+0xe4>
			case HIGH:
				sett->flags.stepPhase = LOW;
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000c8a:	f36f 1304 	bfc	r3, #4, #1
 8000c8e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 0;
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000c98:	f36f 0300 	bfc	r3, #0, #1
 8000c9c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				break;
 8000ca0:	e027      	b.n	8000cf2 <motorRun+0xe8>
			case LOW:
				sett->flags.stepPhase = HIGH;
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 1;
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				if (sett->flags.direction == CWC) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d107      	bne.n	8000cde <motorRun+0xd4>
					sett->data.position -= sett->device.stepSize;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	1ad2      	subs	r2, r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	651a      	str	r2, [r3, #80]	; 0x50
				} else {
					sett->data.position += sett->device.stepSize;
				}
				break;
 8000cdc:	e009      	b.n	8000cf2 <motorRun+0xe8>
					sett->data.position += sett->device.stepSize;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	441a      	add	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	651a      	str	r2, [r3, #80]	; 0x50
				break;
 8000cec:	e001      	b.n	8000cf2 <motorRun+0xe8>
			default:
				retval = MOTOR_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
			}
			if (retval == MOTOR_OK) {
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d106      	bne.n	8000d06 <motorRun+0xfc>
				Motor_PinMode(sett);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fe30 	bl	800095e <Motor_PinMode>
		if (sett->counter.changeTime <= 0) {
 8000cfe:	e002      	b.n	8000d06 <motorRun+0xfc>
			}
		}
	} else {
		retval = MOTOR_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e000      	b.n	8000d08 <motorRun+0xfe>
		if (sett->counter.changeTime <= 0) {
 8000d06:	bf00      	nop
	}

	return retval;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <motorStartMove>:
MotorErr motorStartMove(Motor_T *sett) {
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	if (sett->counter.stepLeft <= 0 || sett->counter.pulse <= 0) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <motorStartMove+0x18>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <motorStartMove+0x1c>
		return MOTOR_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e025      	b.n	8000d7a <motorStartMove+0x68>
	}

	if (sett->flags.reset) {
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <motorStartMove+0x30>
		return MOTOR_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e01b      	b.n	8000d7a <motorStartMove+0x68>
	}

	if (sett->flags.stepPhase != LOW) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <motorStartMove+0x44>
		return MOTOR_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e011      	b.n	8000d7a <motorStartMove+0x68>
	}

	sett->flags.sleep = 0;
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000d5c:	f36f 0382 	bfc	r3, #2, #1
 8000d60:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 1;
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	Motor_PinMode(sett);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fdf3 	bl	800095e <Motor_PinMode>

	return MOTOR_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <set>:
 *      Author: rzesz
 */
#include "setter.h"
#include <math.h>

MotorErr set(Motor_T *sett) {
 8000d82:	b590      	push	{r4, r7, lr}
 8000d84:	b087      	sub	sp, #28
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	MotorErr retVal = MOTOR_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	75fb      	strb	r3, [r7, #23]
	if(sett->device.points_num == -1)
		sett->device.points_num = get_amount_of_times(sett->fifo);
	uint16_t time = read_data(&(sett->fifo));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3360      	adds	r3, #96	; 0x60
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fbfa 	bl	800058c <read_data>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	82bb      	strh	r3, [r7, #20]
	if(time == 0)
 8000d9c:	8abb      	ldrh	r3, [r7, #20]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <set+0x24>
	{
		return MOTOR_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e033      	b.n	8000e0e <set+0x8c>
	}
	uint16_t length = round(SLIDER_LENGHT / sett->device.points_num);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000dac:	461a      	mov	r2, r3
 8000dae:	f242 7310 	movw	r3, #10000	; 0x2710
 8000db2:	fb93 f3f2 	sdiv	r3, r3, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb5e 	bl	8000478 <__aeabi_i2d>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	f7ff fbc2 	bl	800054c <__aeabi_d2uiz>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	827b      	strh	r3, [r7, #18]
	int stepSize = sett->device.stepSize;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd0:	60fb      	str	r3, [r7, #12]
	sett->counter.stepLeft = set_stepLeft(length, stepSize);
 8000dd2:	8a7b      	ldrh	r3, [r7, #18]
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f81d 	bl	8000e16 <set_stepLeft>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	879a      	strh	r2, [r3, #60]	; 0x3c
	sett->counter.changeTime = sett->counter.stepLeft;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	875a      	strh	r2, [r3, #58]	; 0x3a
	sett->counter.pulse = set_pulse(time, set_stepLeft(length, stepSize), length, stepSize);
 8000dec:	8a7b      	ldrh	r3, [r7, #18]
 8000dee:	68f9      	ldr	r1, [r7, #12]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f810 	bl	8000e16 <set_stepLeft>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	8a7a      	ldrh	r2, [r7, #18]
 8000dfc:	8ab8      	ldrh	r0, [r7, #20]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f000 f827 	bl	8000e52 <set_pulse>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	87da      	strh	r2, [r3, #62]	; 0x3e

	return retVal;
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	371c      	adds	r7, #28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd90      	pop	{r4, r7, pc}

08000e16 <set_stepLeft>:
uint16_t set_stepLeft(uint16_t len, int step)
{
 8000e16:	b590      	push	{r4, r7, lr}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	6039      	str	r1, [r7, #0]
 8000e20:	80fb      	strh	r3, [r7, #6]
	return round((2*len*10)/step);
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb1f 	bl	8000478 <__aeabi_i2d>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460c      	mov	r4, r1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	4621      	mov	r1, r4
 8000e42:	f7ff fb83 	bl	800054c <__aeabi_d2uiz>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29b      	uxth	r3, r3
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd90      	pop	{r4, r7, pc}

08000e52 <set_pulse>:
uint16_t set_pulse(uint16_t time, uint16_t (*fun)(uint16_t len, int step), uint16_t len, int step)
{
 8000e52:	b590      	push	{r4, r7, lr}
 8000e54:	b085      	sub	sp, #20
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	81fb      	strh	r3, [r7, #14]
 8000e60:	4613      	mov	r3, r2
 8000e62:	81bb      	strh	r3, [r7, #12]
	return round((TIM_FREQ/fun(len, step))*time);
 8000e64:	89ba      	ldrh	r2, [r7, #12]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4798      	blx	r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e7a:	89fa      	ldrh	r2, [r7, #14]
 8000e7c:	fb02 f303 	mul.w	r3, r2, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff faf9 	bl	8000478 <__aeabi_i2d>
 8000e86:	4603      	mov	r3, r0
 8000e88:	460c      	mov	r4, r1
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	f7ff fb5d 	bl	800054c <__aeabi_d2uiz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29b      	uxth	r3, r3
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd90      	pop	{r4, r7, pc}
	...

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f97c 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f48:	2004      	movs	r0, #4
 8000f4a:	f000 fc87 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <USART3_IRQHandler+0x10>)
 8000f5a:	f002 fb35 	bl	80035c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200002e4 	.word	0x200002e4

08000f68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM6_DAC_IRQHandler+0x10>)
 8000f6e:	f002 f84d 	bl	800300c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200002a4 	.word	0x200002a4

08000f7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <SystemInit+0x28>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <SystemInit+0x28>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SystemInit+0x28>)
 8000f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f96:	609a      	str	r2, [r3, #8]
#endif
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_TIM6_Init+0x64>)
 8000fba:	4a15      	ldr	r2, [pc, #84]	; (8001010 <MX_TIM6_Init+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_TIM6_Init+0x64>)
 8000fc0:	2247      	movs	r2, #71	; 0x47
 8000fc2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_TIM6_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_TIM6_Init+0x64>)
 8000fcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_TIM6_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_TIM6_Init+0x64>)
 8000fda:	f001 ffc1 	bl	8002f60 <HAL_TIM_Base_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fe4:	f7ff fcb4 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM6_Init+0x64>)
 8000ff6:	f002 f9ef 	bl	80033d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001000:	f7ff fca6 	bl	8000950 <Error_Handler>
  }

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200002a4 	.word	0x200002a4
 8001010:	40001000 	.word	0x40001000

08001014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_TIM_Base_MspInit+0x44>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d113      	bne.n	800104e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_TIM_Base_MspInit+0x48>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a0c      	ldr	r2, [pc, #48]	; (800105c <HAL_TIM_Base_MspInit+0x48>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_TIM_Base_MspInit+0x48>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2036      	movs	r0, #54	; 0x36
 8001044:	f000 f9f3 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001048:	2036      	movs	r0, #54	; 0x36
 800104a:	f000 fa0c 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40001000 	.word	0x40001000
 800105c:	40021000 	.word	0x40021000

08001060 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <MX_USART3_UART_Init+0x5c>)
 8001068:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 800106c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001070:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART3_UART_Init+0x58>)
 80010a4:	f002 fa42 	bl	800352c <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010ae:	f7ff fc4f 	bl	8000950 <Error_Handler>
  }

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200002e4 	.word	0x200002e4
 80010bc:	40004800 	.word	0x40004800

080010c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <HAL_UART_MspInit+0x8c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d130      	bne.n	8001144 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_UART_MspInit+0x90>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <HAL_UART_MspInit+0x90>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_UART_MspInit+0x90>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_UART_MspInit+0x90>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_UART_MspInit+0x90>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6153      	str	r3, [r2, #20]
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_UART_MspInit+0x90>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001112:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001124:	2307      	movs	r3, #7
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	4809      	ldr	r0, [pc, #36]	; (8001154 <HAL_UART_MspInit+0x94>)
 8001130:	f000 f9f2 	bl	8001518 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2027      	movs	r0, #39	; 0x27
 800113a:	f000 f978 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800113e:	2027      	movs	r0, #39	; 0x27
 8001140:	f000 f991 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40004800 	.word	0x40004800
 8001150:	40021000 	.word	0x40021000
 8001154:	48000400 	.word	0x48000400

08001158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800115c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800115e:	e003      	b.n	8001168 <LoopCopyDataInit>

08001160 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001162:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001164:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001166:	3104      	adds	r1, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <LoopForever+0xa>)
	ldr	r3, =_edata
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <LoopForever+0xe>)
	adds	r2, r0, r1
 800116c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800116e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001170:	d3f6      	bcc.n	8001160 <CopyDataInit>
	ldr	r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001174:	e002      	b.n	800117c <LoopFillZerobss>

08001176 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001176:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001178:	f842 3b04 	str.w	r3, [r2], #4

0800117c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <LoopForever+0x16>)
	cmp	r2, r3
 800117e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001180:	d3f9      	bcc.n	8001176 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001182:	f7ff fefb 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f002 ff4f 	bl	8004028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118a:	f7ff fb4d 	bl	8000828 <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001190:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001194:	080041a0 	.word	0x080041a0
	ldr	r0, =_sdata
 8001198:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800119c:	20000140 	.word	0x20000140
	ldr	r2, =_sbss
 80011a0:	20000140 	.word	0x20000140
	ldr	r3, = _ebss
 80011a4:	20000368 	.word	0x20000368

080011a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC1_2_IRQHandler>
	...

080011ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_Init+0x28>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_Init+0x28>)
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f92b 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff fe6a 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40022000 	.word	0x40022000

080011d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f943 	bl	8001482 <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f90b 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200000d0 	.word	0x200000d0
 8001230:	200000d8 	.word	0x200000d8
 8001234:	200000d4 	.word	0x200000d4

08001238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200000d8 	.word	0x200000d8
 800125c:	20000364 	.word	0x20000364

08001260 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;  
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000364 	.word	0x20000364

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff29 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff3e 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff8e 	bl	800136c <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5d 	bl	8001318 <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff31 	bl	80012dc <__NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffa2 	bl	80013d4 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d005      	beq.n	80014bc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2204      	movs	r2, #4
 80014b4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e027      	b.n	800150c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 020e 	bic.w	r2, r2, #14
 80014ca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	4798      	blx	r3
    } 
  }
  return status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	e160      	b.n	80017ea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8152 	beq.w	80017e4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d00b      	beq.n	8001560 <HAL_GPIO_Init+0x48>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d007      	beq.n	8001560 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001554:	2b11      	cmp	r3, #17
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b12      	cmp	r3, #18
 800155e:	d130      	bne.n	80015c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001596:	2201      	movs	r2, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 0201 	and.w	r2, r3, #1
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0xea>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b12      	cmp	r3, #18
 8001600:	d123      	bne.n	800164a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	08da      	lsrs	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3208      	adds	r2, #8
 800160a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	08da      	lsrs	r2, r3, #3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3208      	adds	r2, #8
 8001644:	6939      	ldr	r1, [r7, #16]
 8001646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0203 	and.w	r2, r3, #3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80ac 	beq.w	80017e4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_GPIO_Init+0x2f0>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a5d      	ldr	r2, [pc, #372]	; (8001808 <HAL_GPIO_Init+0x2f0>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b5b      	ldr	r3, [pc, #364]	; (8001808 <HAL_GPIO_Init+0x2f0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016a4:	4a59      	ldr	r2, [pc, #356]	; (800180c <HAL_GPIO_Init+0x2f4>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ce:	d025      	beq.n	800171c <HAL_GPIO_Init+0x204>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4f      	ldr	r2, [pc, #316]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d01f      	beq.n	8001718 <HAL_GPIO_Init+0x200>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a4e      	ldr	r2, [pc, #312]	; (8001814 <HAL_GPIO_Init+0x2fc>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d019      	beq.n	8001714 <HAL_GPIO_Init+0x1fc>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a4d      	ldr	r2, [pc, #308]	; (8001818 <HAL_GPIO_Init+0x300>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d013      	beq.n	8001710 <HAL_GPIO_Init+0x1f8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a4c      	ldr	r2, [pc, #304]	; (800181c <HAL_GPIO_Init+0x304>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d00d      	beq.n	800170c <HAL_GPIO_Init+0x1f4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a4b      	ldr	r2, [pc, #300]	; (8001820 <HAL_GPIO_Init+0x308>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d007      	beq.n	8001708 <HAL_GPIO_Init+0x1f0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a4a      	ldr	r2, [pc, #296]	; (8001824 <HAL_GPIO_Init+0x30c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d101      	bne.n	8001704 <HAL_GPIO_Init+0x1ec>
 8001700:	2306      	movs	r3, #6
 8001702:	e00c      	b.n	800171e <HAL_GPIO_Init+0x206>
 8001704:	2307      	movs	r3, #7
 8001706:	e00a      	b.n	800171e <HAL_GPIO_Init+0x206>
 8001708:	2305      	movs	r3, #5
 800170a:	e008      	b.n	800171e <HAL_GPIO_Init+0x206>
 800170c:	2304      	movs	r3, #4
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x206>
 8001710:	2303      	movs	r3, #3
 8001712:	e004      	b.n	800171e <HAL_GPIO_Init+0x206>
 8001714:	2302      	movs	r3, #2
 8001716:	e002      	b.n	800171e <HAL_GPIO_Init+0x206>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_GPIO_Init+0x206>
 800171c:	2300      	movs	r3, #0
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	f002 0203 	and.w	r2, r2, #3
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	4093      	lsls	r3, r2
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800172e:	4937      	ldr	r1, [pc, #220]	; (800180c <HAL_GPIO_Init+0x2f4>)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173c:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_GPIO_Init+0x310>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001760:	4a31      	ldr	r2, [pc, #196]	; (8001828 <HAL_GPIO_Init+0x310>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_GPIO_Init+0x310>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800178a:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_GPIO_Init+0x310>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_GPIO_Init+0x310>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <HAL_GPIO_Init+0x310>)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_GPIO_Init+0x310>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_GPIO_Init+0x310>)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f47f ae97 	bne.w	8001528 <HAL_GPIO_Init+0x10>
  }
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	48000400 	.word	0x48000400
 8001814:	48000800 	.word	0x48000800
 8001818:	48000c00 	.word	0x48000c00
 800181c:	48001000 	.word	0x48001000
 8001820:	48001400 	.word	0x48001400
 8001824:	48001800 	.word	0x48001800
 8001828:	40010400 	.word	0x40010400

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001848:	e002      	b.n	8001850 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fefa 	bl	8000674 <HAL_GPIO_EXTI_Callback>
  }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001892:	af00      	add	r7, sp, #0
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f000 bf01 	b.w	80026a8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8160 	beq.w	8001b76 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018b6:	4bae      	ldr	r3, [pc, #696]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d00c      	beq.n	80018dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c2:	4bab      	ldr	r3, [pc, #684]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d159      	bne.n	8001982 <HAL_RCC_OscConfig+0xf6>
 80018ce:	4ba8      	ldr	r3, [pc, #672]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80018d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018da:	d152      	bne.n	8001982 <HAL_RCC_OscConfig+0xf6>
 80018dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d102      	bne.n	800190e <HAL_RCC_OscConfig+0x82>
 8001908:	4b99      	ldr	r3, [pc, #612]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e015      	b.n	800193a <HAL_RCC_OscConfig+0xae>
 800190e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001912:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001926:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800192a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001936:	4b8e      	ldr	r3, [pc, #568]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800193e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001942:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001946:	fa92 f2a2 	rbit	r2, r2
 800194a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800194e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001952:	fab2 f282 	clz	r2, r2
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f002 021f 	and.w	r2, r2, #31
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8102 	beq.w	8001b74 <HAL_RCC_OscConfig+0x2e8>
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 80fc 	bne.w	8001b74 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	f000 be93 	b.w	80026a8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198c:	d106      	bne.n	800199c <HAL_RCC_OscConfig+0x110>
 800198e:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a77      	ldr	r2, [pc, #476]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e030      	b.n	80019fe <HAL_RCC_OscConfig+0x172>
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x134>
 80019a6:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01e      	b.n	80019fe <HAL_RCC_OscConfig+0x172>
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x15a>
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a64      	ldr	r2, [pc, #400]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x172>
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a61      	ldr	r2, [pc, #388]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a5e      	ldr	r2, [pc, #376]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d059      	beq.n	8001abc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fc2a 	bl	8001260 <HAL_GetTick>
 8001a0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a12:	f7ff fc25 	bl	8001260 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d902      	bls.n	8001a28 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	f000 be40 	b.w	80026a8 <HAL_RCC_OscConfig+0xe1c>
 8001a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001a3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d102      	bne.n	8001a5a <HAL_RCC_OscConfig+0x1ce>
 8001a54:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x1fa>
 8001a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a72:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a8a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001a8e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001a92:	fa92 f2a2 	rbit	r2, r2
 8001a96:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001a9a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a9e:	fab2 f282 	clz	r2, r2
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	f042 0220 	orr.w	r2, r2, #32
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f002 021f 	and.w	r2, r2, #31
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0ab      	beq.n	8001a12 <HAL_RCC_OscConfig+0x186>
 8001aba:	e05c      	b.n	8001b76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fbd0 	bl	8001260 <HAL_GetTick>
 8001ac0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac6:	f7ff fbcb 	bl	8001260 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d902      	bls.n	8001adc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	f000 bde6 	b.w	80026a8 <HAL_RCC_OscConfig+0xe1c>
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001af0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d102      	bne.n	8001b0e <HAL_RCC_OscConfig+0x282>
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0x2ae>
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b26:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_RCC_OscConfig+0x2e4>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b3e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001b42:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b46:	fa92 f2a2 	rbit	r2, r2
 8001b4a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001b4e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f042 0220 	orr.w	r2, r2, #32
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f002 021f 	and.w	r2, r2, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ab      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x23a>
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_OscConfig+0x2ea>
 8001b70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8170 	beq.w	8001e66 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b86:	4bd0      	ldr	r3, [pc, #832]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00c      	beq.n	8001bac <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b92:	4bcd      	ldr	r3, [pc, #820]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d16d      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3ee>
 8001b9e:	4bca      	ldr	r3, [pc, #808]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001baa:	d166      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3ee>
 8001bac:	2302      	movs	r3, #2
 8001bae:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001bbe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d102      	bne.n	8001bdc <HAL_RCC_OscConfig+0x350>
 8001bd6:	4bbc      	ldr	r3, [pc, #752]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	e013      	b.n	8001c04 <HAL_RCC_OscConfig+0x378>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bf4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c00:	4bb1      	ldr	r3, [pc, #708]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	2202      	movs	r2, #2
 8001c06:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001c0a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c0e:	fa92 f2a2 	rbit	r2, r2
 8001c12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001c16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c1a:	fab2 f282 	clz	r2, r2
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f042 0220 	orr.w	r2, r2, #32
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f002 021f 	and.w	r2, r2, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_RCC_OscConfig+0x3ba>
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d002      	beq.n	8001c46 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f000 bd31 	b.w	80026a8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4ba0      	ldr	r3, [pc, #640]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	21f8      	movs	r1, #248	; 0xf8
 8001c56:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001c5e:	fa91 f1a1 	rbit	r1, r1
 8001c62:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001c66:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c6a:	fab1 f181 	clz	r1, r1
 8001c6e:	b2c9      	uxtb	r1, r1
 8001c70:	408b      	lsls	r3, r1
 8001c72:	4995      	ldr	r1, [pc, #596]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c78:	e0f5      	b.n	8001e66 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8085 	beq.w	8001d90 <HAL_RCC_OscConfig+0x504>
 8001c86:	2301      	movs	r3, #1
 8001c88:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001c98:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	2301      	movs	r3, #1
 8001cb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fad5 	bl	8001260 <HAL_GetTick>
 8001cb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fad0 	bl	8001260 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d902      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f000 bceb 	b.w	80026a8 <HAL_RCC_OscConfig+0xe1c>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001ce4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_OscConfig+0x476>
 8001cfc:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	e013      	b.n	8001d2a <HAL_RCC_OscConfig+0x49e>
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d1a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d26:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001d30:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001d34:	fa92 f2a2 	rbit	r2, r2
 8001d38:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001d3c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0af      	beq.n	8001cbc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	21f8      	movs	r1, #248	; 0xf8
 8001d6c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001d74:	fa91 f1a1 	rbit	r1, r1
 8001d78:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001d7c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d80:	fab1 f181 	clz	r1, r1
 8001d84:	b2c9      	uxtb	r1, r1
 8001d86:	408b      	lsls	r3, r1
 8001d88:	494f      	ldr	r1, [pc, #316]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
 8001d8e:	e06a      	b.n	8001e66 <HAL_RCC_OscConfig+0x5da>
 8001d90:	2301      	movs	r3, #1
 8001d92:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001da2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fa50 	bl	8001260 <HAL_GetTick>
 8001dc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fa4b 	bl	8001260 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d902      	bls.n	8001ddc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f000 bc66 	b.w	80026a8 <HAL_RCC_OscConfig+0xe1c>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001dee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d102      	bne.n	8001e0c <HAL_RCC_OscConfig+0x580>
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	e013      	b.n	8001e34 <HAL_RCC_OscConfig+0x5a8>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e1e:	2302      	movs	r3, #2
 8001e20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_RCC_OscConfig+0x63c>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	2202      	movs	r2, #2
 8001e36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e3a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e3e:	fa92 f2a2 	rbit	r2, r2
 8001e42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001e46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e4a:	fab2 f282 	clz	r2, r2
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f042 0220 	orr.w	r2, r2, #32
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	f002 021f 	and.w	r2, r2, #31
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1af      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80da 	beq.w	800202a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d069      	beq.n	8001f54 <HAL_RCC_OscConfig+0x6c8>
 8001e80:	2301      	movs	r3, #1
 8001e82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001e92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_OscConfig+0x640>)
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f9d9 	bl	8001260 <HAL_GetTick>
 8001eae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	e00d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7ff f9d4 	bl	8001260 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d905      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e3ef      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	10908120 	.word	0x10908120
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ee8:	2202      	movs	r2, #2
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f00:	2202      	movs	r2, #2
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f12:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f14:	4ba4      	ldr	r3, [pc, #656]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 8001f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f18:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	6019      	str	r1, [r3, #0]
 8001f20:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f1a3 	rbit	r1, r3
 8001f2a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f2e:	6019      	str	r1, [r3, #0]
  return result;
 8001f30:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0b0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x628>
 8001f52:	e06a      	b.n	800202a <HAL_RCC_OscConfig+0x79e>
 8001f54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f6a:	601a      	str	r2, [r3, #0]
  return result;
 8001f6c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f70:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <HAL_RCC_OscConfig+0x920>)
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	2300      	movs	r3, #0
 8001f84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff f96b 	bl	8001260 <HAL_GetTick>
 8001f8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8e:	e009      	b.n	8001fa4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f90:	f7ff f966 	bl	8001260 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e381      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
 8001fa4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fa8:	2202      	movs	r2, #2
 8001faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	fa93 f2a3 	rbit	r2, r3
 8001fb6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fd8:	2202      	movs	r2, #2
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	fa93 f2a3 	rbit	r2, r3
 8001fe6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	4b6e      	ldr	r3, [pc, #440]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 8001fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	6019      	str	r1, [r3, #0]
 8001ff8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f1a3 	rbit	r1, r3
 8002002:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002006:	6019      	str	r1, [r3, #0]
  return result;
 8002008:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1b2      	bne.n	8001f90 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8157 	beq.w	80022e8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d112      	bne.n	8002072 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204c:	4b56      	ldr	r3, [pc, #344]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	4a55      	ldr	r2, [pc, #340]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 8002052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002056:	61d3      	str	r3, [r2, #28]
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_RCC_OscConfig+0x924>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11a      	bne.n	80020b4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207e:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCC_OscConfig+0x924>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a4b      	ldr	r2, [pc, #300]	; (80021b0 <HAL_RCC_OscConfig+0x924>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002088:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208a:	f7ff f8e9 	bl	8001260 <HAL_GetTick>
 800208e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	e009      	b.n	80020a8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7ff f8e4 	bl	8001260 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	; 0x64
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e2ff      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_OscConfig+0x924>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ef      	beq.n	8002094 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d106      	bne.n	80020cc <HAL_RCC_OscConfig+0x840>
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a39      	ldr	r2, [pc, #228]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6213      	str	r3, [r2, #32]
 80020ca:	e02f      	b.n	800212c <HAL_RCC_OscConfig+0x8a0>
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x864>
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a33      	ldr	r2, [pc, #204]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	e01d      	b.n	800212c <HAL_RCC_OscConfig+0x8a0>
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x888>
 80020fa:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a27      	ldr	r2, [pc, #156]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0x8a0>
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a20      	ldr	r2, [pc, #128]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 8002126:	f023 0304 	bic.w	r3, r3, #4
 800212a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d06a      	beq.n	800220c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002136:	f7ff f893 	bl	8001260 <HAL_GetTick>
 800213a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	e00b      	b.n	8002158 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7ff f88e 	bl	8001260 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e2a7      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
 8002158:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800215c:	2202      	movs	r2, #2
 800215e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	fa93 f2a3 	rbit	r2, r3
 800216a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002174:	2202      	movs	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002186:	601a      	str	r2, [r3, #0]
  return result;
 8002188:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800218c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_OscConfig+0x928>
 80021a2:	4b01      	ldr	r3, [pc, #4]	; (80021a8 <HAL_RCC_OscConfig+0x91c>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	e013      	b.n	80021d0 <HAL_RCC_OscConfig+0x944>
 80021a8:	40021000 	.word	0x40021000
 80021ac:	10908120 	.word	0x10908120
 80021b0:	40007000 	.word	0x40007000
 80021b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021b8:	2202      	movs	r2, #2
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	4bc0      	ldr	r3, [pc, #768]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80021d4:	2102      	movs	r1, #2
 80021d6:	6011      	str	r1, [r2, #0]
 80021d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	fa92 f1a2 	rbit	r1, r2
 80021e2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021e6:	6011      	str	r1, [r2, #0]
  return result;
 80021e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	fab2 f282 	clz	r2, r2
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	f002 021f 	and.w	r2, r2, #31
 80021fe:	2101      	movs	r1, #1
 8002200:	fa01 f202 	lsl.w	r2, r1, r2
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d09a      	beq.n	8002140 <HAL_RCC_OscConfig+0x8b4>
 800220a:	e063      	b.n	80022d4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220c:	f7ff f828 	bl	8001260 <HAL_GetTick>
 8002210:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	e00b      	b.n	800222e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7ff f823 	bl	8001260 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e23c      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
 800222e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	fa93 f2a3 	rbit	r2, r3
 8002240:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800224a:	2202      	movs	r2, #2
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f2a3 	rbit	r2, r3
 8002258:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800225c:	601a      	str	r2, [r3, #0]
  return result;
 800225e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002262:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f043 0302 	orr.w	r3, r3, #2
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d102      	bne.n	800227e <HAL_RCC_OscConfig+0x9f2>
 8002278:	4b95      	ldr	r3, [pc, #596]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	e00d      	b.n	800229a <HAL_RCC_OscConfig+0xa0e>
 800227e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002282:	2202      	movs	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	4b8e      	ldr	r3, [pc, #568]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800229e:	2102      	movs	r1, #2
 80022a0:	6011      	str	r1, [r2, #0]
 80022a2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	fa92 f1a2 	rbit	r1, r2
 80022ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022b0:	6011      	str	r1, [r2, #0]
  return result;
 80022b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f002 021f 	and.w	r2, r2, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1a0      	bne.n	8002216 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b7c      	ldr	r3, [pc, #496]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	4a7b      	ldr	r2, [pc, #492]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 81d9 	beq.w	80026a6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f4:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	f000 81a6 	beq.w	800264e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b02      	cmp	r3, #2
 800230a:	f040 811e 	bne.w	800254a <HAL_RCC_OscConfig+0xcbe>
 800230e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002312:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002326:	601a      	str	r2, [r3, #0]
  return result;
 8002328:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800232c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	461a      	mov	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe ff8c 	bl	8001260 <HAL_GetTick>
 8002348:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234c:	e009      	b.n	8002362 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe ff87 	bl	8001260 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1a2      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
 8002362:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800236a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fa93 f2a3 	rbit	r2, r3
 8002376:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800237a:	601a      	str	r2, [r3, #0]
  return result;
 800237c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002380:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d102      	bne.n	800239c <HAL_RCC_OscConfig+0xb10>
 8002396:	4b4e      	ldr	r3, [pc, #312]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	e01b      	b.n	80023d4 <HAL_RCC_OscConfig+0xb48>
 800239c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	fa93 f2a3 	rbit	r2, r3
 80023b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80023d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023dc:	6011      	str	r1, [r2, #0]
 80023de:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	fa92 f1a2 	rbit	r1, r2
 80023e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023ec:	6011      	str	r1, [r2, #0]
  return result;
 80023ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	fab2 f282 	clz	r2, r2
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	f042 0220 	orr.w	r2, r2, #32
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f002 021f 	and.w	r2, r2, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d19e      	bne.n	800234e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002410:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f023 020f 	bic.w	r2, r3, #15
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	492c      	ldr	r1, [pc, #176]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 8002420:	4313      	orrs	r3, r2
 8002422:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6a19      	ldr	r1, [r3, #32]
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	430b      	orrs	r3, r1
 800243a:	4925      	ldr	r1, [pc, #148]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
 8002440:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fa93 f2a3 	rbit	r2, r3
 8002454:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002458:	601a      	str	r2, [r3, #0]
  return result;
 800245a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800245e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800246a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	461a      	mov	r2, r3
 8002472:	2301      	movs	r3, #1
 8002474:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fef3 	bl	8001260 <HAL_GetTick>
 800247a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247e:	e009      	b.n	8002494 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe feee 	bl	8001260 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e109      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
 8002494:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f2a3 	rbit	r2, r3
 80024a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024ac:	601a      	str	r2, [r3, #0]
  return result;
 80024ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCC_OscConfig+0xc48>
 80024c8:	4b01      	ldr	r3, [pc, #4]	; (80024d0 <HAL_RCC_OscConfig+0xc44>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e01e      	b.n	800250c <HAL_RCC_OscConfig+0xc80>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_OscConfig+0xe28>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002510:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002514:	6011      	str	r1, [r2, #0]
 8002516:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	fa92 f1a2 	rbit	r1, r2
 8002520:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002524:	6011      	str	r1, [r2, #0]
  return result;
 8002526:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f042 0220 	orr.w	r2, r2, #32
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f002 021f 	and.w	r2, r2, #31
 800253c:	2101      	movs	r1, #1
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d09b      	beq.n	8002480 <HAL_RCC_OscConfig+0xbf4>
 8002548:	e0ad      	b.n	80026a6 <HAL_RCC_OscConfig+0xe1a>
 800254a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800254e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	fa93 f2a3 	rbit	r2, r3
 800255e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002562:	601a      	str	r2, [r3, #0]
  return result;
 8002564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002568:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002574:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	461a      	mov	r2, r3
 800257c:	2300      	movs	r3, #0
 800257e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fe6e 	bl	8001260 <HAL_GetTick>
 8002584:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002588:	e009      	b.n	800259e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fe69 	bl	8001260 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e084      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
 800259e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	fa93 f2a3 	rbit	r2, r3
 80025b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b6:	601a      	str	r2, [r3, #0]
  return result;
 80025b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_RCC_OscConfig+0xd4c>
 80025d2:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <HAL_RCC_OscConfig+0xe28>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e01b      	b.n	8002610 <HAL_RCC_OscConfig+0xd84>
 80025d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fa93 f2a3 	rbit	r2, r3
 80025ec:	f107 0320 	add.w	r3, r7, #32
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fa93 f2a3 	rbit	r2, r3
 8002606:	f107 0318 	add.w	r3, r7, #24
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_OscConfig+0xe28>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f107 0214 	add.w	r2, r7, #20
 8002614:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002618:	6011      	str	r1, [r2, #0]
 800261a:	f107 0214 	add.w	r2, r7, #20
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	fa92 f1a2 	rbit	r1, r2
 8002624:	f107 0210 	add.w	r2, r7, #16
 8002628:	6011      	str	r1, [r2, #0]
  return result;
 800262a:	f107 0210 	add.w	r2, r7, #16
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fab2 f282 	clz	r2, r2
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f002 021f 	and.w	r2, r2, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f202 	lsl.w	r2, r1, r2
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d19e      	bne.n	800258a <HAL_RCC_OscConfig+0xcfe>
 800264c:	e02b      	b.n	80026a6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e025      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_RCC_OscConfig+0xe28>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_RCC_OscConfig+0xe28>)
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800266c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002670:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	429a      	cmp	r2, r3
 800267c:	d111      	bne.n	80026a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800267e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800268c:	429a      	cmp	r2, r3
 800268e:	d108      	bne.n	80026a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b09e      	sub	sp, #120	; 0x78
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e162      	b.n	8002996 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b90      	ldr	r3, [pc, #576]	; (8002914 <HAL_RCC_ClockConfig+0x25c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b8d      	ldr	r3, [pc, #564]	; (8002914 <HAL_RCC_ClockConfig+0x25c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	498b      	ldr	r1, [pc, #556]	; (8002914 <HAL_RCC_ClockConfig+0x25c>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b89      	ldr	r3, [pc, #548]	; (8002914 <HAL_RCC_ClockConfig+0x25c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e14a      	b.n	8002996 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270c:	4b82      	ldr	r3, [pc, #520]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	497f      	ldr	r1, [pc, #508]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80dc 	beq.w	80028e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d13c      	bne.n	80027ae <HAL_RCC_ClockConfig+0xf6>
 8002734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002738:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d102      	bne.n	800275e <HAL_RCC_ClockConfig+0xa6>
 8002758:	4b6f      	ldr	r3, [pc, #444]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	e00f      	b.n	800277e <HAL_RCC_ClockConfig+0xc6>
 800275e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002762:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	667b      	str	r3, [r7, #100]	; 0x64
 800276c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002770:	663b      	str	r3, [r7, #96]	; 0x60
 8002772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002782:	65ba      	str	r2, [r7, #88]	; 0x58
 8002784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002786:	fa92 f2a2 	rbit	r2, r2
 800278a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800278c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800278e:	fab2 f282 	clz	r2, r2
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	f042 0220 	orr.w	r2, r2, #32
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	f002 021f 	and.w	r2, r2, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f202 	lsl.w	r2, r1, r2
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d17b      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0f3      	b.n	8002996 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d13c      	bne.n	8002830 <HAL_RCC_ClockConfig+0x178>
 80027b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x128>
 80027da:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e00f      	b.n	8002800 <HAL_RCC_ClockConfig+0x148>
 80027e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
 80027ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f2:	643b      	str	r3, [r7, #64]	; 0x40
 80027f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fc:	4b46      	ldr	r3, [pc, #280]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002804:	63ba      	str	r2, [r7, #56]	; 0x38
 8002806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002808:	fa92 f2a2 	rbit	r2, r2
 800280c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800280e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f002 021f 	and.w	r2, r2, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d13a      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0b2      	b.n	8002996 <HAL_RCC_ClockConfig+0x2de>
 8002830:	2302      	movs	r3, #2
 8002832:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d102      	bne.n	8002858 <HAL_RCC_ClockConfig+0x1a0>
 8002852:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e00d      	b.n	8002874 <HAL_RCC_ClockConfig+0x1bc>
 8002858:	2302      	movs	r3, #2
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
 8002864:	2302      	movs	r3, #2
 8002866:	623b      	str	r3, [r7, #32]
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2202      	movs	r2, #2
 8002876:	61ba      	str	r2, [r7, #24]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	fa92 f2a2 	rbit	r2, r2
 800287e:	617a      	str	r2, [r7, #20]
  return result;
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f042 0220 	orr.w	r2, r2, #32
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f002 021f 	and.w	r2, r2, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e079      	b.n	8002996 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	491a      	ldr	r1, [pc, #104]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b4:	f7fe fcd4 	bl	8001260 <HAL_GetTick>
 80028b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028bc:	f7fe fcd0 	bl	8001260 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e061      	b.n	8002996 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_RCC_ClockConfig+0x260>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 020c 	and.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1eb      	bne.n	80028bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_ClockConfig+0x25c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d214      	bcs.n	800291c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_RCC_ClockConfig+0x25c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	4906      	ldr	r1, [pc, #24]	; (8002914 <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <HAL_RCC_ClockConfig+0x25c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d005      	beq.n	800291c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e040      	b.n	8002996 <HAL_RCC_ClockConfig+0x2de>
 8002914:	40022000 	.word	0x40022000
 8002918:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_ClockConfig+0x2e8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	491a      	ldr	r1, [pc, #104]	; (80029a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4912      	ldr	r1, [pc, #72]	; (80029a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800295a:	f000 f829 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800295e:	4601      	mov	r1, r0
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002968:	22f0      	movs	r2, #240	; 0xf0
 800296a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	fa92 f2a2 	rbit	r2, r2
 8002972:	60fa      	str	r2, [r7, #12]
  return result;
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	fab2 f282 	clz	r2, r2
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	40d3      	lsrs	r3, r2
 800297e:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x2ec>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	fa21 f303 	lsr.w	r3, r1, r3
 8002986:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <HAL_RCC_ClockConfig+0x2f0>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_RCC_ClockConfig+0x2f4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fc22 	bl	80011d8 <HAL_InitTick>
  
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3778      	adds	r7, #120	; 0x78
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	08004160 	.word	0x08004160
 80029a8:	200000d0 	.word	0x200000d0
 80029ac:	200000d4 	.word	0x200000d4

080029b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b08b      	sub	sp, #44	; 0x2c
 80029b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d002      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x30>
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x36>
 80029de:	e03f      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029e2:	623b      	str	r3, [r7, #32]
      break;
 80029e4:	e03f      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	fa92 f2a2 	rbit	r2, r2
 80029f8:	607a      	str	r2, [r7, #4]
  return result;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	fab2 f282 	clz	r2, r2
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	40d3      	lsrs	r3, r2
 8002a04:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	220f      	movs	r2, #15
 8002a14:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	fab2 f282 	clz	r2, r2
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	40d3      	lsrs	r3, r2
 8002a28:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a38:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
 8002a48:	e007      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a4a:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	623b      	str	r3, [r7, #32]
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a62:	623b      	str	r3, [r7, #32]
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	6a3b      	ldr	r3, [r7, #32]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	372c      	adds	r7, #44	; 0x2c
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40021000 	.word	0x40021000
 8002a78:	007a1200 	.word	0x007a1200
 8002a7c:	08004178 	.word	0x08004178
 8002a80:	08004188 	.word	0x08004188

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	200000d0 	.word	0x200000d0

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002aa2:	f7ff ffef 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa6:	4601      	mov	r1, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ab0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ab4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	fa92 f2a2 	rbit	r2, r2
 8002abc:	603a      	str	r2, [r7, #0]
  return result;
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	fab2 f282 	clz	r2, r2
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	40d3      	lsrs	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08004170 	.word	0x08004170

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ae6:	f7ff ffcd 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aea:	4601      	mov	r1, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002af4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002af8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	fa92 f2a2 	rbit	r2, r2
 8002b00:	603a      	str	r2, [r7, #0]
  return result;
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	fab2 f282 	clz	r2, r2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	40d3      	lsrs	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08004170 	.word	0x08004170

08002b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b092      	sub	sp, #72	; 0x48
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80d7 	beq.w	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b48:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10e      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	4a4a      	ldr	r2, [pc, #296]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	61d3      	str	r3, [r2, #28]
 8002b60:	4b48      	ldr	r3, [pc, #288]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b45      	ldr	r3, [pc, #276]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7e:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a41      	ldr	r2, [pc, #260]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fb69 	bl	8001260 <HAL_GetTick>
 8002b8e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7fe fb65 	bl	8001260 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b64      	cmp	r3, #100	; 0x64
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1d6      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bb0:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8084 	beq.w	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d07c      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2300      	movs	r3, #0
 8002c20:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c22:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c26:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04b      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fb15 	bl	8001260 <HAL_GetTick>
 8002c36:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fe fb11 	bl	8001260 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e180      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c50:	2302      	movs	r3, #2
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	61fb      	str	r3, [r7, #28]
  return result;
 8002c68:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d108      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c7e:	4b01      	ldr	r3, [pc, #4]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	e00d      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	10908100 	.word	0x10908100
 8002c90:	2302      	movs	r3, #2
 8002c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	4ba0      	ldr	r3, [pc, #640]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	613a      	str	r2, [r7, #16]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	fa92 f2a2 	rbit	r2, r2
 8002caa:	60fa      	str	r2, [r7, #12]
  return result;
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	fab2 f282 	clz	r2, r2
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	f002 021f 	and.w	r2, r2, #31
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0b7      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cca:	4b95      	ldr	r3, [pc, #596]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4992      	ldr	r1, [pc, #584]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce4:	4b8e      	ldr	r3, [pc, #568]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4a8d      	ldr	r2, [pc, #564]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cfc:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f023 0203 	bic.w	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4985      	ldr	r1, [pc, #532]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d1a:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	497e      	ldr	r1, [pc, #504]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	4976      	ldr	r1, [pc, #472]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f023 0210 	bic.w	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	496f      	ldr	r1, [pc, #444]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	4967      	ldr	r1, [pc, #412]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d92:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f023 0220 	bic.w	r2, r3, #32
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4960      	ldr	r1, [pc, #384]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002db0:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	4958      	ldr	r1, [pc, #352]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dce:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4951      	ldr	r1, [pc, #324]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4949      	ldr	r1, [pc, #292]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e0a:	4b45      	ldr	r3, [pc, #276]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4942      	ldr	r1, [pc, #264]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e28:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	493a      	ldr	r1, [pc, #232]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e46:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	4933      	ldr	r1, [pc, #204]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e64:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e70:	492b      	ldr	r1, [pc, #172]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e82:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	4924      	ldr	r1, [pc, #144]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	491c      	ldr	r1, [pc, #112]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	4915      	ldr	r1, [pc, #84]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	490d      	ldr	r1, [pc, #52]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f06:	4906      	ldr	r1, [pc, #24]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f18:	4b01      	ldr	r3, [pc, #4]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	e002      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2c:	490b      	ldr	r1, [pc, #44]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4a:	4904      	ldr	r1, [pc, #16]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3748      	adds	r7, #72	; 0x48
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000

08002f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e01d      	b.n	8002fae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fe f844 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 f97c 	bl	800329c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <HAL_TIM_Base_Start_IT+0x50>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d00b      	beq.n	8002ffa <HAL_TIM_Base_Start_IT+0x42>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d007      	beq.n	8002ffa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	00010007 	.word	0x00010007

0800300c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d122      	bne.n	8003068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0202 	mvn.w	r2, #2
 8003038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f905 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8f7 	bl	800324a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f908 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d122      	bne.n	80030bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b04      	cmp	r3, #4
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0204 	mvn.w	r2, #4
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8db 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8cd 	bl	800324a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f8de 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0208 	mvn.w	r2, #8
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2204      	movs	r2, #4
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8b1 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8a3 	bl	800324a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f8b4 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b10      	cmp	r3, #16
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b10      	cmp	r3, #16
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0210 	mvn.w	r2, #16
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2208      	movs	r2, #8
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f887 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f879 	bl	800324a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f88a 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10e      	bne.n	8003190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d107      	bne.n	8003190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0201 	mvn.w	r2, #1
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fa20 	bl	80005d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b80      	cmp	r3, #128	; 0x80
 800319c:	d10e      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9a4 	bl	8003504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ca:	d10e      	bne.n	80031ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d107      	bne.n	80031ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f997 	bl	8003518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d10e      	bne.n	8003216 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d107      	bne.n	8003216 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800320e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f838 	bl	8003286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b20      	cmp	r3, #32
 8003222:	d10e      	bne.n	8003242 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b20      	cmp	r3, #32
 8003230:	d107      	bne.n	8003242 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f06f 0220 	mvn.w	r2, #32
 800323a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f957 	bl	80034f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a42      	ldr	r2, [pc, #264]	; (80033b8 <TIM_Base_SetConfig+0x11c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ba:	d00f      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3f      	ldr	r2, [pc, #252]	; (80033bc <TIM_Base_SetConfig+0x120>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00b      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a3e      	ldr	r2, [pc, #248]	; (80033c0 <TIM_Base_SetConfig+0x124>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3d      	ldr	r2, [pc, #244]	; (80033c4 <TIM_Base_SetConfig+0x128>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3c      	ldr	r2, [pc, #240]	; (80033c8 <TIM_Base_SetConfig+0x12c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a31      	ldr	r2, [pc, #196]	; (80033b8 <TIM_Base_SetConfig+0x11c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01f      	beq.n	8003336 <TIM_Base_SetConfig+0x9a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fc:	d01b      	beq.n	8003336 <TIM_Base_SetConfig+0x9a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <TIM_Base_SetConfig+0x120>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d017      	beq.n	8003336 <TIM_Base_SetConfig+0x9a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2d      	ldr	r2, [pc, #180]	; (80033c0 <TIM_Base_SetConfig+0x124>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <TIM_Base_SetConfig+0x9a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2c      	ldr	r2, [pc, #176]	; (80033c4 <TIM_Base_SetConfig+0x128>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00f      	beq.n	8003336 <TIM_Base_SetConfig+0x9a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2c      	ldr	r2, [pc, #176]	; (80033cc <TIM_Base_SetConfig+0x130>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00b      	beq.n	8003336 <TIM_Base_SetConfig+0x9a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2b      	ldr	r2, [pc, #172]	; (80033d0 <TIM_Base_SetConfig+0x134>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0x9a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <TIM_Base_SetConfig+0x138>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0x9a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <TIM_Base_SetConfig+0x12c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <TIM_Base_SetConfig+0x11c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <TIM_Base_SetConfig+0x100>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <TIM_Base_SetConfig+0x128>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x100>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a13      	ldr	r2, [pc, #76]	; (80033cc <TIM_Base_SetConfig+0x130>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x100>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <TIM_Base_SetConfig+0x134>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x100>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <TIM_Base_SetConfig+0x138>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x100>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <TIM_Base_SetConfig+0x12c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d103      	bne.n	80033a4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	615a      	str	r2, [r3, #20]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800
 80033c4:	40013400 	.word	0x40013400
 80033c8:	40015000 	.word	0x40015000
 80033cc:	40014000 	.word	0x40014000
 80033d0:	40014400 	.word	0x40014400
 80033d4:	40014800 	.word	0x40014800

080033d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e06d      	b.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a30      	ldr	r2, [pc, #192]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003434:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d01d      	beq.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d018      	beq.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00e      	beq.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a15      	ldr	r2, [pc, #84]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d009      	beq.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a16      	ldr	r2, [pc, #88]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a11      	ldr	r2, [pc, #68]	; (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d10c      	bne.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40013400 	.word	0x40013400
 80034e0:	40015000 	.word	0x40015000
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40014000 	.word	0x40014000

080034f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e040      	b.n	80035c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fdb6 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2224      	movs	r2, #36	; 0x24
 8003558:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f986 	bl	800387c <UART_SetConfig>
 8003570:	4603      	mov	r3, r0
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e022      	b.n	80035c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fb94 	bl	8003cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fc1b 	bl	8003df4 <UART_CheckIdleState>
 80035be:	4603      	mov	r3, r0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d113      	bne.n	8003620 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00e      	beq.n	8003620 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8114 	beq.w	800383e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
      }
      return;
 800361e:	e10e      	b.n	800383e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80d6 	beq.w	80037d4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80cb 	beq.w	80037d4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00e      	beq.n	8003666 <HAL_UART_IRQHandler+0x9e>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365e:	f043 0201 	orr.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <HAL_UART_IRQHandler+0xc6>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2202      	movs	r2, #2
 8003680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <HAL_UART_IRQHandler+0xee>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2204      	movs	r2, #4
 80036a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ae:	f043 0202 	orr.w	r2, r3, #2
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d104      	bne.n	80036d4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2208      	movs	r2, #8
 80036da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e0:	f043 0208 	orr.w	r2, r3, #8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00f      	beq.n	8003712 <HAL_UART_IRQHandler+0x14a>
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8093 	beq.w	8003842 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003744:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d004      	beq.n	800375e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800375a:	2b00      	cmp	r3, #0
 800375c:	d031      	beq.n	80037c2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fc08 	bl	8003f74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d123      	bne.n	80037ba <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003780:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d013      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378e:	4a30      	ldr	r2, [pc, #192]	; (8003850 <HAL_UART_IRQHandler+0x288>)
 8003790:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd fe7f 	bl	800149a <HAL_DMA_Abort_IT>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80037ac:	4610      	mov	r0, r2
 80037ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	e00e      	b.n	80037d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f858 	bl	8003868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	e00a      	b.n	80037d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f854 	bl	8003868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	e006      	b.n	80037d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f850 	bl	8003868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80037ce:	e038      	b.n	8003842 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	bf00      	nop
    return;
 80037d2:	e036      	b.n	8003842 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <HAL_UART_IRQHandler+0x232>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fc0d 	bl	8004012 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037f8:	e026      	b.n	8003848 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003812:	2b00      	cmp	r3, #0
 8003814:	d017      	beq.n	8003846 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	4798      	blx	r3
    }
    return;
 800381e:	e012      	b.n	8003846 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <HAL_UART_IRQHandler+0x280>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fbd3 	bl	8003fe0 <UART_EndTransmit_IT>
    return;
 800383a:	bf00      	nop
 800383c:	e004      	b.n	8003848 <HAL_UART_IRQHandler+0x280>
      return;
 800383e:	bf00      	nop
 8003840:	e002      	b.n	8003848 <HAL_UART_IRQHandler+0x280>
    return;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <HAL_UART_IRQHandler+0x280>
    return;
 8003846:	bf00      	nop
  }

}
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	08003fb5 	.word	0x08003fb5

08003854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4bac      	ldr	r3, [pc, #688]	; (8003b5c <UART_SetConfig+0x2e0>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	6939      	ldr	r1, [r7, #16]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a9a      	ldr	r2, [pc, #616]	; (8003b60 <UART_SetConfig+0x2e4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d121      	bne.n	8003940 <UART_SetConfig+0xc4>
 80038fc:	4b99      	ldr	r3, [pc, #612]	; (8003b64 <UART_SetConfig+0x2e8>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b03      	cmp	r3, #3
 8003906:	d817      	bhi.n	8003938 <UART_SetConfig+0xbc>
 8003908:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <UART_SetConfig+0x94>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003921 	.word	0x08003921
 8003914:	0800392d 	.word	0x0800392d
 8003918:	08003933 	.word	0x08003933
 800391c:	08003927 	.word	0x08003927
 8003920:	2301      	movs	r3, #1
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e0b2      	b.n	8003a8c <UART_SetConfig+0x210>
 8003926:	2302      	movs	r3, #2
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e0af      	b.n	8003a8c <UART_SetConfig+0x210>
 800392c:	2304      	movs	r3, #4
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e0ac      	b.n	8003a8c <UART_SetConfig+0x210>
 8003932:	2308      	movs	r3, #8
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e0a9      	b.n	8003a8c <UART_SetConfig+0x210>
 8003938:	2310      	movs	r3, #16
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	bf00      	nop
 800393e:	e0a5      	b.n	8003a8c <UART_SetConfig+0x210>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a88      	ldr	r2, [pc, #544]	; (8003b68 <UART_SetConfig+0x2ec>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d123      	bne.n	8003992 <UART_SetConfig+0x116>
 800394a:	4b86      	ldr	r3, [pc, #536]	; (8003b64 <UART_SetConfig+0x2e8>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003956:	d012      	beq.n	800397e <UART_SetConfig+0x102>
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d802      	bhi.n	8003964 <UART_SetConfig+0xe8>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <UART_SetConfig+0xf6>
 8003962:	e012      	b.n	800398a <UART_SetConfig+0x10e>
 8003964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003968:	d00c      	beq.n	8003984 <UART_SetConfig+0x108>
 800396a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800396e:	d003      	beq.n	8003978 <UART_SetConfig+0xfc>
 8003970:	e00b      	b.n	800398a <UART_SetConfig+0x10e>
 8003972:	2300      	movs	r3, #0
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e089      	b.n	8003a8c <UART_SetConfig+0x210>
 8003978:	2302      	movs	r3, #2
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e086      	b.n	8003a8c <UART_SetConfig+0x210>
 800397e:	2304      	movs	r3, #4
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e083      	b.n	8003a8c <UART_SetConfig+0x210>
 8003984:	2308      	movs	r3, #8
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e080      	b.n	8003a8c <UART_SetConfig+0x210>
 800398a:	2310      	movs	r3, #16
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	bf00      	nop
 8003990:	e07c      	b.n	8003a8c <UART_SetConfig+0x210>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a75      	ldr	r2, [pc, #468]	; (8003b6c <UART_SetConfig+0x2f0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d123      	bne.n	80039e4 <UART_SetConfig+0x168>
 800399c:	4b71      	ldr	r3, [pc, #452]	; (8003b64 <UART_SetConfig+0x2e8>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80039a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039a8:	d012      	beq.n	80039d0 <UART_SetConfig+0x154>
 80039aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ae:	d802      	bhi.n	80039b6 <UART_SetConfig+0x13a>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <UART_SetConfig+0x148>
 80039b4:	e012      	b.n	80039dc <UART_SetConfig+0x160>
 80039b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039ba:	d00c      	beq.n	80039d6 <UART_SetConfig+0x15a>
 80039bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039c0:	d003      	beq.n	80039ca <UART_SetConfig+0x14e>
 80039c2:	e00b      	b.n	80039dc <UART_SetConfig+0x160>
 80039c4:	2300      	movs	r3, #0
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e060      	b.n	8003a8c <UART_SetConfig+0x210>
 80039ca:	2302      	movs	r3, #2
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e05d      	b.n	8003a8c <UART_SetConfig+0x210>
 80039d0:	2304      	movs	r3, #4
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e05a      	b.n	8003a8c <UART_SetConfig+0x210>
 80039d6:	2308      	movs	r3, #8
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e057      	b.n	8003a8c <UART_SetConfig+0x210>
 80039dc:	2310      	movs	r3, #16
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	bf00      	nop
 80039e2:	e053      	b.n	8003a8c <UART_SetConfig+0x210>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a61      	ldr	r2, [pc, #388]	; (8003b70 <UART_SetConfig+0x2f4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d123      	bne.n	8003a36 <UART_SetConfig+0x1ba>
 80039ee:	4b5d      	ldr	r3, [pc, #372]	; (8003b64 <UART_SetConfig+0x2e8>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80039f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fa:	d012      	beq.n	8003a22 <UART_SetConfig+0x1a6>
 80039fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a00:	d802      	bhi.n	8003a08 <UART_SetConfig+0x18c>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <UART_SetConfig+0x19a>
 8003a06:	e012      	b.n	8003a2e <UART_SetConfig+0x1b2>
 8003a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a0c:	d00c      	beq.n	8003a28 <UART_SetConfig+0x1ac>
 8003a0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a12:	d003      	beq.n	8003a1c <UART_SetConfig+0x1a0>
 8003a14:	e00b      	b.n	8003a2e <UART_SetConfig+0x1b2>
 8003a16:	2300      	movs	r3, #0
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e037      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e034      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a22:	2304      	movs	r3, #4
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e031      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a28:	2308      	movs	r3, #8
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e02e      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a2e:	2310      	movs	r3, #16
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	bf00      	nop
 8003a34:	e02a      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a4e      	ldr	r2, [pc, #312]	; (8003b74 <UART_SetConfig+0x2f8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d123      	bne.n	8003a88 <UART_SetConfig+0x20c>
 8003a40:	4b48      	ldr	r3, [pc, #288]	; (8003b64 <UART_SetConfig+0x2e8>)
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4c:	d012      	beq.n	8003a74 <UART_SetConfig+0x1f8>
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d802      	bhi.n	8003a5a <UART_SetConfig+0x1de>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <UART_SetConfig+0x1ec>
 8003a58:	e012      	b.n	8003a80 <UART_SetConfig+0x204>
 8003a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5e:	d00c      	beq.n	8003a7a <UART_SetConfig+0x1fe>
 8003a60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a64:	d003      	beq.n	8003a6e <UART_SetConfig+0x1f2>
 8003a66:	e00b      	b.n	8003a80 <UART_SetConfig+0x204>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e00e      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e00b      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a74:	2304      	movs	r3, #4
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e008      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e005      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a80:	2310      	movs	r3, #16
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	bf00      	nop
 8003a86:	e001      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a94:	f040 8090 	bne.w	8003bb8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003a98:	7ffb      	ldrb	r3, [r7, #31]
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d86c      	bhi.n	8003b78 <UART_SetConfig+0x2fc>
 8003a9e:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <UART_SetConfig+0x228>)
 8003aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003ae9 	.word	0x08003ae9
 8003aac:	08003b09 	.word	0x08003b09
 8003ab0:	08003b79 	.word	0x08003b79
 8003ab4:	08003b25 	.word	0x08003b25
 8003ab8:	08003b79 	.word	0x08003b79
 8003abc:	08003b79 	.word	0x08003b79
 8003ac0:	08003b79 	.word	0x08003b79
 8003ac4:	08003b45 	.word	0x08003b45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f7fe ffe8 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003acc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	005a      	lsls	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	61bb      	str	r3, [r7, #24]
        break;
 8003ae6:	e04a      	b.n	8003b7e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7fe fffa 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8003aec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	005a      	lsls	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	61bb      	str	r3, [r7, #24]
        break;
 8003b06:	e03a      	b.n	8003b7e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003b12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6852      	ldr	r2, [r2, #4]
 8003b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	61bb      	str	r3, [r7, #24]
        break;
 8003b22:	e02c      	b.n	8003b7e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b24:	f7fe ff44 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8003b28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	005a      	lsls	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	441a      	add	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	61bb      	str	r3, [r7, #24]
        break;
 8003b42:	e01c      	b.n	8003b7e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	61bb      	str	r3, [r7, #24]
        break;
 8003b5a:	e010      	b.n	8003b7e <UART_SetConfig+0x302>
 8003b5c:	efff69f3 	.word	0xefff69f3
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40004400 	.word	0x40004400
 8003b6c:	40004800 	.word	0x40004800
 8003b70:	40004c00 	.word	0x40004c00
 8003b74:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
        break;
 8003b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b0f      	cmp	r3, #15
 8003b82:	d916      	bls.n	8003bb2 <UART_SetConfig+0x336>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8a:	d212      	bcs.n	8003bb2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f023 030f 	bic.w	r3, r3, #15
 8003b94:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	897b      	ldrh	r3, [r7, #10]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	897a      	ldrh	r2, [r7, #10]
 8003bae:	60da      	str	r2, [r3, #12]
 8003bb0:	e072      	b.n	8003c98 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	75fb      	strb	r3, [r7, #23]
 8003bb6:	e06f      	b.n	8003c98 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003bb8:	7ffb      	ldrb	r3, [r7, #31]
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d85b      	bhi.n	8003c76 <UART_SetConfig+0x3fa>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0x348>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003c07 	.word	0x08003c07
 8003bcc:	08003c25 	.word	0x08003c25
 8003bd0:	08003c77 	.word	0x08003c77
 8003bd4:	08003c41 	.word	0x08003c41
 8003bd8:	08003c77 	.word	0x08003c77
 8003bdc:	08003c77 	.word	0x08003c77
 8003be0:	08003c77 	.word	0x08003c77
 8003be4:	08003c5f 	.word	0x08003c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be8:	f7fe ff58 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003bec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	085a      	lsrs	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	441a      	add	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	61bb      	str	r3, [r7, #24]
        break;
 8003c04:	e03a      	b.n	8003c7c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c06:	f7fe ff6b 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8003c0a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	085a      	lsrs	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	441a      	add	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	61bb      	str	r3, [r7, #24]
        break;
 8003c22:	e02b      	b.n	8003c7c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003c2e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6852      	ldr	r2, [r2, #4]
 8003c36:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	61bb      	str	r3, [r7, #24]
        break;
 8003c3e:	e01d      	b.n	8003c7c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c40:	f7fe feb6 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8003c44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	085a      	lsrs	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	441a      	add	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	61bb      	str	r3, [r7, #24]
        break;
 8003c5c:	e00e      	b.n	8003c7c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	61bb      	str	r3, [r7, #24]
        break;
 8003c74:	e002      	b.n	8003c7c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
        break;
 8003c7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b0f      	cmp	r3, #15
 8003c80:	d908      	bls.n	8003c94 <UART_SetConfig+0x418>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d204      	bcs.n	8003c94 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	e001      	b.n	8003c98 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop

08003cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01a      	beq.n	8003dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dae:	d10a      	bne.n	8003dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  }
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e02:	f7fd fa2d 	bl	8001260 <HAL_GetTick>
 8003e06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d10e      	bne.n	8003e34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f82a 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e020      	b.n	8003e76 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d10e      	bne.n	8003e60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f814 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e00a      	b.n	8003e76 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8e:	e05d      	b.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d059      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fd f9e2 	bl	8001260 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d11b      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ebc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e042      	b.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d02b      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f02:	d123      	bne.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f0c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e00f      	b.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4013      	ands	r3, r2
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d092      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff fc48 	bl	8003868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fc25 	bl	8003854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <__libc_init_array>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	4e0d      	ldr	r6, [pc, #52]	; (8004060 <__libc_init_array+0x38>)
 800402c:	4c0d      	ldr	r4, [pc, #52]	; (8004064 <__libc_init_array+0x3c>)
 800402e:	1ba4      	subs	r4, r4, r6
 8004030:	10a4      	asrs	r4, r4, #2
 8004032:	2500      	movs	r5, #0
 8004034:	42a5      	cmp	r5, r4
 8004036:	d109      	bne.n	800404c <__libc_init_array+0x24>
 8004038:	4e0b      	ldr	r6, [pc, #44]	; (8004068 <__libc_init_array+0x40>)
 800403a:	4c0c      	ldr	r4, [pc, #48]	; (800406c <__libc_init_array+0x44>)
 800403c:	f000 f884 	bl	8004148 <_init>
 8004040:	1ba4      	subs	r4, r4, r6
 8004042:	10a4      	asrs	r4, r4, #2
 8004044:	2500      	movs	r5, #0
 8004046:	42a5      	cmp	r5, r4
 8004048:	d105      	bne.n	8004056 <__libc_init_array+0x2e>
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004050:	4798      	blx	r3
 8004052:	3501      	adds	r5, #1
 8004054:	e7ee      	b.n	8004034 <__libc_init_array+0xc>
 8004056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800405a:	4798      	blx	r3
 800405c:	3501      	adds	r5, #1
 800405e:	e7f2      	b.n	8004046 <__libc_init_array+0x1e>
 8004060:	08004198 	.word	0x08004198
 8004064:	08004198 	.word	0x08004198
 8004068:	08004198 	.word	0x08004198
 800406c:	0800419c 	.word	0x0800419c

08004070 <free>:
 8004070:	4b02      	ldr	r3, [pc, #8]	; (800407c <free+0xc>)
 8004072:	4601      	mov	r1, r0
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	f000 b817 	b.w	80040a8 <_free_r>
 800407a:	bf00      	nop
 800407c:	200000dc 	.word	0x200000dc

08004080 <memcpy>:
 8004080:	b510      	push	{r4, lr}
 8004082:	1e43      	subs	r3, r0, #1
 8004084:	440a      	add	r2, r1
 8004086:	4291      	cmp	r1, r2
 8004088:	d100      	bne.n	800408c <memcpy+0xc>
 800408a:	bd10      	pop	{r4, pc}
 800408c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004094:	e7f7      	b.n	8004086 <memcpy+0x6>

08004096 <memset>:
 8004096:	4402      	add	r2, r0
 8004098:	4603      	mov	r3, r0
 800409a:	4293      	cmp	r3, r2
 800409c:	d100      	bne.n	80040a0 <memset+0xa>
 800409e:	4770      	bx	lr
 80040a0:	f803 1b01 	strb.w	r1, [r3], #1
 80040a4:	e7f9      	b.n	800409a <memset+0x4>
	...

080040a8 <_free_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4605      	mov	r5, r0
 80040ac:	2900      	cmp	r1, #0
 80040ae:	d045      	beq.n	800413c <_free_r+0x94>
 80040b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b4:	1f0c      	subs	r4, r1, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bfb8      	it	lt
 80040ba:	18e4      	addlt	r4, r4, r3
 80040bc:	f000 f842 	bl	8004144 <__malloc_lock>
 80040c0:	4a1f      	ldr	r2, [pc, #124]	; (8004140 <_free_r+0x98>)
 80040c2:	6813      	ldr	r3, [r2, #0]
 80040c4:	4610      	mov	r0, r2
 80040c6:	b933      	cbnz	r3, 80040d6 <_free_r+0x2e>
 80040c8:	6063      	str	r3, [r4, #4]
 80040ca:	6014      	str	r4, [r2, #0]
 80040cc:	4628      	mov	r0, r5
 80040ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040d2:	f000 b838 	b.w	8004146 <__malloc_unlock>
 80040d6:	42a3      	cmp	r3, r4
 80040d8:	d90c      	bls.n	80040f4 <_free_r+0x4c>
 80040da:	6821      	ldr	r1, [r4, #0]
 80040dc:	1862      	adds	r2, r4, r1
 80040de:	4293      	cmp	r3, r2
 80040e0:	bf04      	itt	eq
 80040e2:	681a      	ldreq	r2, [r3, #0]
 80040e4:	685b      	ldreq	r3, [r3, #4]
 80040e6:	6063      	str	r3, [r4, #4]
 80040e8:	bf04      	itt	eq
 80040ea:	1852      	addeq	r2, r2, r1
 80040ec:	6022      	streq	r2, [r4, #0]
 80040ee:	6004      	str	r4, [r0, #0]
 80040f0:	e7ec      	b.n	80040cc <_free_r+0x24>
 80040f2:	4613      	mov	r3, r2
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	b10a      	cbz	r2, 80040fc <_free_r+0x54>
 80040f8:	42a2      	cmp	r2, r4
 80040fa:	d9fa      	bls.n	80040f2 <_free_r+0x4a>
 80040fc:	6819      	ldr	r1, [r3, #0]
 80040fe:	1858      	adds	r0, r3, r1
 8004100:	42a0      	cmp	r0, r4
 8004102:	d10b      	bne.n	800411c <_free_r+0x74>
 8004104:	6820      	ldr	r0, [r4, #0]
 8004106:	4401      	add	r1, r0
 8004108:	1858      	adds	r0, r3, r1
 800410a:	4282      	cmp	r2, r0
 800410c:	6019      	str	r1, [r3, #0]
 800410e:	d1dd      	bne.n	80040cc <_free_r+0x24>
 8004110:	6810      	ldr	r0, [r2, #0]
 8004112:	6852      	ldr	r2, [r2, #4]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	4401      	add	r1, r0
 8004118:	6019      	str	r1, [r3, #0]
 800411a:	e7d7      	b.n	80040cc <_free_r+0x24>
 800411c:	d902      	bls.n	8004124 <_free_r+0x7c>
 800411e:	230c      	movs	r3, #12
 8004120:	602b      	str	r3, [r5, #0]
 8004122:	e7d3      	b.n	80040cc <_free_r+0x24>
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	1821      	adds	r1, r4, r0
 8004128:	428a      	cmp	r2, r1
 800412a:	bf04      	itt	eq
 800412c:	6811      	ldreq	r1, [r2, #0]
 800412e:	6852      	ldreq	r2, [r2, #4]
 8004130:	6062      	str	r2, [r4, #4]
 8004132:	bf04      	itt	eq
 8004134:	1809      	addeq	r1, r1, r0
 8004136:	6021      	streq	r1, [r4, #0]
 8004138:	605c      	str	r4, [r3, #4]
 800413a:	e7c7      	b.n	80040cc <_free_r+0x24>
 800413c:	bd38      	pop	{r3, r4, r5, pc}
 800413e:	bf00      	nop
 8004140:	20000160 	.word	0x20000160

08004144 <__malloc_lock>:
 8004144:	4770      	bx	lr

08004146 <__malloc_unlock>:
 8004146:	4770      	bx	lr

08004148 <_init>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	bf00      	nop
 800414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414e:	bc08      	pop	{r3}
 8004150:	469e      	mov	lr, r3
 8004152:	4770      	bx	lr

08004154 <_fini>:
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004156:	bf00      	nop
 8004158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415a:	bc08      	pop	{r3}
 800415c:	469e      	mov	lr, r3
 800415e:	4770      	bx	lr
