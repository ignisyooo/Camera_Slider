
Slider_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b8c  08003b8c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b8c  08003b8c  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b8c  08003b8c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b90  08003b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08003b94  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000110  08003ca0  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003ca0  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f86a  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260f  00000000  00000000  0002f9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00031fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00032d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d8a1  00000000  00000000  00033970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc28  00000000  00000000  00051211  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ac0f8  00000000  00000000  0005de39  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00109f31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000367c  00000000  00000000  00109fac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000110 	.word	0x20000110
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b3c 	.word	0x08003b3c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000114 	.word	0x20000114
 80001d0:	08003b3c 	.word	0x08003b3c

080001d4 <HAL_TIM_PeriodElapsedCallback>:
#include "Objects.h"
#include "main.h"



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
static MotorErr retval = MOTOR_OK;
	for (int i = 0; i < MOTORS_NUM - 2; i++) {
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e011      	b.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x32>
		if(MOTOR_OK == retval)
 80001e2:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d10a      	bne.n	8000200 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			retval=motorRun(&Motor_set[i]);
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	01db      	lsls	r3, r3, #7
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80001f0:	4413      	add	r3, r2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 facc 	bl	8000790 <motorRun>
 80001f8:	4603      	mov	r3, r0
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MOTORS_NUM - 2; i++) {
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	3301      	adds	r3, #1
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	2b00      	cmp	r3, #0
 800020a:	ddea      	ble.n	80001e2 <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000012c 	.word	0x2000012c
 8000218:	20000130 	.word	0x20000130

0800021c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LIMIT_SWITCH_Pin) {
 8000226:	88fb      	ldrh	r3, [r7, #6]
 8000228:	2b04      	cmp	r3, #4
 800022a:	d10f      	bne.n	800024c <HAL_GPIO_EXTI_Callback+0x30>
		for (int i = 0; i < MOTORS_NUM; i++) {
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e009      	b.n	8000246 <HAL_GPIO_EXTI_Callback+0x2a>
			motorStop(Motor_set + i);
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	01db      	lsls	r3, r3, #7
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <HAL_GPIO_EXTI_Callback+0x38>)
 8000238:	4413      	add	r3, r2
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fa82 	bl	8000744 <motorStop>
		for (int i = 0; i < MOTORS_NUM; i++) {
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	3301      	adds	r3, #1
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	2b02      	cmp	r3, #2
 800024a:	ddf2      	ble.n	8000232 <HAL_GPIO_EXTI_Callback+0x16>
		}
	}
}
 800024c:	bf00      	nop
 800024e:	3710      	adds	r7, #16
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000130 	.word	0x20000130

08000258 <add_motors>:
				},
};


void add_motors(Motor_T *sett)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	sett[0]=motor1;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <add_motors+0x34>)
 8000264:	4618      	mov	r0, r3
 8000266:	4611      	mov	r1, r2
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	461a      	mov	r2, r3
 800026c:	f003 fc52 	bl	8003b14 <memcpy>
	sett[1]=motor2;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3380      	adds	r3, #128	; 0x80
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <add_motors+0x38>)
 8000276:	4618      	mov	r0, r3
 8000278:	4611      	mov	r1, r2
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	461a      	mov	r2, r3
 800027e:	f003 fc49 	bl	8003b14 <memcpy>
	//sett[2]=&motor3;
}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000000 	.word	0x20000000
 8000290:	20000080 	.word	0x20000080

08000294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002aa:	4b44      	ldr	r3, [pc, #272]	; (80003bc <MX_GPIO_Init+0x128>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a43      	ldr	r2, [pc, #268]	; (80003bc <MX_GPIO_Init+0x128>)
 80002b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b4:	6153      	str	r3, [r2, #20]
 80002b6:	4b41      	ldr	r3, [pc, #260]	; (80003bc <MX_GPIO_Init+0x128>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002be:	613b      	str	r3, [r7, #16]
 80002c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b3e      	ldr	r3, [pc, #248]	; (80003bc <MX_GPIO_Init+0x128>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a3d      	ldr	r2, [pc, #244]	; (80003bc <MX_GPIO_Init+0x128>)
 80002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002cc:	6153      	str	r3, [r2, #20]
 80002ce:	4b3b      	ldr	r3, [pc, #236]	; (80003bc <MX_GPIO_Init+0x128>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002da:	4b38      	ldr	r3, [pc, #224]	; (80003bc <MX_GPIO_Init+0x128>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a37      	ldr	r2, [pc, #220]	; (80003bc <MX_GPIO_Init+0x128>)
 80002e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	4b35      	ldr	r3, [pc, #212]	; (80003bc <MX_GPIO_Init+0x128>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f2:	4b32      	ldr	r3, [pc, #200]	; (80003bc <MX_GPIO_Init+0x128>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a31      	ldr	r2, [pc, #196]	; (80003bc <MX_GPIO_Init+0x128>)
 80002f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b2f      	ldr	r3, [pc, #188]	; (80003bc <MX_GPIO_Init+0x128>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_MS1_Pin|MOTOR2_STEP_Pin|MOTOR2_DIR_Pin|MOTOR1_STEP_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f000 ffdc 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800031e:	4828      	ldr	r0, [pc, #160]	; (80003c0 <MX_GPIO_Init+0x12c>)
 8000320:	f000 ffd6 	bl	80012d0 <HAL_GPIO_WritePin>
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f24c 0103 	movw	r1, #49155	; 0xc003
 800032a:	4826      	ldr	r0, [pc, #152]	; (80003c4 <MX_GPIO_Init+0x130>)
 800032c:	f000 ffd0 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR2_MS1_Pin|MOTOR2_STEP_Pin|MOTOR2_DIR_Pin|MOTOR1_STEP_Pin;
 8000330:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2300      	movs	r3, #0
 8000340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f000 fe36 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000350:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000354:	617b      	str	r3, [r7, #20]
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2300      	movs	r3, #0
 8000360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	4619      	mov	r1, r3
 8000368:	4815      	ldr	r0, [pc, #84]	; (80003c0 <MX_GPIO_Init+0x12c>)
 800036a:	f000 fe27 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin;
 800036e:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	480f      	ldr	r0, [pc, #60]	; (80003c4 <MX_GPIO_Init+0x130>)
 8000388:	f000 fe18 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_Pin;
 800038c:	2304      	movs	r3, #4
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <MX_GPIO_Init+0x134>)
 8000392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000394:	2302      	movs	r3, #2
 8000396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	4619      	mov	r1, r3
 800039e:	4809      	ldr	r0, [pc, #36]	; (80003c4 <MX_GPIO_Init+0x130>)
 80003a0:	f000 fe0c 	bl	8000fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	2008      	movs	r0, #8
 80003aa:	f000 fd92 	bl	8000ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80003ae:	2008      	movs	r0, #8
 80003b0:	f000 fdab 	bl	8000f0a <HAL_NVIC_EnableIRQ>

}
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	; 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	48000800 	.word	0x48000800
 80003c4:	48000400 	.word	0x48000400
 80003c8:	10110000 	.word	0x10110000

080003cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d2:	f000 fc3d 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d6:	f000 f827 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003da:	f7ff ff5b 	bl	8000294 <MX_GPIO_Init>
  MX_TIM6_Init();
 80003de:	f000 fb35 	bl	8000a4c <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80003e2:	f000 fb8f 	bl	8000b04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	add_motors(Motor_set);
 80003e6:	480e      	ldr	r0, [pc, #56]	; (8000420 <main+0x54>)
 80003e8:	f7ff ff36 	bl	8000258 <add_motors>

	for (int i = 0; i < MOTORS_NUM - 2; i++) {
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	e009      	b.n	8000406 <main+0x3a>
		Motor_Init(&Motor_set[i]);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	01db      	lsls	r3, r3, #7
 80003f6:	4a0a      	ldr	r2, [pc, #40]	; (8000420 <main+0x54>)
 80003f8:	4413      	add	r3, r2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f960 	bl	80006c0 <Motor_Init>
	for (int i = 0; i < MOTORS_NUM - 2; i++) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3301      	adds	r3, #1
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b00      	cmp	r3, #0
 800040a:	ddf2      	ble.n	80003f2 <main+0x26>
	}
	set(&Motor_set[0]);
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <main+0x54>)
 800040e:	f000 fa82 	bl	8000916 <set>
	motorStartMove(&Motor_set[0]);
 8000412:	4803      	ldr	r0, [pc, #12]	; (8000420 <main+0x54>)
 8000414:	f000 fa47 	bl	80008a6 <motorStartMove>

	HAL_TIM_Base_Start_IT(&htim6);
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <main+0x58>)
 800041a:	f002 fb1f 	bl	8002a5c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800041e:	e7fe      	b.n	800041e <main+0x52>
 8000420:	20000130 	.word	0x20000130
 8000424:	200002b4 	.word	0x200002b4

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b0a6      	sub	sp, #152	; 0x98
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000432:	2228      	movs	r2, #40	; 0x28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f003 fb77 	bl	8003b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2258      	movs	r2, #88	; 0x58
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f003 fb69 	bl	8003b2a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000458:	2301      	movs	r3, #1
 800045a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800045c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000460:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000462:	2301      	movs	r3, #1
 8000464:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000466:	2302      	movs	r3, #2
 8000468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000470:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000474:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000486:	4618      	mov	r0, r3
 8000488:	f000 ff52 	bl	8001330 <HAL_RCC_OscConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000492:	f000 f827 	bl	80004e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	230f      	movs	r3, #15
 8000498:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	2302      	movs	r3, #2
 800049c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004b0:	2102      	movs	r1, #2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fe52 	bl	800215c <HAL_RCC_ClockConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004be:	f000 f811 	bl	80004e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80004c2:	2304      	movs	r3, #4
 80004c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4618      	mov	r0, r3
 80004ce:	f002 f87b 	bl	80025c8 <HAL_RCCEx_PeriphCLKConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004d8:	f000 f804 	bl	80004e4 <Error_Handler>
  }
}
 80004dc:	bf00      	nop
 80004de:	3798      	adds	r7, #152	; 0x98
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <Motor_PinMode>:
 * 4 -> 1/16 steep
 *
 * While init mircosteep is set to 0 ( Full steep)
 ********************************************/

void Motor_PinMode(Motor_T *sett) {
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6998      	ldr	r0, [r3, #24]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	8b99      	ldrh	r1, [r3, #28]
			(sett->flags.isOn) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 800050e:	461a      	mov	r2, r3
 8000510:	f000 fede 	bl	80012d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	8899      	ldrh	r1, [r3, #4]
			(sett->flags.reset) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2b00      	cmp	r3, #0
 800052a:	bf0c      	ite	eq
 800052c:	2301      	moveq	r3, #1
 800052e:	2300      	movne	r3, #0
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	f000 fecc 	bl	80012d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6898      	ldr	r0, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	8999      	ldrh	r1, [r3, #12]
			(sett->flags.sleep) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	bf0c      	ite	eq
 8000550:	2301      	moveq	r3, #1
 8000552:	2300      	movne	r3, #0
 8000554:	b2db      	uxtb	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	f000 feba 	bl	80012d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6918      	ldr	r0, [r3, #16]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	8a99      	ldrh	r1, [r3, #20]
			(sett->flags.direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800056a:	08db      	lsrs	r3, r3, #3
 800056c:	b2db      	uxtb	r3, r3
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 8000574:	461a      	mov	r2, r3
 8000576:	f000 feab 	bl	80012d0 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <Motor_MicroPinSet>:

MotorErr Motor_MicroPinSet(Motor_T *sett) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	MotorErr retValue = MOTOR_OK;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
	switch (sett->device.microstep) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000596:	2b04      	cmp	r3, #4
 8000598:	f200 808b 	bhi.w	80006b2 <Motor_MicroPinSet+0x12e>
 800059c:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <Motor_MicroPinSet+0x20>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	080005b9 	.word	0x080005b9
 80005a8:	080005eb 	.word	0x080005eb
 80005ac:	0800061d 	.word	0x0800061d
 80005b0:	0800064f 	.word	0x0800064f
 80005b4:	08000681 	.word	0x08000681
	case 0:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6a18      	ldr	r0, [r3, #32]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	f000 fe84 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	f000 fe7c 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80005e0:	2200      	movs	r2, #0
 80005e2:	4619      	mov	r1, r3
 80005e4:	f000 fe74 	bl	80012d0 <HAL_GPIO_WritePin>
		break;
 80005e8:	e065      	b.n	80006b6 <Motor_MicroPinSet+0x132>
	case 1:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6a18      	ldr	r0, [r3, #32]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005f2:	2201      	movs	r2, #1
 80005f4:	4619      	mov	r1, r3
 80005f6:	f000 fe6b 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f000 fe63 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	f000 fe5b 	bl	80012d0 <HAL_GPIO_WritePin>
		break;
 800061a:	e04c      	b.n	80006b6 <Motor_MicroPinSet+0x132>
	case 2:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6a18      	ldr	r0, [r3, #32]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000624:	2200      	movs	r2, #0
 8000626:	4619      	mov	r1, r3
 8000628:	f000 fe52 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000634:	2201      	movs	r2, #1
 8000636:	4619      	mov	r1, r3
 8000638:	f000 fe4a 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	f000 fe42 	bl	80012d0 <HAL_GPIO_WritePin>
		break;
 800064c:	e033      	b.n	80006b6 <Motor_MicroPinSet+0x132>
	case 3:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a18      	ldr	r0, [r3, #32]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	f000 fe39 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	f000 fe31 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	f000 fe29 	bl	80012d0 <HAL_GPIO_WritePin>
		break;
 800067e:	e01a      	b.n	80006b6 <Motor_MicroPinSet+0x132>

	case 4:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6a18      	ldr	r0, [r3, #32]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f000 fe20 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	f000 fe18 	bl	80012d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_SET);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	f000 fe10 	bl	80012d0 <HAL_GPIO_WritePin>
		break;
 80006b0:	e001      	b.n	80006b6 <Motor_MicroPinSet+0x132>
	default:
		retValue = MOTOR_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
	}
	return retValue;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Motor_Init>:

void Motor_Init(Motor_T *sett) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	sett->flags.isOn = 0;
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80006ce:	f36f 0300 	bfc	r3, #0, #1
 80006d2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.reset = 0;
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80006dc:	f36f 0341 	bfc	r3, #1, #1
 80006e0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.direction = CWC;
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80006ea:	f36f 03c3 	bfc	r3, #3, #1
 80006ee:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.stepPhase = LOW;
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000706:	f36f 1304 	bfc	r3, #4, #1
 800070a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	sett->counter.pulse = 0;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	87da      	strh	r2, [r3, #62]	; 0x3e
	sett->counter.stepLeft = 0;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	879a      	strh	r2, [r3, #60]	; 0x3c
	sett->device.positionStart = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	64da      	str	r2, [r3, #76]	; 0x4c
	sett->device.points_num=1;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2201      	movs	r2, #1
 8000724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	sett->device.microstep = 0;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Motor_PinMode(sett);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff fede 	bl	80004f2 <Motor_PinMode>
	Motor_MicroPinSet(sett);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff24 	bl	8000584 <Motor_MicroPinSet>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <motorStop>:

MotorErr motorStop(Motor_T *sett)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]

	if(sett->flags.reset)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <motorStop+0x20>
	{
		return MOTOR_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	e011      	b.n	8000788 <motorStop+0x44>
	}

	sett->flags.isOn = 0;
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800076a:	f36f 0300 	bfc	r3, #0, #1
 800076e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	Motor_PinMode(sett);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff feb6 	bl	80004f2 <Motor_PinMode>

	return retval;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <motorRun>:
MotorErr motorRun(Motor_T *sett)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
	if(!sett->flags.reset && !sett->flags.sleep)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d173      	bne.n	8000894 <motorRun+0x104>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d16b      	bne.n	8000894 <motorRun+0x104>
	{
		--(sett->counter.changeTime);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80007c0:	3b01      	subs	r3, #1
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	875a      	strh	r2, [r3, #58]	; 0x3a
		if(sett->counter.changeTime<=0)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d164      	bne.n	800089a <motorRun+0x10a>
		{
			sett->counter.changeTime = sett->counter.pulse;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	875a      	strh	r2, [r3, #58]	; 0x3a
			--(sett->counter.stepLeft);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80007dc:	3b01      	subs	r3, #1
 80007de:	b29a      	uxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	879a      	strh	r2, [r3, #60]	; 0x3c

			if(sett->counter.stepLeft<=0)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d10b      	bne.n	8000804 <motorRun+0x74>
			{
				sett->flags.isOn = 0;
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80007f2:	f36f 0300 	bfc	r3, #0, #1
 80007f6:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				motorStop(sett);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffa2 	bl	8000744 <motorStop>
				return MOTOR_INTERRUPT_ERROR;
 8000800:	2302      	movs	r3, #2
 8000802:	e04c      	b.n	800089e <motorRun+0x10e>
			}

			switch(sett->flags.stepPhase)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800080a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d010      	beq.n	8000836 <motorRun+0xa6>
 8000814:	2b01      	cmp	r3, #1
 8000816:	d134      	bne.n	8000882 <motorRun+0xf2>
			{
			case HIGH:
				sett->flags.stepPhase = LOW;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800081e:	f36f 1304 	bfc	r3, #4, #1
 8000822:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 0;
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800082c:	f36f 0300 	bfc	r3, #0, #1
 8000830:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				break;
 8000834:	e027      	b.n	8000886 <motorRun+0xf6>
			case LOW:
				sett->flags.stepPhase = HIGH;
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 1;
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				if(sett->flags.direction == CWC)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d107      	bne.n	8000872 <motorRun+0xe2>
				{
					sett->data.position -= sett->device.stepSize;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	651a      	str	r2, [r3, #80]	; 0x50
				}
				else
				{
					sett->data.position += sett->device.stepSize;
				}
				break;
 8000870:	e009      	b.n	8000886 <motorRun+0xf6>
					sett->data.position += sett->device.stepSize;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	441a      	add	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	651a      	str	r2, [r3, #80]	; 0x50
				break;
 8000880:	e001      	b.n	8000886 <motorRun+0xf6>
			default:
				retval = MOTOR_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
			}
			if(retval == MOTOR_OK)
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d106      	bne.n	800089a <motorRun+0x10a>
			{
				Motor_PinMode(sett);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fe30 	bl	80004f2 <Motor_PinMode>
		if(sett->counter.changeTime<=0)
 8000892:	e002      	b.n	800089a <motorRun+0x10a>
			}
		}
	}
	else
	{
		retval = MOTOR_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e000      	b.n	800089c <motorRun+0x10c>
		if(sett->counter.changeTime<=0)
 800089a:	bf00      	nop
	}

	return retval;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <motorStartMove>:
MotorErr motorStartMove(Motor_T *sett)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
	if(sett->counter.stepLeft <=0 || sett->counter.pulse <=0)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d003      	beq.n	80008be <motorStartMove+0x18>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d101      	bne.n	80008c2 <motorStartMove+0x1c>
	{
		return MOTOR_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e025      	b.n	800090e <motorStartMove+0x68>
	}

	if(sett->flags.reset)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <motorStartMove+0x30>
	{
		return MOTOR_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e01b      	b.n	800090e <motorStartMove+0x68>
	}

	if(sett->flags.stepPhase != LOW)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <motorStartMove+0x44>
	{
		return MOTOR_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e011      	b.n	800090e <motorStartMove+0x68>
	}

	sett->flags.sleep = 0;
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80008f0:	f36f 0382 	bfc	r3, #2, #1
 80008f4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 1;
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	Motor_PinMode(sett);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fdf3 	bl	80004f2 <Motor_PinMode>

	return MOTOR_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <set>:
 *      Author: rzesz
 */
#include "setter.h"

void set(Motor_T *sett)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	sett->counter.pulse = 1;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2201      	movs	r2, #1
 8000922:	87da      	strh	r2, [r3, #62]	; 0x3e
	sett->counter.changeTime =sett->counter.pulse;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	875a      	strh	r2, [r3, #58]	; 0x3a
	sett->counter.stepLeft = 2* 1000;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000932:	879a      	strh	r2, [r3, #60]	; 0x3c
	Motor_PinMode(sett);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fddc 	bl	80004f2 <Motor_PinMode>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_MspInit+0x44>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_MspInit+0x44>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_MspInit+0x44>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x44>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x44>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x44>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f97c 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80009ec:	2004      	movs	r0, #4
 80009ee:	f000 fc87 	bl	8001300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <USART3_IRQHandler+0x10>)
 80009fe:	f002 fb35 	bl	800306c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002f4 	.word	0x200002f4

08000a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <TIM6_DAC_IRQHandler+0x10>)
 8000a12:	f002 f84d 	bl	8002ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200002b4 	.word	0x200002b4

08000a20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <SystemInit+0x28>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <SystemInit+0x28>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SystemInit+0x28>)
 8000a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_TIM6_Init+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a64:	2247      	movs	r2, #71	; 0x47
 8000a66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a7e:	f001 ffc1 	bl	8002a04 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a88:	f7ff fd2c 	bl	80004e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a9a:	f002 f9ef 	bl	8002e7c <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000aa4:	f7ff fd1e 	bl	80004e4 <Error_Handler>
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002b4 	.word	0x200002b4
 8000ab4:	40001000 	.word	0x40001000

08000ab8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_TIM_Base_MspInit+0x44>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d113      	bne.n	8000af2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_TIM_Base_MspInit+0x48>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <HAL_TIM_Base_MspInit+0x48>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_TIM_Base_MspInit+0x48>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2036      	movs	r0, #54	; 0x36
 8000ae8:	f000 f9f3 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aec:	2036      	movs	r0, #54	; 0x36
 8000aee:	f000 fa0c 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40001000 	.word	0x40001000
 8000b00:	40021000 	.word	0x40021000

08000b04 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <MX_USART3_UART_Init+0x5c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b48:	f002 fa42 	bl	8002fd0 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b52:	f7ff fcc7 	bl	80004e4 <Error_Handler>
  }

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200002f4 	.word	0x200002f4
 8000b60:	40004800 	.word	0x40004800

08000b64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d130      	bne.n	8000be8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba8:	6153      	str	r3, [r2, #20]
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <HAL_UART_MspInit+0x94>)
 8000bd4:	f000 f9f2 	bl	8000fbc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2027      	movs	r0, #39	; 0x27
 8000bde:	f000 f978 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000be2:	2027      	movs	r0, #39	; 0x27
 8000be4:	f000 f991 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40004800 	.word	0x40004800
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000400 	.word	0x48000400

08000bfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c02:	e003      	b.n	8000c0c <LoopCopyDataInit>

08000c04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c0a:	3104      	adds	r1, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c14:	d3f6      	bcc.n	8000c04 <CopyDataInit>
	ldr	r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c18:	e002      	b.n	8000c20 <LoopFillZerobss>

08000c1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c1c:	f842 3b04 	str.w	r3, [r2], #4

08000c20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <LoopForever+0x16>)
	cmp	r2, r3
 8000c22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c24:	d3f9      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c26:	f7ff fefb 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f002 ff4f 	bl	8003acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c2e:	f7ff fbcd 	bl	80003cc <main>

08000c32 <LoopForever>:

LoopForever:
    b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c34:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c38:	08003b94 	.word	0x08003b94
	ldr	r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c40:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 8000c44:	20000110 	.word	0x20000110
	ldr	r3, = _ebss
 8000c48:	20000378 	.word	0x20000378

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x28>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f92b 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fe6a 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f943 	bl	8000f26 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f90b 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000100 	.word	0x20000100
 8000cd4:	20000108 	.word	0x20000108
 8000cd8:	20000104 	.word	0x20000104

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000108 	.word	0x20000108
 8000d00:	20000374 	.word	0x20000374

08000d04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000374 	.word	0x20000374

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff29 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff3e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff31 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d005      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2204      	movs	r2, #4
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e027      	b.n	8000fb0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 020e 	bic.w	r2, r2, #14
 8000f6e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0201 	bic.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	4798      	blx	r3
    } 
  }
  return status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	e160      	b.n	800128e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 8152 	beq.w	8001288 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d00b      	beq.n	8001004 <HAL_GPIO_Init+0x48>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff8:	2b11      	cmp	r3, #17
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b12      	cmp	r3, #18
 8001002:	d130      	bne.n	8001066 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103a:	2201      	movs	r2, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	f003 0201 	and.w	r2, r3, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0xea>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d123      	bne.n	80010ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	6939      	ldr	r1, [r7, #16]
 80010ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0203 	and.w	r2, r3, #3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 80ac 	beq.w	8001288 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001130:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <HAL_GPIO_Init+0x2f0>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a5d      	ldr	r2, [pc, #372]	; (80012ac <HAL_GPIO_Init+0x2f0>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <HAL_GPIO_Init+0x2f0>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001148:	4a59      	ldr	r2, [pc, #356]	; (80012b0 <HAL_GPIO_Init+0x2f4>)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001172:	d025      	beq.n	80011c0 <HAL_GPIO_Init+0x204>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_GPIO_Init+0x2f8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d01f      	beq.n	80011bc <HAL_GPIO_Init+0x200>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_GPIO_Init+0x2fc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d019      	beq.n	80011b8 <HAL_GPIO_Init+0x1fc>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a4d      	ldr	r2, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d013      	beq.n	80011b4 <HAL_GPIO_Init+0x1f8>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d00d      	beq.n	80011b0 <HAL_GPIO_Init+0x1f4>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_GPIO_Init+0x308>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d007      	beq.n	80011ac <HAL_GPIO_Init+0x1f0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a4a      	ldr	r2, [pc, #296]	; (80012c8 <HAL_GPIO_Init+0x30c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d101      	bne.n	80011a8 <HAL_GPIO_Init+0x1ec>
 80011a4:	2306      	movs	r3, #6
 80011a6:	e00c      	b.n	80011c2 <HAL_GPIO_Init+0x206>
 80011a8:	2307      	movs	r3, #7
 80011aa:	e00a      	b.n	80011c2 <HAL_GPIO_Init+0x206>
 80011ac:	2305      	movs	r3, #5
 80011ae:	e008      	b.n	80011c2 <HAL_GPIO_Init+0x206>
 80011b0:	2304      	movs	r3, #4
 80011b2:	e006      	b.n	80011c2 <HAL_GPIO_Init+0x206>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e004      	b.n	80011c2 <HAL_GPIO_Init+0x206>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e002      	b.n	80011c2 <HAL_GPIO_Init+0x206>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <HAL_GPIO_Init+0x206>
 80011c0:	2300      	movs	r3, #0
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	f002 0203 	and.w	r2, r2, #3
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	4093      	lsls	r3, r2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d2:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_GPIO_Init+0x2f4>)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e0:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <HAL_GPIO_Init+0x310>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001204:	4a31      	ldr	r2, [pc, #196]	; (80012cc <HAL_GPIO_Init+0x310>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_GPIO_Init+0x310>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800122e:	4a27      	ldr	r2, [pc, #156]	; (80012cc <HAL_GPIO_Init+0x310>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_GPIO_Init+0x310>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <HAL_GPIO_Init+0x310>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_GPIO_Init+0x310>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_GPIO_Init+0x310>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	f47f ae97 	bne.w	8000fcc <HAL_GPIO_Init+0x10>
  }
}
 800129e:	bf00      	nop
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	48000400 	.word	0x48000400
 80012b8:	48000800 	.word	0x48000800
 80012bc:	48000c00 	.word	0x48000c00
 80012c0:	48001000 	.word	0x48001000
 80012c4:	48001400 	.word	0x48001400
 80012c8:	48001800 	.word	0x48001800
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	4618      	mov	r0, r3
 8001320:	f7fe ff7c 	bl	800021c <HAL_GPIO_EXTI_Callback>
  }
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001336:	af00      	add	r7, sp, #0
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	f000 bf01 	b.w	800214c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 8160 	beq.w	800161a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800135a:	4bae      	ldr	r3, [pc, #696]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00c      	beq.n	8001380 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001366:	4bab      	ldr	r3, [pc, #684]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b08      	cmp	r3, #8
 8001370:	d159      	bne.n	8001426 <HAL_RCC_OscConfig+0xf6>
 8001372:	4ba8      	ldr	r3, [pc, #672]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800137a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137e:	d152      	bne.n	8001426 <HAL_RCC_OscConfig+0xf6>
 8001380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001384:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001394:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	fab3 f383 	clz	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d102      	bne.n	80013b2 <HAL_RCC_OscConfig+0x82>
 80013ac:	4b99      	ldr	r3, [pc, #612]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0xae>
 80013b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80013c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013ce:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013da:	4b8e      	ldr	r3, [pc, #568]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013e2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80013e6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80013ea:	fa92 f2a2 	rbit	r2, r2
 80013ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80013f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013f6:	fab2 f282 	clz	r2, r2
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	f042 0220 	orr.w	r2, r2, #32
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f002 021f 	and.w	r2, r2, #31
 8001406:	2101      	movs	r1, #1
 8001408:	fa01 f202 	lsl.w	r2, r1, r2
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8102 	beq.w	8001618 <HAL_RCC_OscConfig+0x2e8>
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 80fc 	bne.w	8001618 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	f000 be93 	b.w	800214c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001430:	d106      	bne.n	8001440 <HAL_RCC_OscConfig+0x110>
 8001432:	4b78      	ldr	r3, [pc, #480]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a77      	ldr	r2, [pc, #476]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e030      	b.n	80014a2 <HAL_RCC_OscConfig+0x172>
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x134>
 800144a:	4b72      	ldr	r3, [pc, #456]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a71      	ldr	r2, [pc, #452]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b6f      	ldr	r3, [pc, #444]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a6e      	ldr	r2, [pc, #440]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 800145c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e01e      	b.n	80014a2 <HAL_RCC_OscConfig+0x172>
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800146e:	d10c      	bne.n	800148a <HAL_RCC_OscConfig+0x15a>
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a67      	ldr	r2, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b65      	ldr	r3, [pc, #404]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a64      	ldr	r2, [pc, #400]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e00b      	b.n	80014a2 <HAL_RCC_OscConfig+0x172>
 800148a:	4b62      	ldr	r3, [pc, #392]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a61      	ldr	r2, [pc, #388]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a5e      	ldr	r2, [pc, #376]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 800149c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d059      	beq.n	8001560 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc2a 	bl	8000d04 <HAL_GetTick>
 80014b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b6:	f7ff fc25 	bl	8000d04 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d902      	bls.n	80014cc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f000 be40 	b.w	800214c <HAL_RCC_OscConfig+0xe1c>
 80014cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80014e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <HAL_RCC_OscConfig+0x1ce>
 80014f8:	4b46      	ldr	r3, [pc, #280]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x1fa>
 80014fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001502:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001516:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800151a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001526:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001532:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001536:	fa92 f2a2 	rbit	r2, r2
 800153a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800153e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001542:	fab2 f282 	clz	r2, r2
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f002 021f 	and.w	r2, r2, #31
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0ab      	beq.n	80014b6 <HAL_RCC_OscConfig+0x186>
 800155e:	e05c      	b.n	800161a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fbd0 	bl	8000d04 <HAL_GetTick>
 8001564:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156a:	f7ff fbcb 	bl	8000d04 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d902      	bls.n	8001580 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	f000 bde6 	b.w	800214c <HAL_RCC_OscConfig+0xe1c>
 8001580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001584:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001594:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d102      	bne.n	80015b2 <HAL_RCC_OscConfig+0x282>
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	e015      	b.n	80015de <HAL_RCC_OscConfig+0x2ae>
 80015b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80015c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_RCC_OscConfig+0x2e4>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80015e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80015ea:	fa92 f2a2 	rbit	r2, r2
 80015ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80015f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015f6:	fab2 f282 	clz	r2, r2
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	f042 0220 	orr.w	r2, r2, #32
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	f002 021f 	and.w	r2, r2, #31
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ab      	bne.n	800156a <HAL_RCC_OscConfig+0x23a>
 8001612:	e002      	b.n	800161a <HAL_RCC_OscConfig+0x2ea>
 8001614:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 8170 	beq.w	800190a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800162a:	4bd0      	ldr	r3, [pc, #832]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00c      	beq.n	8001650 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001636:	4bcd      	ldr	r3, [pc, #820]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b08      	cmp	r3, #8
 8001640:	d16d      	bne.n	800171e <HAL_RCC_OscConfig+0x3ee>
 8001642:	4bca      	ldr	r3, [pc, #808]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800164a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800164e:	d166      	bne.n	800171e <HAL_RCC_OscConfig+0x3ee>
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001662:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_RCC_OscConfig+0x350>
 800167a:	4bbc      	ldr	r3, [pc, #752]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	e013      	b.n	80016a8 <HAL_RCC_OscConfig+0x378>
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001698:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016a4:	4bb1      	ldr	r3, [pc, #708]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	2202      	movs	r2, #2
 80016aa:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80016ae:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80016b2:	fa92 f2a2 	rbit	r2, r2
 80016b6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80016ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016be:	fab2 f282 	clz	r2, r2
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	f042 0220 	orr.w	r2, r2, #32
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	f002 021f 	and.w	r2, r2, #31
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <HAL_RCC_OscConfig+0x3ba>
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d002      	beq.n	80016ea <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f000 bd31 	b.w	800214c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4ba0      	ldr	r3, [pc, #640]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	21f8      	movs	r1, #248	; 0xf8
 80016fa:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001702:	fa91 f1a1 	rbit	r1, r1
 8001706:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800170a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800170e:	fab1 f181 	clz	r1, r1
 8001712:	b2c9      	uxtb	r1, r1
 8001714:	408b      	lsls	r3, r1
 8001716:	4995      	ldr	r1, [pc, #596]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171c:	e0f5      	b.n	800190a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8085 	beq.w	8001834 <HAL_RCC_OscConfig+0x504>
 800172a:	2301      	movs	r3, #1
 800172c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800173c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800174a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	461a      	mov	r2, r3
 8001752:	2301      	movs	r3, #1
 8001754:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fad5 	bl	8000d04 <HAL_GetTick>
 800175a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fad0 	bl	8000d04 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d902      	bls.n	8001776 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	f000 bceb 	b.w	800214c <HAL_RCC_OscConfig+0xe1c>
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001788:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_OscConfig+0x476>
 80017a0:	4b72      	ldr	r3, [pc, #456]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	e013      	b.n	80017ce <HAL_RCC_OscConfig+0x49e>
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80017b8:	2302      	movs	r3, #2
 80017ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017be:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017ca:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	2202      	movs	r2, #2
 80017d0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80017d8:	fa92 f2a2 	rbit	r2, r2
 80017dc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80017e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017e4:	fab2 f282 	clz	r2, r2
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f042 0220 	orr.w	r2, r2, #32
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f002 021f 	and.w	r2, r2, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0af      	beq.n	8001760 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b5a      	ldr	r3, [pc, #360]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	21f8      	movs	r1, #248	; 0xf8
 8001810:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001818:	fa91 f1a1 	rbit	r1, r1
 800181c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001820:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001824:	fab1 f181 	clz	r1, r1
 8001828:	b2c9      	uxtb	r1, r1
 800182a:	408b      	lsls	r3, r1
 800182c:	494f      	ldr	r1, [pc, #316]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
 8001832:	e06a      	b.n	800190a <HAL_RCC_OscConfig+0x5da>
 8001834:	2301      	movs	r3, #1
 8001836:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001846:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001854:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	461a      	mov	r2, r3
 800185c:	2300      	movs	r3, #0
 800185e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fa50 	bl	8000d04 <HAL_GetTick>
 8001864:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186a:	f7ff fa4b 	bl	8000d04 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d902      	bls.n	8001880 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	f000 bc66 	b.w	800214c <HAL_RCC_OscConfig+0xe1c>
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001892:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0x580>
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e013      	b.n	80018d8 <HAL_RCC_OscConfig+0x5a8>
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_OscConfig+0x63c>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	2202      	movs	r2, #2
 80018da:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80018de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80018e2:	fa92 f2a2 	rbit	r2, r2
 80018e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80018ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018ee:	fab2 f282 	clz	r2, r2
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f042 0220 	orr.w	r2, r2, #32
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f002 021f 	and.w	r2, r2, #31
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1af      	bne.n	800186a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80da 	beq.w	8001ace <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d069      	beq.n	80019f8 <HAL_RCC_OscConfig+0x6c8>
 8001924:	2301      	movs	r3, #1
 8001926:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001936:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_OscConfig+0x640>)
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	461a      	mov	r2, r3
 800194a:	2301      	movs	r3, #1
 800194c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff f9d9 	bl	8000d04 <HAL_GetTick>
 8001952:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e00d      	b.n	8001974 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff f9d4 	bl	8000d04 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d905      	bls.n	8001974 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e3ef      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
 800196c:	40021000 	.word	0x40021000
 8001970:	10908120 	.word	0x10908120
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019a4:	2202      	movs	r2, #2
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	fa93 f2a3 	rbit	r2, r3
 80019b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b8:	4ba4      	ldr	r3, [pc, #656]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 80019ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019c0:	2102      	movs	r1, #2
 80019c2:	6019      	str	r1, [r3, #0]
 80019c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	fa93 f1a3 	rbit	r1, r3
 80019ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019d2:	6019      	str	r1, [r3, #0]
  return result;
 80019d4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0b0      	beq.n	8001958 <HAL_RCC_OscConfig+0x628>
 80019f6:	e06a      	b.n	8001ace <HAL_RCC_OscConfig+0x79e>
 80019f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a0e:	601a      	str	r2, [r3, #0]
  return result;
 8001a10:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a14:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b8c      	ldr	r3, [pc, #560]	; (8001c50 <HAL_RCC_OscConfig+0x920>)
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	461a      	mov	r2, r3
 8001a26:	2300      	movs	r3, #0
 8001a28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f96b 	bl	8000d04 <HAL_GetTick>
 8001a2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a32:	e009      	b.n	8001a48 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff f966 	bl	8000d04 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e381      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
 8001a48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fa93 f2a3 	rbit	r2, r3
 8001a72:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a98:	2102      	movs	r1, #2
 8001a9a:	6019      	str	r1, [r3, #0]
 8001a9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f1a3 	rbit	r1, r3
 8001aa6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aaa:	6019      	str	r1, [r3, #0]
  return result;
 8001aac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1b2      	bne.n	8001a34 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8157 	beq.w	8001d8c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d112      	bne.n	8001b16 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	4a55      	ldr	r2, [pc, #340]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afa:	61d3      	str	r3, [r2, #28]
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_RCC_OscConfig+0x924>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d11a      	bne.n	8001b58 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCC_OscConfig+0x924>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a4b      	ldr	r2, [pc, #300]	; (8001c54 <HAL_RCC_OscConfig+0x924>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f8e9 	bl	8000d04 <HAL_GetTick>
 8001b32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	e009      	b.n	8001b4c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b38:	f7ff f8e4 	bl	8000d04 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b64      	cmp	r3, #100	; 0x64
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e2ff      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_OscConfig+0x924>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0ef      	beq.n	8001b38 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d106      	bne.n	8001b70 <HAL_RCC_OscConfig+0x840>
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6213      	str	r3, [r2, #32]
 8001b6e:	e02f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x8a0>
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x864>
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a30      	ldr	r2, [pc, #192]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	e01d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x8a0>
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x888>
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x8a0>
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d06a      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7ff f893 	bl	8000d04 <HAL_GetTick>
 8001bde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff f88e 	bl	8000d04 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e2a7      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
 8001bfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c00:	2202      	movs	r2, #2
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c18:	2202      	movs	r2, #2
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c2a:	601a      	str	r2, [r3, #0]
  return result;
 8001c2c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d108      	bne.n	8001c58 <HAL_RCC_OscConfig+0x928>
 8001c46:	4b01      	ldr	r3, [pc, #4]	; (8001c4c <HAL_RCC_OscConfig+0x91c>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	e013      	b.n	8001c74 <HAL_RCC_OscConfig+0x944>
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	10908120 	.word	0x10908120
 8001c54:	40007000 	.word	0x40007000
 8001c58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	4bc0      	ldr	r3, [pc, #768]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c78:	2102      	movs	r1, #2
 8001c7a:	6011      	str	r1, [r2, #0]
 8001c7c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	fa92 f1a2 	rbit	r1, r2
 8001c86:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c8a:	6011      	str	r1, [r2, #0]
  return result;
 8001c8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	fab2 f282 	clz	r2, r2
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f002 021f 	and.w	r2, r2, #31
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d09a      	beq.n	8001be4 <HAL_RCC_OscConfig+0x8b4>
 8001cae:	e063      	b.n	8001d78 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff f828 	bl	8000d04 <HAL_GetTick>
 8001cb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb8:	e00b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff f823 	bl	8000d04 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e23c      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
 8001cd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cee:	2202      	movs	r2, #2
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d00:	601a      	str	r2, [r3, #0]
  return result;
 8001d02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_OscConfig+0x9f2>
 8001d1c:	4b95      	ldr	r3, [pc, #596]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	e00d      	b.n	8001d3e <HAL_RCC_OscConfig+0xa0e>
 8001d22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d26:	2202      	movs	r2, #2
 8001d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d42:	2102      	movs	r1, #2
 8001d44:	6011      	str	r1, [r2, #0]
 8001d46:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	fa92 f1a2 	rbit	r1, r2
 8001d50:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d54:	6011      	str	r1, [r2, #0]
  return result;
 8001d56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1a0      	bne.n	8001cba <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d78:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d80:	4b7c      	ldr	r3, [pc, #496]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	4a7b      	ldr	r2, [pc, #492]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 81d9 	beq.w	800214a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d98:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	f000 81a6 	beq.w	80020f2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	f040 811e 	bne.w	8001fee <HAL_RCC_OscConfig+0xcbe>
 8001db2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001db6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dca:	601a      	str	r2, [r3, #0]
  return result;
 8001dcc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dd0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ddc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7fe ff8c 	bl	8000d04 <HAL_GetTick>
 8001dec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	e009      	b.n	8001e06 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe ff87 	bl	8000d04 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e1a2      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
 8001e06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e1e:	601a      	str	r2, [r3, #0]
  return result;
 8001e20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	095b      	lsrs	r3, r3, #5
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d102      	bne.n	8001e40 <HAL_RCC_OscConfig+0xb10>
 8001e3a:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	e01b      	b.n	8001e78 <HAL_RCC_OscConfig+0xb48>
 8001e40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fa93 f2a3 	rbit	r2, r3
 8001e54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e80:	6011      	str	r1, [r2, #0]
 8001e82:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	fa92 f1a2 	rbit	r1, r2
 8001e8c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e90:	6011      	str	r1, [r2, #0]
  return result;
 8001e92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	fab2 f282 	clz	r2, r2
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f042 0220 	orr.w	r2, r2, #32
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f002 021f 	and.w	r2, r2, #31
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d19e      	bne.n	8001df2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	f023 020f 	bic.w	r2, r3, #15
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	492c      	ldr	r1, [pc, #176]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6a19      	ldr	r1, [r3, #32]
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	4925      	ldr	r1, [pc, #148]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
 8001ee4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ee8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001efc:	601a      	str	r2, [r3, #0]
  return result;
 8001efe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f02:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	461a      	mov	r2, r3
 8001f16:	2301      	movs	r3, #1
 8001f18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7fe fef3 	bl	8000d04 <HAL_GetTick>
 8001f1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f22:	e009      	b.n	8001f38 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f24:	f7fe feee 	bl	8000d04 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e109      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
 8001f38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f50:	601a      	str	r2, [r3, #0]
  return result;
 8001f52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCC_OscConfig+0xc48>
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <HAL_RCC_OscConfig+0xc44>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	e01e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xc80>
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4b6a      	ldr	r3, [pc, #424]	; (8002158 <HAL_RCC_OscConfig+0xe28>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fb8:	6011      	str	r1, [r2, #0]
 8001fba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	fa92 f1a2 	rbit	r1, r2
 8001fc4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fc8:	6011      	str	r1, [r2, #0]
  return result;
 8001fca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	fab2 f282 	clz	r2, r2
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	f042 0220 	orr.w	r2, r2, #32
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	f002 021f 	and.w	r2, r2, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d09b      	beq.n	8001f24 <HAL_RCC_OscConfig+0xbf4>
 8001fec:	e0ad      	b.n	800214a <HAL_RCC_OscConfig+0xe1a>
 8001fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002006:	601a      	str	r2, [r3, #0]
  return result;
 8002008:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800200c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002018:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	461a      	mov	r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fe6e 	bl	8000d04 <HAL_GetTick>
 8002028:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202c:	e009      	b.n	8002042 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202e:	f7fe fe69 	bl	8000d04 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e084      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
 8002042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002046:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800204a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f2a3 	rbit	r2, r3
 8002056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800205a:	601a      	str	r2, [r3, #0]
  return result;
 800205c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002060:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_RCC_OscConfig+0xd4c>
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_RCC_OscConfig+0xe28>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	e01b      	b.n	80020b4 <HAL_RCC_OscConfig+0xd84>
 800207c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fa93 f2a3 	rbit	r2, r3
 8002090:	f107 0320 	add.w	r3, r7, #32
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	fa93 f2a3 	rbit	r2, r3
 80020aa:	f107 0318 	add.w	r3, r7, #24
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <HAL_RCC_OscConfig+0xe28>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	f107 0214 	add.w	r2, r7, #20
 80020b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020bc:	6011      	str	r1, [r2, #0]
 80020be:	f107 0214 	add.w	r2, r7, #20
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	fa92 f1a2 	rbit	r1, r2
 80020c8:	f107 0210 	add.w	r2, r7, #16
 80020cc:	6011      	str	r1, [r2, #0]
  return result;
 80020ce:	f107 0210 	add.w	r2, r7, #16
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f002 021f 	and.w	r2, r2, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d19e      	bne.n	800202e <HAL_RCC_OscConfig+0xcfe>
 80020f0:	e02b      	b.n	800214a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e025      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_RCC_OscConfig+0xe28>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_RCC_OscConfig+0xe28>)
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002110:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002114:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	429a      	cmp	r2, r3
 8002120:	d111      	bne.n	8002146 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002122:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002130:	429a      	cmp	r2, r3
 8002132:	d108      	bne.n	8002146 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002134:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002138:	f003 020f 	and.w	r2, r3, #15
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b09e      	sub	sp, #120	; 0x78
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e162      	b.n	800243a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002174:	4b90      	ldr	r3, [pc, #576]	; (80023b8 <HAL_RCC_ClockConfig+0x25c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d910      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b8d      	ldr	r3, [pc, #564]	; (80023b8 <HAL_RCC_ClockConfig+0x25c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0207 	bic.w	r2, r3, #7
 800218a:	498b      	ldr	r1, [pc, #556]	; (80023b8 <HAL_RCC_ClockConfig+0x25c>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_RCC_ClockConfig+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e14a      	b.n	800243a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b82      	ldr	r3, [pc, #520]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	497f      	ldr	r1, [pc, #508]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80dc 	beq.w	8002388 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d13c      	bne.n	8002252 <HAL_RCC_ClockConfig+0xf6>
 80021d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <HAL_RCC_ClockConfig+0xa6>
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	e00f      	b.n	8002222 <HAL_RCC_ClockConfig+0xc6>
 8002202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002206:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	667b      	str	r3, [r7, #100]	; 0x64
 8002210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002214:	663b      	str	r3, [r7, #96]	; 0x60
 8002216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800221e:	4b67      	ldr	r3, [pc, #412]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002226:	65ba      	str	r2, [r7, #88]	; 0x58
 8002228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800222a:	fa92 f2a2 	rbit	r2, r2
 800222e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002232:	fab2 f282 	clz	r2, r2
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	f042 0220 	orr.w	r2, r2, #32
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	f002 021f 	and.w	r2, r2, #31
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f202 	lsl.w	r2, r1, r2
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d17b      	bne.n	8002346 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0f3      	b.n	800243a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d13c      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x178>
 800225a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	095b      	lsrs	r3, r3, #5
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d102      	bne.n	8002284 <HAL_RCC_ClockConfig+0x128>
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	e00f      	b.n	80022a4 <HAL_RCC_ClockConfig+0x148>
 8002284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002288:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	647b      	str	r3, [r7, #68]	; 0x44
 8002292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002296:	643b      	str	r3, [r7, #64]	; 0x40
 8002298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a0:	4b46      	ldr	r3, [pc, #280]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80022aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022b4:	fab2 f282 	clz	r2, r2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	f042 0220 	orr.w	r2, r2, #32
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f002 021f 	and.w	r2, r2, #31
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d13a      	bne.n	8002346 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b2      	b.n	800243a <HAL_RCC_ClockConfig+0x2de>
 80022d4:	2302      	movs	r3, #2
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d102      	bne.n	80022fc <HAL_RCC_ClockConfig+0x1a0>
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	e00d      	b.n	8002318 <HAL_RCC_ClockConfig+0x1bc>
 80022fc:	2302      	movs	r3, #2
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	2302      	movs	r3, #2
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2202      	movs	r2, #2
 800231a:	61ba      	str	r2, [r7, #24]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	fa92 f2a2 	rbit	r2, r2
 8002322:	617a      	str	r2, [r7, #20]
  return result;
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	fab2 f282 	clz	r2, r2
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f042 0220 	orr.w	r2, r2, #32
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f002 021f 	and.w	r2, r2, #31
 8002336:	2101      	movs	r1, #1
 8002338:	fa01 f202 	lsl.w	r2, r1, r2
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e079      	b.n	800243a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	491a      	ldr	r1, [pc, #104]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002358:	f7fe fcd4 	bl	8000d04 <HAL_GetTick>
 800235c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7fe fcd0 	bl	8000d04 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e061      	b.n	800243a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_RCC_ClockConfig+0x260>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 020c 	and.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1eb      	bne.n	8002360 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_ClockConfig+0x25c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d214      	bcs.n	80023c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_RCC_ClockConfig+0x25c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4906      	ldr	r1, [pc, #24]	; (80023b8 <HAL_RCC_ClockConfig+0x25c>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <HAL_RCC_ClockConfig+0x25c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e040      	b.n	800243a <HAL_RCC_ClockConfig+0x2de>
 80023b8:	40022000 	.word	0x40022000
 80023bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCC_ClockConfig+0x2e8>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	491a      	ldr	r1, [pc, #104]	; (8002444 <HAL_RCC_ClockConfig+0x2e8>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <HAL_RCC_ClockConfig+0x2e8>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4912      	ldr	r1, [pc, #72]	; (8002444 <HAL_RCC_ClockConfig+0x2e8>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023fe:	f000 f829 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002402:	4601      	mov	r1, r0
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_RCC_ClockConfig+0x2e8>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240c:	22f0      	movs	r2, #240	; 0xf0
 800240e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	fa92 f2a2 	rbit	r2, r2
 8002416:	60fa      	str	r2, [r7, #12]
  return result;
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	fab2 f282 	clz	r2, r2
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	40d3      	lsrs	r3, r2
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x2ec>)
 8002424:	5cd3      	ldrb	r3, [r2, r3]
 8002426:	fa21 f303 	lsr.w	r3, r1, r3
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_RCC_ClockConfig+0x2f0>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_RCC_ClockConfig+0x2f4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fc22 	bl	8000c7c <HAL_InitTick>
  
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3778      	adds	r7, #120	; 0x78
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	08003b54 	.word	0x08003b54
 800244c:	20000100 	.word	0x20000100
 8002450:	20000104 	.word	0x20000104

08002454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b08b      	sub	sp, #44	; 0x2c
 8002458:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800246e:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d002      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x30>
 800247e:	2b08      	cmp	r3, #8
 8002480:	d003      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x36>
 8002482:	e03f      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002486:	623b      	str	r3, [r7, #32]
      break;
 8002488:	e03f      	b.n	800250a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002490:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002494:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	fa92 f2a2 	rbit	r2, r2
 800249c:	607a      	str	r2, [r7, #4]
  return result;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	fab2 f282 	clz	r2, r2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	40d3      	lsrs	r3, r2
 80024a8:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	220f      	movs	r2, #15
 80024b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	fa92 f2a2 	rbit	r2, r2
 80024c0:	60fa      	str	r2, [r7, #12]
  return result;
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	fab2 f282 	clz	r2, r2
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	40d3      	lsrs	r3, r2
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024dc:	4a0f      	ldr	r2, [pc, #60]	; (800251c <HAL_RCC_GetSysClockFreq+0xc8>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	e007      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024ee:	4a0b      	ldr	r2, [pc, #44]	; (800251c <HAL_RCC_GetSysClockFreq+0xc8>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	623b      	str	r3, [r7, #32]
      break;
 8002502:	e002      	b.n	800250a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002506:	623b      	str	r3, [r7, #32]
      break;
 8002508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250a:	6a3b      	ldr	r3, [r7, #32]
}
 800250c:	4618      	mov	r0, r3
 800250e:	372c      	adds	r7, #44	; 0x2c
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40021000 	.word	0x40021000
 800251c:	007a1200 	.word	0x007a1200
 8002520:	08003b6c 	.word	0x08003b6c
 8002524:	08003b7c 	.word	0x08003b7c

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCC_GetHCLKFreq+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000100 	.word	0x20000100

08002540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002546:	f7ff ffef 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 800254a:	4601      	mov	r1, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002554:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002558:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	fa92 f2a2 	rbit	r2, r2
 8002560:	603a      	str	r2, [r7, #0]
  return result;
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	fab2 f282 	clz	r2, r2
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	40d3      	lsrs	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x40>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	08003b64 	.word	0x08003b64

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800258a:	f7ff ffcd 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 800258e:	4601      	mov	r1, r0
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002598:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800259c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	fa92 f2a2 	rbit	r2, r2
 80025a4:	603a      	str	r2, [r7, #0]
  return result;
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	40d3      	lsrs	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025b2:	5cd3      	ldrb	r3, [r2, r3]
 80025b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	08003b64 	.word	0x08003b64

080025c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b092      	sub	sp, #72	; 0x48
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80d7 	beq.w	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ec:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10e      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4a4a      	ldr	r2, [pc, #296]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002602:	61d3      	str	r3, [r2, #28]
 8002604:	4b48      	ldr	r3, [pc, #288]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b45      	ldr	r3, [pc, #276]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b42      	ldr	r3, [pc, #264]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a41      	ldr	r2, [pc, #260]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7fe fb69 	bl	8000d04 <HAL_GetTick>
 8002632:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7fe fb65 	bl	8000d04 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b64      	cmp	r3, #100	; 0x64
 8002642:	d901      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e1d6      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002654:	4b34      	ldr	r3, [pc, #208]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800265e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8084 	beq.w	800276e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002670:	429a      	cmp	r2, r3
 8002672:	d07c      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002674:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800267e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	461a      	mov	r2, r3
 800269e:	2301      	movs	r3, #1
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	461a      	mov	r2, r3
 80026c2:	2300      	movs	r3, #0
 80026c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026c6:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d04b      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe fb15 	bl	8000d04 <HAL_GetTick>
 80026da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe fb11 	bl	8000d04 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e180      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026f4:	2302      	movs	r3, #2
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	2302      	movs	r3, #2
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	61fb      	str	r3, [r7, #28]
  return result;
 800270c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d108      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002722:	4b01      	ldr	r3, [pc, #4]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	e00d      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002728:	40021000 	.word	0x40021000
 800272c:	40007000 	.word	0x40007000
 8002730:	10908100 	.word	0x10908100
 8002734:	2302      	movs	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	4ba0      	ldr	r3, [pc, #640]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2202      	movs	r2, #2
 8002746:	613a      	str	r2, [r7, #16]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	fa92 f2a2 	rbit	r2, r2
 800274e:	60fa      	str	r2, [r7, #12]
  return result;
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	fab2 f282 	clz	r2, r2
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f002 021f 	and.w	r2, r2, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0b7      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800276e:	4b95      	ldr	r3, [pc, #596]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4992      	ldr	r1, [pc, #584]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002780:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b8e      	ldr	r3, [pc, #568]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4a8d      	ldr	r2, [pc, #564]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002792:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a0:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f023 0203 	bic.w	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4985      	ldr	r1, [pc, #532]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027be:	4b81      	ldr	r3, [pc, #516]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	497e      	ldr	r1, [pc, #504]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027dc:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4976      	ldr	r1, [pc, #472]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fa:	4b72      	ldr	r3, [pc, #456]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f023 0210 	bic.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	496f      	ldr	r1, [pc, #444]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002818:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	4967      	ldr	r1, [pc, #412]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002836:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f023 0220 	bic.w	r2, r3, #32
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4960      	ldr	r1, [pc, #384]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002854:	4b5b      	ldr	r3, [pc, #364]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	4958      	ldr	r1, [pc, #352]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002872:	4b54      	ldr	r3, [pc, #336]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	4951      	ldr	r1, [pc, #324]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002890:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4949      	ldr	r1, [pc, #292]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028ae:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4942      	ldr	r1, [pc, #264]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028cc:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	493a      	ldr	r1, [pc, #232]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028ea:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	4933      	ldr	r1, [pc, #204]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002908:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	492b      	ldr	r1, [pc, #172]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4924      	ldr	r1, [pc, #144]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002934:	4313      	orrs	r3, r2
 8002936:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002944:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	491c      	ldr	r1, [pc, #112]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	4915      	ldr	r1, [pc, #84]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002970:	4313      	orrs	r3, r2
 8002972:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	490d      	ldr	r1, [pc, #52]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029aa:	4906      	ldr	r1, [pc, #24]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00c      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80029bc:	4b01      	ldr	r3, [pc, #4]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	e002      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d0:	490b      	ldr	r1, [pc, #44]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ee:	4904      	ldr	r1, [pc, #16]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3748      	adds	r7, #72	; 0x48
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01d      	b.n	8002a52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f844 	bl	8000ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f000 f97c 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_TIM_Base_Start_IT+0x50>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d00b      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x42>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d007      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	00010007 	.word	0x00010007

08002ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0202 	mvn.w	r2, #2
 8002adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f905 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8f7 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f908 	bl	8002d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d122      	bne.n	8002b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d11b      	bne.n	8002b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0204 	mvn.w	r2, #4
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2202      	movs	r2, #2
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8db 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8cd 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f8de 	bl	8002d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0208 	mvn.w	r2, #8
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8b1 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8a3 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f8b4 	bl	8002d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0210 	mvn.w	r2, #16
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2208      	movs	r2, #8
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f887 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f879 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f88a 	bl	8002d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10e      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0201 	mvn.w	r2, #1
 8002c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd fad0 	bl	80001d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b80      	cmp	r3, #128	; 0x80
 8002c40:	d10e      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d107      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f9a4 	bl	8002fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6e:	d10e      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	d107      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f997 	bl	8002fbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d10e      	bne.n	8002cba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d107      	bne.n	8002cba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f838 	bl	8002d2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d107      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0220 	mvn.w	r2, #32
 8002cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f957 	bl	8002f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a42      	ldr	r2, [pc, #264]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d00f      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3f      	ldr	r2, [pc, #252]	; (8002e60 <TIM_Base_SetConfig+0x120>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3d      	ldr	r2, [pc, #244]	; (8002e68 <TIM_Base_SetConfig+0x128>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3c      	ldr	r2, [pc, #240]	; (8002e6c <TIM_Base_SetConfig+0x12c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01f      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d01b      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <TIM_Base_SetConfig+0x120>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d017      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <TIM_Base_SetConfig+0x128>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00f      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <TIM_Base_SetConfig+0x130>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <TIM_Base_SetConfig+0x134>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <TIM_Base_SetConfig+0x138>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x9a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <TIM_Base_SetConfig+0x12c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <TIM_Base_SetConfig+0x128>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00f      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <TIM_Base_SetConfig+0x130>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <TIM_Base_SetConfig+0x134>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a11      	ldr	r2, [pc, #68]	; (8002e78 <TIM_Base_SetConfig+0x138>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_Base_SetConfig+0x100>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <TIM_Base_SetConfig+0x12c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d103      	bne.n	8002e48 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800
 8002e68:	40013400 	.word	0x40013400
 8002e6c:	40015000 	.word	0x40015000
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40014400 	.word	0x40014400
 8002e78:	40014800 	.word	0x40014800

08002e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e06d      	b.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a30      	ldr	r2, [pc, #192]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2f      	ldr	r2, [pc, #188]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d108      	bne.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ed8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d01d      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d018      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d10c      	bne.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40013400 	.word	0x40013400
 8002f84:	40015000 	.word	0x40015000
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40014000 	.word	0x40014000

08002f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e040      	b.n	8003064 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fdb6 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	; 0x24
 8002ffc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f986 	bl	8003320 <UART_SetConfig>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fb94 	bl	8003754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fc1b 	bl	8003898 <UART_CheckIdleState>
 8003062:	4603      	mov	r3, r0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d113      	bne.n	80030c4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00e      	beq.n	80030c4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8114 	beq.w	80032e2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4798      	blx	r3
      }
      return;
 80030c2:	e10e      	b.n	80032e2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80d6 	beq.w	8003278 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80cb 	beq.w	8003278 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <HAL_UART_IRQHandler+0x9e>
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00e      	beq.n	8003132 <HAL_UART_IRQHandler+0xc6>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2202      	movs	r2, #2
 8003124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800312a:	f043 0204 	orr.w	r2, r3, #4
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <HAL_UART_IRQHandler+0xee>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2204      	movs	r2, #4
 800314c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003174:	2b00      	cmp	r3, #0
 8003176:	d009      	beq.n	800318c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2208      	movs	r2, #8
 800317e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003184:	f043 0208 	orr.w	r2, r3, #8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00f      	beq.n	80031b6 <HAL_UART_IRQHandler+0x14a>
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ae:	f043 0220 	orr.w	r2, r3, #32
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8093 	beq.w	80032e6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00c      	beq.n	80031e4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d004      	beq.n	8003202 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d031      	beq.n	8003266 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fc08 	bl	8003a18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d123      	bne.n	800325e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003224:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d013      	beq.n	8003256 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003232:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <HAL_UART_IRQHandler+0x288>)
 8003234:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fe7f 	bl	8000f3e <HAL_DMA_Abort_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e00e      	b.n	8003274 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f858 	bl	800330c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e00a      	b.n	8003274 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f854 	bl	800330c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	e006      	b.n	8003274 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f850 	bl	800330c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003272:	e038      	b.n	80032e6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003274:	bf00      	nop
    return;
 8003276:	e036      	b.n	80032e6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <HAL_UART_IRQHandler+0x232>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003294:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fc0d 	bl	8003ab6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800329c:	e026      	b.n	80032ec <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d017      	beq.n	80032ea <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
    }
    return;
 80032c2:	e012      	b.n	80032ea <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <HAL_UART_IRQHandler+0x280>
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fbd3 	bl	8003a84 <UART_EndTransmit_IT>
    return;
 80032de:	bf00      	nop
 80032e0:	e004      	b.n	80032ec <HAL_UART_IRQHandler+0x280>
      return;
 80032e2:	bf00      	nop
 80032e4:	e002      	b.n	80032ec <HAL_UART_IRQHandler+0x280>
    return;
 80032e6:	bf00      	nop
 80032e8:	e000      	b.n	80032ec <HAL_UART_IRQHandler+0x280>
    return;
 80032ea:	bf00      	nop
  }

}
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	08003a59 	.word	0x08003a59

080032f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4bac      	ldr	r3, [pc, #688]	; (8003600 <UART_SetConfig+0x2e0>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	6939      	ldr	r1, [r7, #16]
 8003358:	430b      	orrs	r3, r1
 800335a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a9a      	ldr	r2, [pc, #616]	; (8003604 <UART_SetConfig+0x2e4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d121      	bne.n	80033e4 <UART_SetConfig+0xc4>
 80033a0:	4b99      	ldr	r3, [pc, #612]	; (8003608 <UART_SetConfig+0x2e8>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d817      	bhi.n	80033dc <UART_SetConfig+0xbc>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x94>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033d1 	.word	0x080033d1
 80033bc:	080033d7 	.word	0x080033d7
 80033c0:	080033cb 	.word	0x080033cb
 80033c4:	2301      	movs	r3, #1
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e0b2      	b.n	8003530 <UART_SetConfig+0x210>
 80033ca:	2302      	movs	r3, #2
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e0af      	b.n	8003530 <UART_SetConfig+0x210>
 80033d0:	2304      	movs	r3, #4
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e0ac      	b.n	8003530 <UART_SetConfig+0x210>
 80033d6:	2308      	movs	r3, #8
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e0a9      	b.n	8003530 <UART_SetConfig+0x210>
 80033dc:	2310      	movs	r3, #16
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	bf00      	nop
 80033e2:	e0a5      	b.n	8003530 <UART_SetConfig+0x210>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a88      	ldr	r2, [pc, #544]	; (800360c <UART_SetConfig+0x2ec>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d123      	bne.n	8003436 <UART_SetConfig+0x116>
 80033ee:	4b86      	ldr	r3, [pc, #536]	; (8003608 <UART_SetConfig+0x2e8>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fa:	d012      	beq.n	8003422 <UART_SetConfig+0x102>
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d802      	bhi.n	8003408 <UART_SetConfig+0xe8>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <UART_SetConfig+0xf6>
 8003406:	e012      	b.n	800342e <UART_SetConfig+0x10e>
 8003408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800340c:	d00c      	beq.n	8003428 <UART_SetConfig+0x108>
 800340e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003412:	d003      	beq.n	800341c <UART_SetConfig+0xfc>
 8003414:	e00b      	b.n	800342e <UART_SetConfig+0x10e>
 8003416:	2300      	movs	r3, #0
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e089      	b.n	8003530 <UART_SetConfig+0x210>
 800341c:	2302      	movs	r3, #2
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e086      	b.n	8003530 <UART_SetConfig+0x210>
 8003422:	2304      	movs	r3, #4
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e083      	b.n	8003530 <UART_SetConfig+0x210>
 8003428:	2308      	movs	r3, #8
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e080      	b.n	8003530 <UART_SetConfig+0x210>
 800342e:	2310      	movs	r3, #16
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	bf00      	nop
 8003434:	e07c      	b.n	8003530 <UART_SetConfig+0x210>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a75      	ldr	r2, [pc, #468]	; (8003610 <UART_SetConfig+0x2f0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d123      	bne.n	8003488 <UART_SetConfig+0x168>
 8003440:	4b71      	ldr	r3, [pc, #452]	; (8003608 <UART_SetConfig+0x2e8>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800344c:	d012      	beq.n	8003474 <UART_SetConfig+0x154>
 800344e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003452:	d802      	bhi.n	800345a <UART_SetConfig+0x13a>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <UART_SetConfig+0x148>
 8003458:	e012      	b.n	8003480 <UART_SetConfig+0x160>
 800345a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800345e:	d00c      	beq.n	800347a <UART_SetConfig+0x15a>
 8003460:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003464:	d003      	beq.n	800346e <UART_SetConfig+0x14e>
 8003466:	e00b      	b.n	8003480 <UART_SetConfig+0x160>
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e060      	b.n	8003530 <UART_SetConfig+0x210>
 800346e:	2302      	movs	r3, #2
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e05d      	b.n	8003530 <UART_SetConfig+0x210>
 8003474:	2304      	movs	r3, #4
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e05a      	b.n	8003530 <UART_SetConfig+0x210>
 800347a:	2308      	movs	r3, #8
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e057      	b.n	8003530 <UART_SetConfig+0x210>
 8003480:	2310      	movs	r3, #16
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	bf00      	nop
 8003486:	e053      	b.n	8003530 <UART_SetConfig+0x210>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a61      	ldr	r2, [pc, #388]	; (8003614 <UART_SetConfig+0x2f4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d123      	bne.n	80034da <UART_SetConfig+0x1ba>
 8003492:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <UART_SetConfig+0x2e8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349e:	d012      	beq.n	80034c6 <UART_SetConfig+0x1a6>
 80034a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a4:	d802      	bhi.n	80034ac <UART_SetConfig+0x18c>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <UART_SetConfig+0x19a>
 80034aa:	e012      	b.n	80034d2 <UART_SetConfig+0x1b2>
 80034ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b0:	d00c      	beq.n	80034cc <UART_SetConfig+0x1ac>
 80034b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034b6:	d003      	beq.n	80034c0 <UART_SetConfig+0x1a0>
 80034b8:	e00b      	b.n	80034d2 <UART_SetConfig+0x1b2>
 80034ba:	2300      	movs	r3, #0
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e037      	b.n	8003530 <UART_SetConfig+0x210>
 80034c0:	2302      	movs	r3, #2
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e034      	b.n	8003530 <UART_SetConfig+0x210>
 80034c6:	2304      	movs	r3, #4
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e031      	b.n	8003530 <UART_SetConfig+0x210>
 80034cc:	2308      	movs	r3, #8
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e02e      	b.n	8003530 <UART_SetConfig+0x210>
 80034d2:	2310      	movs	r3, #16
 80034d4:	77fb      	strb	r3, [r7, #31]
 80034d6:	bf00      	nop
 80034d8:	e02a      	b.n	8003530 <UART_SetConfig+0x210>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4e      	ldr	r2, [pc, #312]	; (8003618 <UART_SetConfig+0x2f8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d123      	bne.n	800352c <UART_SetConfig+0x20c>
 80034e4:	4b48      	ldr	r3, [pc, #288]	; (8003608 <UART_SetConfig+0x2e8>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80034ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f0:	d012      	beq.n	8003518 <UART_SetConfig+0x1f8>
 80034f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f6:	d802      	bhi.n	80034fe <UART_SetConfig+0x1de>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <UART_SetConfig+0x1ec>
 80034fc:	e012      	b.n	8003524 <UART_SetConfig+0x204>
 80034fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003502:	d00c      	beq.n	800351e <UART_SetConfig+0x1fe>
 8003504:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003508:	d003      	beq.n	8003512 <UART_SetConfig+0x1f2>
 800350a:	e00b      	b.n	8003524 <UART_SetConfig+0x204>
 800350c:	2300      	movs	r3, #0
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e00e      	b.n	8003530 <UART_SetConfig+0x210>
 8003512:	2302      	movs	r3, #2
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e00b      	b.n	8003530 <UART_SetConfig+0x210>
 8003518:	2304      	movs	r3, #4
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e008      	b.n	8003530 <UART_SetConfig+0x210>
 800351e:	2308      	movs	r3, #8
 8003520:	77fb      	strb	r3, [r7, #31]
 8003522:	e005      	b.n	8003530 <UART_SetConfig+0x210>
 8003524:	2310      	movs	r3, #16
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	bf00      	nop
 800352a:	e001      	b.n	8003530 <UART_SetConfig+0x210>
 800352c:	2310      	movs	r3, #16
 800352e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003538:	f040 8090 	bne.w	800365c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800353c:	7ffb      	ldrb	r3, [r7, #31]
 800353e:	2b08      	cmp	r3, #8
 8003540:	d86c      	bhi.n	800361c <UART_SetConfig+0x2fc>
 8003542:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <UART_SetConfig+0x228>)
 8003544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003548:	0800356d 	.word	0x0800356d
 800354c:	0800358d 	.word	0x0800358d
 8003550:	080035ad 	.word	0x080035ad
 8003554:	0800361d 	.word	0x0800361d
 8003558:	080035c9 	.word	0x080035c9
 800355c:	0800361d 	.word	0x0800361d
 8003560:	0800361d 	.word	0x0800361d
 8003564:	0800361d 	.word	0x0800361d
 8003568:	080035e9 	.word	0x080035e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800356c:	f7fe ffe8 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8003570:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	005a      	lsls	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	441a      	add	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	b29b      	uxth	r3, r3
 8003588:	61bb      	str	r3, [r7, #24]
        break;
 800358a:	e04a      	b.n	8003622 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800358c:	f7fe fffa 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8003590:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	005a      	lsls	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	61bb      	str	r3, [r7, #24]
        break;
 80035aa:	e03a      	b.n	8003622 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80035b6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6852      	ldr	r2, [r2, #4]
 80035be:	fbb3 f3f2 	udiv	r3, r3, r2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	61bb      	str	r3, [r7, #24]
        break;
 80035c6:	e02c      	b.n	8003622 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c8:	f7fe ff44 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 80035cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	005a      	lsls	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	61bb      	str	r3, [r7, #24]
        break;
 80035e6:	e01c      	b.n	8003622 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	61bb      	str	r3, [r7, #24]
        break;
 80035fe:	e010      	b.n	8003622 <UART_SetConfig+0x302>
 8003600:	efff69f3 	.word	0xefff69f3
 8003604:	40013800 	.word	0x40013800
 8003608:	40021000 	.word	0x40021000
 800360c:	40004400 	.word	0x40004400
 8003610:	40004800 	.word	0x40004800
 8003614:	40004c00 	.word	0x40004c00
 8003618:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
        break;
 8003620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d916      	bls.n	8003656 <UART_SetConfig+0x336>
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d212      	bcs.n	8003656 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f023 030f 	bic.w	r3, r3, #15
 8003638:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	b29b      	uxth	r3, r3
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	b29a      	uxth	r2, r3
 8003646:	897b      	ldrh	r3, [r7, #10]
 8003648:	4313      	orrs	r3, r2
 800364a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	897a      	ldrh	r2, [r7, #10]
 8003652:	60da      	str	r2, [r3, #12]
 8003654:	e072      	b.n	800373c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
 800365a:	e06f      	b.n	800373c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800365c:	7ffb      	ldrb	r3, [r7, #31]
 800365e:	2b08      	cmp	r3, #8
 8003660:	d85b      	bhi.n	800371a <UART_SetConfig+0x3fa>
 8003662:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <UART_SetConfig+0x348>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	0800368d 	.word	0x0800368d
 800366c:	080036ab 	.word	0x080036ab
 8003670:	080036c9 	.word	0x080036c9
 8003674:	0800371b 	.word	0x0800371b
 8003678:	080036e5 	.word	0x080036e5
 800367c:	0800371b 	.word	0x0800371b
 8003680:	0800371b 	.word	0x0800371b
 8003684:	0800371b 	.word	0x0800371b
 8003688:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800368c:	f7fe ff58 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8003690:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	085a      	lsrs	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	441a      	add	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	61bb      	str	r3, [r7, #24]
        break;
 80036a8:	e03a      	b.n	8003720 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036aa:	f7fe ff6b 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 80036ae:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	085a      	lsrs	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	61bb      	str	r3, [r7, #24]
        break;
 80036c6:	e02b      	b.n	8003720 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80036d2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6852      	ldr	r2, [r2, #4]
 80036da:	fbb3 f3f2 	udiv	r3, r3, r2
 80036de:	b29b      	uxth	r3, r3
 80036e0:	61bb      	str	r3, [r7, #24]
        break;
 80036e2:	e01d      	b.n	8003720 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036e4:	f7fe feb6 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 80036e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	085a      	lsrs	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	61bb      	str	r3, [r7, #24]
        break;
 8003700:	e00e      	b.n	8003720 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	b29b      	uxth	r3, r3
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e002      	b.n	8003720 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
        break;
 800371e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	d908      	bls.n	8003738 <UART_SetConfig+0x418>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d204      	bcs.n	8003738 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	e001      	b.n	800373c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop

08003754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01a      	beq.n	800386a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003852:	d10a      	bne.n	800386a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80038a6:	f7fd fa2d 	bl	8000d04 <HAL_GetTick>
 80038aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d10e      	bne.n	80038d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f82a 	bl	8003922 <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e020      	b.n	800391a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d10e      	bne.n	8003904 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f814 	bl	8003922 <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e00a      	b.n	800391a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4613      	mov	r3, r2
 8003930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003932:	e05d      	b.n	80039f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d059      	beq.n	80039f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393c:	f7fd f9e2 	bl	8000d04 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <UART_WaitOnFlagUntilTimeout+0x30>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11b      	bne.n	800398a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003960:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e042      	b.n	8003a10 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d02b      	beq.n	80039f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a6:	d123      	bne.n	80039f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e00f      	b.n	8003a10 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4013      	ands	r3, r2
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d092      	beq.n	8003934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff fc48 	bl	800330c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fc25 	bl	80032f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <__libc_init_array>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	4e0d      	ldr	r6, [pc, #52]	; (8003b04 <__libc_init_array+0x38>)
 8003ad0:	4c0d      	ldr	r4, [pc, #52]	; (8003b08 <__libc_init_array+0x3c>)
 8003ad2:	1ba4      	subs	r4, r4, r6
 8003ad4:	10a4      	asrs	r4, r4, #2
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	42a5      	cmp	r5, r4
 8003ada:	d109      	bne.n	8003af0 <__libc_init_array+0x24>
 8003adc:	4e0b      	ldr	r6, [pc, #44]	; (8003b0c <__libc_init_array+0x40>)
 8003ade:	4c0c      	ldr	r4, [pc, #48]	; (8003b10 <__libc_init_array+0x44>)
 8003ae0:	f000 f82c 	bl	8003b3c <_init>
 8003ae4:	1ba4      	subs	r4, r4, r6
 8003ae6:	10a4      	asrs	r4, r4, #2
 8003ae8:	2500      	movs	r5, #0
 8003aea:	42a5      	cmp	r5, r4
 8003aec:	d105      	bne.n	8003afa <__libc_init_array+0x2e>
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003af4:	4798      	blx	r3
 8003af6:	3501      	adds	r5, #1
 8003af8:	e7ee      	b.n	8003ad8 <__libc_init_array+0xc>
 8003afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afe:	4798      	blx	r3
 8003b00:	3501      	adds	r5, #1
 8003b02:	e7f2      	b.n	8003aea <__libc_init_array+0x1e>
 8003b04:	08003b8c 	.word	0x08003b8c
 8003b08:	08003b8c 	.word	0x08003b8c
 8003b0c:	08003b8c 	.word	0x08003b8c
 8003b10:	08003b90 	.word	0x08003b90

08003b14 <memcpy>:
 8003b14:	b510      	push	{r4, lr}
 8003b16:	1e43      	subs	r3, r0, #1
 8003b18:	440a      	add	r2, r1
 8003b1a:	4291      	cmp	r1, r2
 8003b1c:	d100      	bne.n	8003b20 <memcpy+0xc>
 8003b1e:	bd10      	pop	{r4, pc}
 8003b20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b28:	e7f7      	b.n	8003b1a <memcpy+0x6>

08003b2a <memset>:
 8003b2a:	4402      	add	r2, r0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d100      	bne.n	8003b34 <memset+0xa>
 8003b32:	4770      	bx	lr
 8003b34:	f803 1b01 	strb.w	r1, [r3], #1
 8003b38:	e7f9      	b.n	8003b2e <memset+0x4>
	...

08003b3c <_init>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr

08003b48 <_fini>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr
