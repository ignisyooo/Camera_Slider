
Slider_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002714  08002714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002744  08002744  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08002744  08002744  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002744  08002744  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800274c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200000c0  08002808  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08002808  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0ed  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018a5  00000000  00000000  0002a1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002ba80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0002c450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c3e9  00000000  00000000  0002cd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000876d  00000000  00000000  00049121  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6c18  00000000  00000000  0005188e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f84a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002794  00000000  00000000  000f8524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000c0 	.word	0x200000c0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080026fc 	.word	0x080026fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000c4 	.word	0x200000c4
 80001d0:	080026fc 	.word	0x080026fc

080001d4 <add_motors>:
						.positionStart =1,
				},
};

void add_motors(Motor_T *sett)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	sett[0]=motor1;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4a0a      	ldr	r2, [pc, #40]	; (8000208 <add_motors+0x34>)
 80001e0:	4618      	mov	r0, r3
 80001e2:	4611      	mov	r1, r2
 80001e4:	2358      	movs	r3, #88	; 0x58
 80001e6:	461a      	mov	r2, r3
 80001e8:	f002 fa74 	bl	80026d4 <memcpy>
	sett[1]=motor2;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	3358      	adds	r3, #88	; 0x58
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <add_motors+0x38>)
 80001f2:	4618      	mov	r0, r3
 80001f4:	4611      	mov	r1, r2
 80001f6:	2358      	movs	r3, #88	; 0x58
 80001f8:	461a      	mov	r2, r3
 80001fa:	f002 fa6b 	bl	80026d4 <memcpy>
	//sett[2]=&motor3;
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	20000058 	.word	0x20000058

08000210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b08a      	sub	sp, #40	; 0x28
 8000214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000226:	4b40      	ldr	r3, [pc, #256]	; (8000328 <MX_GPIO_Init+0x118>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a3f      	ldr	r2, [pc, #252]	; (8000328 <MX_GPIO_Init+0x118>)
 800022c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b3d      	ldr	r3, [pc, #244]	; (8000328 <MX_GPIO_Init+0x118>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800023a:	613b      	str	r3, [r7, #16]
 800023c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	4b3a      	ldr	r3, [pc, #232]	; (8000328 <MX_GPIO_Init+0x118>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a39      	ldr	r2, [pc, #228]	; (8000328 <MX_GPIO_Init+0x118>)
 8000244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b37      	ldr	r3, [pc, #220]	; (8000328 <MX_GPIO_Init+0x118>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000256:	4b34      	ldr	r3, [pc, #208]	; (8000328 <MX_GPIO_Init+0x118>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a33      	ldr	r2, [pc, #204]	; (8000328 <MX_GPIO_Init+0x118>)
 800025c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000260:	6153      	str	r3, [r2, #20]
 8000262:	4b31      	ldr	r3, [pc, #196]	; (8000328 <MX_GPIO_Init+0x118>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b2e      	ldr	r3, [pc, #184]	; (8000328 <MX_GPIO_Init+0x118>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a2d      	ldr	r2, [pc, #180]	; (8000328 <MX_GPIO_Init+0x118>)
 8000274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b2b      	ldr	r3, [pc, #172]	; (8000328 <MX_GPIO_Init+0x118>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_MS1_Pin|MOTOR2_STEP_Pin|MOTOR2_DIR_Pin|MOTOR1_STEP_Pin, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800028c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000290:	f000 fe24 	bl	8000edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800029a:	4824      	ldr	r0, [pc, #144]	; (800032c <MX_GPIO_Init+0x11c>)
 800029c:	f000 fe1e 	bl	8000edc <HAL_GPIO_WritePin>
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f24c 0103 	movw	r1, #49155	; 0xc003
 80002a6:	4822      	ldr	r0, [pc, #136]	; (8000330 <MX_GPIO_Init+0x120>)
 80002a8:	f000 fe18 	bl	8000edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR2_MS1_Pin|MOTOR2_STEP_Pin|MOTOR2_DIR_Pin|MOTOR1_STEP_Pin;
 80002ac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80002b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b2:	2301      	movs	r3, #1
 80002b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ba:	2300      	movs	r3, #0
 80002bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002be:	f107 0314 	add.w	r3, r7, #20
 80002c2:	4619      	mov	r1, r3
 80002c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c8:	f000 fc7e 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 80002cc:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80002d0:	617b      	str	r3, [r7, #20]
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	2300      	movs	r3, #0
 80002dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	4619      	mov	r1, r3
 80002e4:	4811      	ldr	r0, [pc, #68]	; (800032c <MX_GPIO_Init+0x11c>)
 80002e6:	f000 fc6f 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin;
 80002ea:	f24c 0303 	movw	r3, #49155	; 0xc003
 80002ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2300      	movs	r3, #0
 80002fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4619      	mov	r1, r3
 8000302:	480b      	ldr	r0, [pc, #44]	; (8000330 <MX_GPIO_Init+0x120>)
 8000304:	f000 fc60 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000308:	2304      	movs	r3, #4
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_GPIO_Init+0x124>)
 800030e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4619      	mov	r1, r3
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_GPIO_Init+0x120>)
 800031c:	f000 fc54 	bl	8000bc8 <HAL_GPIO_Init>

}
 8000320:	bf00      	nop
 8000322:	3728      	adds	r7, #40	; 0x28
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40021000 	.word	0x40021000
 800032c:	48000800 	.word	0x48000800
 8000330:	48000400 	.word	0x48000400
 8000334:	10110000 	.word	0x10110000

08000338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033e:	f000 faa9 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000342:	f000 f833 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000346:	f7ff ff63 	bl	8000210 <MX_GPIO_Init>
  MX_TIM6_Init();
 800034a:	f000 fa1d 	bl	8000788 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	add_motors(Motor_set);
 800034e:	4816      	ldr	r0, [pc, #88]	; (80003a8 <main+0x70>)
 8000350:	f7ff ff40 	bl	80001d4 <add_motors>
	for (int i = 0; i < MOTORS_NUM - 2; i++) {
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	e00b      	b.n	8000372 <main+0x3a>
		Motor_Init(&Motor_set[i]);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2258      	movs	r2, #88	; 0x58
 800035e:	fb02 f303 	mul.w	r3, r2, r3
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <main+0x70>)
 8000364:	4413      	add	r3, r2
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f948 	bl	80005fc <Motor_Init>
	for (int i = 0; i < MOTORS_NUM - 2; i++) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3301      	adds	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2b00      	cmp	r3, #0
 8000376:	ddf0      	ble.n	800035a <main+0x22>
	}
	//HAL_TIM_Base_Start_IT(&htim6);
	Motor_Update(Motor_set);
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <main+0x70>)
 800037a:	f000 f977 	bl	800066c <Motor_Update>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
		HAL_GPIO_WritePin(MOTOR1_STEP_GPIO_Port, MOTOR1_STEP_Pin, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000388:	f000 fda8 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800038c:	2001      	movs	r0, #1
 800038e:	f000 fae7 	bl	8000960 <HAL_Delay>
		HAL_GPIO_WritePin(MOTOR1_STEP_GPIO_Port, MOTOR1_STEP_Pin, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039c:	f000 fd9e 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80003a0:	200a      	movs	r0, #10
 80003a2:	f000 fadd 	bl	8000960 <HAL_Delay>
		HAL_GPIO_WritePin(MOTOR1_STEP_GPIO_Port, MOTOR1_STEP_Pin, GPIO_PIN_SET);
 80003a6:	e7ea      	b.n	800037e <main+0x46>
 80003a8:	200000e0 	.word	0x200000e0

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b090      	sub	sp, #64	; 0x40
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 f995 	bl	80026ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	2302      	movs	r3, #2
 80003de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fd89 	bl	8000f0c <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000400:	f000 f819 	bl	8000436 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	230f      	movs	r3, #15
 8000406:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	2302      	movs	r3, #2
 800040a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2102      	movs	r1, #2
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fc8a 	bl	8001d38 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800042a:	f000 f804 	bl	8000436 <Error_Handler>
  }
}
 800042e:	bf00      	nop
 8000430:	3740      	adds	r7, #64	; 0x40
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <Motor_PinMode>:
 * 4 -> 1/16 steep
 *
 * While init mircosteep is set to 0 ( Full steep)
 ********************************************/

void Motor_PinMode(Motor_T *sett) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	6998      	ldr	r0, [r3, #24]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	8b99      	ldrh	r1, [r3, #28]
			(sett->flags.isOn) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 8000460:	461a      	mov	r2, r3
 8000462:	f000 fd3b 	bl	8000edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6818      	ldr	r0, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	8899      	ldrh	r1, [r3, #4]
			(sett->flags.reset) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000474:	085b      	lsrs	r3, r3, #1
 8000476:	b2db      	uxtb	r3, r3
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 800047e:	461a      	mov	r2, r3
 8000480:	f000 fd2c 	bl	8000edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	6898      	ldr	r0, [r3, #8]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	8999      	ldrh	r1, [r3, #12]
			(sett->flags.sleep) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000492:	089b      	lsrs	r3, r3, #2
 8000494:	b2db      	uxtb	r3, r3
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 800049c:	461a      	mov	r2, r3
 800049e:	f000 fd1d 	bl	8000edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6918      	ldr	r0, [r3, #16]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	8a99      	ldrh	r1, [r3, #20]
			(sett->flags.direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80004b0:	08db      	lsrs	r3, r3, #3
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 80004ba:	461a      	mov	r2, r3
 80004bc:	f000 fd0e 	bl	8000edc <HAL_GPIO_WritePin>
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <Motor_MicroPinSet>:

void Motor_MicroPinSet(Motor_T *sett) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	switch (sett->device.microstep) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	f200 808b 	bhi.w	80005f2 <Motor_MicroPinSet+0x12a>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <Motor_MicroPinSet+0x1c>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	080004f9 	.word	0x080004f9
 80004e8:	0800052b 	.word	0x0800052b
 80004ec:	0800055d 	.word	0x0800055d
 80004f0:	0800058f 	.word	0x0800058f
 80004f4:	080005c1 	.word	0x080005c1
	case 0:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6a18      	ldr	r0, [r3, #32]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000500:	2200      	movs	r2, #0
 8000502:	4619      	mov	r1, r3
 8000504:	f000 fcea 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000510:	2200      	movs	r2, #0
 8000512:	4619      	mov	r1, r3
 8000514:	f000 fce2 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000520:	2200      	movs	r2, #0
 8000522:	4619      	mov	r1, r3
 8000524:	f000 fcda 	bl	8000edc <HAL_GPIO_WritePin>
		break;
 8000528:	e063      	b.n	80005f2 <Motor_MicroPinSet+0x12a>
	case 1:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6a18      	ldr	r0, [r3, #32]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000532:	2201      	movs	r2, #1
 8000534:	4619      	mov	r1, r3
 8000536:	f000 fcd1 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000542:	2200      	movs	r2, #0
 8000544:	4619      	mov	r1, r3
 8000546:	f000 fcc9 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	f000 fcc1 	bl	8000edc <HAL_GPIO_WritePin>
		break;
 800055a:	e04a      	b.n	80005f2 <Motor_MicroPinSet+0x12a>
	case 2:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6a18      	ldr	r0, [r3, #32]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000564:	2200      	movs	r2, #0
 8000566:	4619      	mov	r1, r3
 8000568:	f000 fcb8 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	f000 fcb0 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000584:	2200      	movs	r2, #0
 8000586:	4619      	mov	r1, r3
 8000588:	f000 fca8 	bl	8000edc <HAL_GPIO_WritePin>
		break;
 800058c:	e031      	b.n	80005f2 <Motor_MicroPinSet+0x12a>
	case 3:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6a18      	ldr	r0, [r3, #32]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000596:	2201      	movs	r2, #1
 8000598:	4619      	mov	r1, r3
 800059a:	f000 fc9f 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80005a6:	2201      	movs	r2, #1
 80005a8:	4619      	mov	r1, r3
 80005aa:	f000 fc97 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80005b6:	2200      	movs	r2, #0
 80005b8:	4619      	mov	r1, r3
 80005ba:	f000 fc8f 	bl	8000edc <HAL_GPIO_WritePin>
		break;
 80005be:	e018      	b.n	80005f2 <Motor_MicroPinSet+0x12a>

	case 4:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6a18      	ldr	r0, [r3, #32]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	f000 fc86 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80005d8:	2201      	movs	r2, #1
 80005da:	4619      	mov	r1, r3
 80005dc:	f000 fc7e 	bl	8000edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_SET);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80005e8:	2201      	movs	r2, #1
 80005ea:	4619      	mov	r1, r3
 80005ec:	f000 fc76 	bl	8000edc <HAL_GPIO_WritePin>
		break;
 80005f0:	bf00      	nop
	}
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop

080005fc <Motor_Init>:

void Motor_Init(Motor_T *sett) {
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	sett->flags.isOn = 0;
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800060a:	f36f 0300 	bfc	r3, #0, #1
 800060e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.reset = 0;
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000618:	f36f 0341 	bfc	r3, #1, #1
 800061c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.direction = CW;
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	sett->device.positionStart = 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	655a      	str	r2, [r3, #84]	; 0x54
	sett->device.speed = 0;
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	f04f 0400 	mov.w	r4, #0
 800064c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	sett->device.microstep = 0;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Motor_PinMode(sett);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff fef3 	bl	8000444 <Motor_PinMode>
	Motor_MicroPinSet(sett);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff32 	bl	80004c8 <Motor_MicroPinSet>
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bd90      	pop	{r4, r7, pc}

0800066c <Motor_Update>:
{
	return sett->flags.reset;
}

void Motor_Update(Motor_T *sett)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	//sett->flags.isOn=1;
	sett->flags.reset=1;
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep=1;
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	Motor_PinMode(sett);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff fed7 	bl	8000444 <Motor_PinMode>
	//HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN, GPIO_PIN_SET);
	HAL_Delay(2);
 8000696:	2002      	movs	r0, #2
 8000698:	f000 f962 	bl	8000960 <HAL_Delay>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_MspInit+0x44>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_MspInit+0x44>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_MspInit+0x44>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_MspInit+0x44>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_MspInit+0x44>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_MspInit+0x44>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f8ee 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <TIM6_DAC_IRQHandler+0x10>)
 800074e:	f001 fd04 	bl	800215a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001e8 	.word	0x200001e8

0800075c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <SystemInit+0x28>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <SystemInit+0x28>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x28>)
 8000772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000776:	609a      	str	r2, [r3, #8]
#endif
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_TIM6_Init+0x64>)
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <MX_TIM6_Init+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_TIM6_Init+0x64>)
 80007a0:	2247      	movs	r2, #71	; 0x47
 80007a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_TIM6_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_TIM6_Init+0x64>)
 80007ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_TIM6_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_TIM6_Init+0x64>)
 80007ba:	f001 fca3 	bl	8002104 <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007c4:	f7ff fe37 	bl	8000436 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_TIM6_Init+0x64>)
 80007d6:	f001 feaf 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f7ff fe29 	bl	8000436 <Error_Handler>
  }

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200001e8 	.word	0x200001e8
 80007f0:	40001000 	.word	0x40001000

080007f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <HAL_TIM_Base_MspInit+0x44>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d113      	bne.n	800082e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_TIM_Base_MspInit+0x48>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a0c      	ldr	r2, [pc, #48]	; (800083c <HAL_TIM_Base_MspInit+0x48>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_TIM_Base_MspInit+0x48>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2036      	movs	r0, #54	; 0x36
 8000824:	f000 f999 	bl	8000b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000828:	2036      	movs	r0, #54	; 0x36
 800082a:	f000 f9b2 	bl	8000b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40001000 	.word	0x40001000
 800083c:	40021000 	.word	0x40021000

08000840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000878 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000844:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000846:	e003      	b.n	8000850 <LoopCopyDataInit>

08000848 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800084a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800084c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800084e:	3104      	adds	r1, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000854:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000856:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000858:	d3f6      	bcc.n	8000848 <CopyDataInit>
	ldr	r2, =_sbss
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <LoopForever+0x12>)
	b	LoopFillZerobss
 800085c:	e002      	b.n	8000864 <LoopFillZerobss>

0800085e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800085e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000860:	f842 3b04 	str.w	r3, [r2], #4

08000864 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <LoopForever+0x16>)
	cmp	r2, r3
 8000866:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000868:	d3f9      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800086a:	f7ff ff77 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086e:	f001 ff0d 	bl	800268c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000872:	f7ff fd61 	bl	8000338 <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000878:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800087c:	0800274c 	.word	0x0800274c
	ldr	r0, =_sdata
 8000880:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000884:	200000bc 	.word	0x200000bc
	ldr	r2, =_sbss
 8000888:	200000c0 	.word	0x200000c0
	ldr	r3, = _ebss
 800088c:	2000022c 	.word	0x2000022c

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f94d 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff fef8 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f965 	bl	8000bae <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f92d 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000b0 	.word	0x200000b0
 8000918:	200000b8 	.word	0x200000b8
 800091c:	200000b4 	.word	0x200000b4

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000b8 	.word	0x200000b8
 8000944:	20000228 	.word	0x20000228

08000948 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;  
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000228 	.word	0x20000228

08000960 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000968:	f7ff ffee 	bl	8000948 <HAL_GetTick>
 800096c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000978:	d005      	beq.n	8000986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_Delay+0x40>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000986:	bf00      	nop
 8000988:	f7ff ffde 	bl	8000948 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d8f7      	bhi.n	8000988 <HAL_Delay+0x28>
  {
  }
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200000b8 	.word	0x200000b8

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db0b      	blt.n	8000a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4907      	ldr	r1, [pc, #28]	; (8000a40 <__NVIC_EnableIRQ+0x38>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff8e 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff29 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff3e 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff8e 	bl	8000a98 <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5d 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff31 	bl	8000a08 <__NVIC_EnableIRQ>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffa2 	bl	8000b00 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd6:	e160      	b.n	8000e9a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 8152 	beq.w	8000e94 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d00b      	beq.n	8000c10 <HAL_GPIO_Init+0x48>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d007      	beq.n	8000c10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c04:	2b11      	cmp	r3, #17
 8000c06:	d003      	beq.n	8000c10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b12      	cmp	r3, #18
 8000c0e:	d130      	bne.n	8000c72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c46:	2201      	movs	r2, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	091b      	lsrs	r3, r3, #4
 8000c5c:	f003 0201 	and.w	r2, r3, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0xea>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b12      	cmp	r3, #18
 8000cb0:	d123      	bne.n	8000cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	220f      	movs	r2, #15
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	6939      	ldr	r1, [r7, #16]
 8000cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0203 	and.w	r2, r3, #3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 80ac 	beq.w	8000e94 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3c:	4b5e      	ldr	r3, [pc, #376]	; (8000eb8 <HAL_GPIO_Init+0x2f0>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a5d      	ldr	r2, [pc, #372]	; (8000eb8 <HAL_GPIO_Init+0x2f0>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <HAL_GPIO_Init+0x2f0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d54:	4a59      	ldr	r2, [pc, #356]	; (8000ebc <HAL_GPIO_Init+0x2f4>)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d7e:	d025      	beq.n	8000dcc <HAL_GPIO_Init+0x204>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <HAL_GPIO_Init+0x2f8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d01f      	beq.n	8000dc8 <HAL_GPIO_Init+0x200>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4e      	ldr	r2, [pc, #312]	; (8000ec4 <HAL_GPIO_Init+0x2fc>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d019      	beq.n	8000dc4 <HAL_GPIO_Init+0x1fc>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d013      	beq.n	8000dc0 <HAL_GPIO_Init+0x1f8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4c      	ldr	r2, [pc, #304]	; (8000ecc <HAL_GPIO_Init+0x304>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00d      	beq.n	8000dbc <HAL_GPIO_Init+0x1f4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a4b      	ldr	r2, [pc, #300]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d007      	beq.n	8000db8 <HAL_GPIO_Init+0x1f0>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <HAL_GPIO_Init+0x30c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d101      	bne.n	8000db4 <HAL_GPIO_Init+0x1ec>
 8000db0:	2306      	movs	r3, #6
 8000db2:	e00c      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000db4:	2307      	movs	r3, #7
 8000db6:	e00a      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000db8:	2305      	movs	r3, #5
 8000dba:	e008      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e004      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	f002 0203 	and.w	r2, r2, #3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dde:	4937      	ldr	r1, [pc, #220]	; (8000ebc <HAL_GPIO_Init+0x2f4>)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e10:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e3a:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e40:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e64:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f47f ae97 	bne.w	8000bd8 <HAL_GPIO_Init+0x10>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000c00 	.word	0x48000c00
 8000ecc:	48001000 	.word	0x48001000
 8000ed0:	48001400 	.word	0x48001400
 8000ed4:	48001800 	.word	0x48001800
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eec:	787b      	ldrb	r3, [r7, #1]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f000 bf01 	b.w	8001d28 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 8160 	beq.w	80011f6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f36:	4bae      	ldr	r3, [pc, #696]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d00c      	beq.n	8000f5c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f42:	4bab      	ldr	r3, [pc, #684]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d159      	bne.n	8001002 <HAL_RCC_OscConfig+0xf6>
 8000f4e:	4ba8      	ldr	r3, [pc, #672]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5a:	d152      	bne.n	8001002 <HAL_RCC_OscConfig+0xf6>
 8000f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f60:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f70:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	fab3 f383 	clz	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d102      	bne.n	8000f8e <HAL_RCC_OscConfig+0x82>
 8000f88:	4b99      	ldr	r3, [pc, #612]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	e015      	b.n	8000fba <HAL_RCC_OscConfig+0xae>
 8000f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000faa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fb6:	4b8e      	ldr	r3, [pc, #568]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fbe:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000fc2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000fc6:	fa92 f2a2 	rbit	r2, r2
 8000fca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000fce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fd2:	fab2 f282 	clz	r2, r2
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	f042 0220 	orr.w	r2, r2, #32
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	f002 021f 	and.w	r2, r2, #31
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8102 	beq.w	80011f4 <HAL_RCC_OscConfig+0x2e8>
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 80fc 	bne.w	80011f4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f000 be93 	b.w	8001d28 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d106      	bne.n	800101c <HAL_RCC_OscConfig+0x110>
 800100e:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a77      	ldr	r2, [pc, #476]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e030      	b.n	800107e <HAL_RCC_OscConfig+0x172>
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x134>
 8001026:	4b72      	ldr	r3, [pc, #456]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a71      	ldr	r2, [pc, #452]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 800102c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a6e      	ldr	r2, [pc, #440]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e01e      	b.n	800107e <HAL_RCC_OscConfig+0x172>
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0x15a>
 800104c:	4b68      	ldr	r3, [pc, #416]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a67      	ldr	r2, [pc, #412]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a64      	ldr	r2, [pc, #400]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 800105e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e00b      	b.n	800107e <HAL_RCC_OscConfig+0x172>
 8001066:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a61      	ldr	r2, [pc, #388]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 800106c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b5f      	ldr	r3, [pc, #380]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a5e      	ldr	r2, [pc, #376]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d059      	beq.n	800113c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fc5e 	bl	8000948 <HAL_GetTick>
 800108c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001092:	f7ff fc59 	bl	8000948 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d902      	bls.n	80010a8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f000 be40 	b.w	8001d28 <HAL_RCC_OscConfig+0xe1c>
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80010bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c0:	fab3 f383 	clz	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d102      	bne.n	80010da <HAL_RCC_OscConfig+0x1ce>
 80010d4:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	e015      	b.n	8001106 <HAL_RCC_OscConfig+0x1fa>
 80010da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800110a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800110e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001112:	fa92 f2a2 	rbit	r2, r2
 8001116:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800111a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800111e:	fab2 f282 	clz	r2, r2
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	f042 0220 	orr.w	r2, r2, #32
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	f002 021f 	and.w	r2, r2, #31
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0ab      	beq.n	8001092 <HAL_RCC_OscConfig+0x186>
 800113a:	e05c      	b.n	80011f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fc04 	bl	8000948 <HAL_GetTick>
 8001140:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff fbff 	bl	8000948 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d902      	bls.n	800115c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	f000 bde6 	b.w	8001d28 <HAL_RCC_OscConfig+0xe1c>
 800115c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001160:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001170:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001174:	fab3 f383 	clz	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b01      	cmp	r3, #1
 8001186:	d102      	bne.n	800118e <HAL_RCC_OscConfig+0x282>
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x2ae>
 800118e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001192:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_RCC_OscConfig+0x2e4>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011be:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011c2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011c6:	fa92 f2a2 	rbit	r2, r2
 80011ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80011ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011d2:	fab2 f282 	clz	r2, r2
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	f042 0220 	orr.w	r2, r2, #32
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	f002 021f 	and.w	r2, r2, #31
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ab      	bne.n	8001146 <HAL_RCC_OscConfig+0x23a>
 80011ee:	e002      	b.n	80011f6 <HAL_RCC_OscConfig+0x2ea>
 80011f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8170 	beq.w	80014e6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001206:	4bd0      	ldr	r3, [pc, #832]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00c      	beq.n	800122c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001212:	4bcd      	ldr	r3, [pc, #820]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d16d      	bne.n	80012fa <HAL_RCC_OscConfig+0x3ee>
 800121e:	4bca      	ldr	r3, [pc, #808]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800122a:	d166      	bne.n	80012fa <HAL_RCC_OscConfig+0x3ee>
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800123e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001242:	fab3 f383 	clz	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d102      	bne.n	800125c <HAL_RCC_OscConfig+0x350>
 8001256:	4bbc      	ldr	r3, [pc, #752]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	e013      	b.n	8001284 <HAL_RCC_OscConfig+0x378>
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001262:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001266:	fa93 f3a3 	rbit	r3, r3
 800126a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001274:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001280:	4bb1      	ldr	r3, [pc, #708]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	2202      	movs	r2, #2
 8001286:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800128a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800128e:	fa92 f2a2 	rbit	r2, r2
 8001292:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001296:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800129a:	fab2 f282 	clz	r2, r2
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	f042 0220 	orr.w	r2, r2, #32
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	f002 021f 	and.w	r2, r2, #31
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <HAL_RCC_OscConfig+0x3ba>
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d002      	beq.n	80012c6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f000 bd31 	b.w	8001d28 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c6:	4ba0      	ldr	r3, [pc, #640]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	21f8      	movs	r1, #248	; 0xf8
 80012d6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80012de:	fa91 f1a1 	rbit	r1, r1
 80012e2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80012e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012ea:	fab1 f181 	clz	r1, r1
 80012ee:	b2c9      	uxtb	r1, r1
 80012f0:	408b      	lsls	r3, r1
 80012f2:	4995      	ldr	r1, [pc, #596]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f8:	e0f5      	b.n	80014e6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8085 	beq.w	8001410 <HAL_RCC_OscConfig+0x504>
 8001306:	2301      	movs	r3, #1
 8001308:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001318:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001326:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	461a      	mov	r2, r3
 800132e:	2301      	movs	r3, #1
 8001330:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fb09 	bl	8000948 <HAL_GetTick>
 8001336:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff fb04 	bl	8000948 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d902      	bls.n	8001352 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	f000 bceb 	b.w	8001d28 <HAL_RCC_OscConfig+0xe1c>
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001364:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <HAL_RCC_OscConfig+0x476>
 800137c:	4b72      	ldr	r3, [pc, #456]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	e013      	b.n	80013aa <HAL_RCC_OscConfig+0x49e>
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800139a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013a6:	4b68      	ldr	r3, [pc, #416]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	2202      	movs	r2, #2
 80013ac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013b4:	fa92 f2a2 	rbit	r2, r2
 80013b8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80013bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013c0:	fab2 f282 	clz	r2, r2
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f042 0220 	orr.w	r2, r2, #32
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	f002 021f 	and.w	r2, r2, #31
 80013d0:	2101      	movs	r1, #1
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0af      	beq.n	800133c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	21f8      	movs	r1, #248	; 0xf8
 80013ec:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80013f4:	fa91 f1a1 	rbit	r1, r1
 80013f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80013fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001400:	fab1 f181 	clz	r1, r1
 8001404:	b2c9      	uxtb	r1, r1
 8001406:	408b      	lsls	r3, r1
 8001408:	494f      	ldr	r1, [pc, #316]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
 800140e:	e06a      	b.n	80014e6 <HAL_RCC_OscConfig+0x5da>
 8001410:	2301      	movs	r3, #1
 8001412:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001422:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	461a      	mov	r2, r3
 8001438:	2300      	movs	r3, #0
 800143a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fa84 	bl	8000948 <HAL_GetTick>
 8001440:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fa7f 	bl	8000948 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d902      	bls.n	800145c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	f000 bc66 	b.w	8001d28 <HAL_RCC_OscConfig+0xe1c>
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800146e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	095b      	lsrs	r3, r3, #5
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d102      	bne.n	800148c <HAL_RCC_OscConfig+0x580>
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	e013      	b.n	80014b4 <HAL_RCC_OscConfig+0x5a8>
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_RCC_OscConfig+0x63c>)
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	2202      	movs	r2, #2
 80014b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014be:	fa92 f2a2 	rbit	r2, r2
 80014c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80014c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014ca:	fab2 f282 	clz	r2, r2
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	f042 0220 	orr.w	r2, r2, #32
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	f002 021f 	and.w	r2, r2, #31
 80014da:	2101      	movs	r1, #1
 80014dc:	fa01 f202 	lsl.w	r2, r1, r2
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1af      	bne.n	8001446 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80da 	beq.w	80016aa <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d069      	beq.n	80015d4 <HAL_RCC_OscConfig+0x6c8>
 8001500:	2301      	movs	r3, #1
 8001502:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001512:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001516:	fab3 f383 	clz	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_OscConfig+0x640>)
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	461a      	mov	r2, r3
 8001526:	2301      	movs	r3, #1
 8001528:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fa0d 	bl	8000948 <HAL_GetTick>
 800152e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e00d      	b.n	8001550 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fa08 	bl	8000948 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d905      	bls.n	8001550 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e3ef      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
 8001548:	40021000 	.word	0x40021000
 800154c:	10908120 	.word	0x10908120
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001568:	2202      	movs	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001580:	2202      	movs	r2, #2
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	fa93 f2a3 	rbit	r2, r3
 800158e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001592:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001594:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001598:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800159c:	2102      	movs	r1, #2
 800159e:	6019      	str	r1, [r3, #0]
 80015a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fa93 f1a3 	rbit	r1, r3
 80015aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015ae:	6019      	str	r1, [r3, #0]
  return result;
 80015b0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0b0      	beq.n	8001534 <HAL_RCC_OscConfig+0x628>
 80015d2:	e06a      	b.n	80016aa <HAL_RCC_OscConfig+0x79e>
 80015d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fa93 f2a3 	rbit	r2, r3
 80015e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015ea:	601a      	str	r2, [r3, #0]
  return result;
 80015ec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b8c      	ldr	r3, [pc, #560]	; (800182c <HAL_RCC_OscConfig+0x920>)
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	461a      	mov	r2, r3
 8001602:	2300      	movs	r3, #0
 8001604:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff f99f 	bl	8000948 <HAL_GetTick>
 800160a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160e:	e009      	b.n	8001624 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff f99a 	bl	8000948 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e381      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
 8001624:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001628:	2202      	movs	r2, #2
 800162a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001640:	2202      	movs	r2, #2
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	fa93 f2a3 	rbit	r2, r3
 8001666:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800166a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b6e      	ldr	r3, [pc, #440]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 800166e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001670:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001674:	2102      	movs	r1, #2
 8001676:	6019      	str	r1, [r3, #0]
 8001678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fa93 f1a3 	rbit	r1, r3
 8001682:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001686:	6019      	str	r1, [r3, #0]
  return result;
 8001688:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1b2      	bne.n	8001610 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8157 	beq.w	8001968 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d112      	bne.n	80016f2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	4b56      	ldr	r3, [pc, #344]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	4a55      	ldr	r2, [pc, #340]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 80016d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d6:	61d3      	str	r3, [r2, #28]
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_RCC_OscConfig+0x924>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d11a      	bne.n	8001734 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <HAL_RCC_OscConfig+0x924>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <HAL_RCC_OscConfig+0x924>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff f91d 	bl	8000948 <HAL_GetTick>
 800170e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	e009      	b.n	8001728 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001714:	f7ff f918 	bl	8000948 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e2ff      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <HAL_RCC_OscConfig+0x924>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ef      	beq.n	8001714 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x840>
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a39      	ldr	r2, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	e02f      	b.n	80017ac <HAL_RCC_OscConfig+0x8a0>
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x864>
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a33      	ldr	r2, [pc, #204]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a30      	ldr	r2, [pc, #192]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0x8a0>
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x888>
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a2a      	ldr	r2, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0x8a0>
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a20      	ldr	r2, [pc, #128]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d06a      	beq.n	800188c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b6:	f7ff f8c7 	bl	8000948 <HAL_GetTick>
 80017ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c0:	f7ff f8c2 	bl	8000948 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e2a7      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
 80017d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017dc:	2202      	movs	r2, #2
 80017de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017f4:	2202      	movs	r2, #2
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fa93 f2a3 	rbit	r2, r3
 8001802:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001806:	601a      	str	r2, [r3, #0]
  return result;
 8001808:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800180c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	095b      	lsrs	r3, r3, #5
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d108      	bne.n	8001834 <HAL_RCC_OscConfig+0x928>
 8001822:	4b01      	ldr	r3, [pc, #4]	; (8001828 <HAL_RCC_OscConfig+0x91c>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	e013      	b.n	8001850 <HAL_RCC_OscConfig+0x944>
 8001828:	40021000 	.word	0x40021000
 800182c:	10908120 	.word	0x10908120
 8001830:	40007000 	.word	0x40007000
 8001834:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001838:	2202      	movs	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	4bc0      	ldr	r3, [pc, #768]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001854:	2102      	movs	r1, #2
 8001856:	6011      	str	r1, [r2, #0]
 8001858:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	fa92 f1a2 	rbit	r1, r2
 8001862:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001866:	6011      	str	r1, [r2, #0]
  return result;
 8001868:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	fab2 f282 	clz	r2, r2
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f002 021f 	and.w	r2, r2, #31
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d09a      	beq.n	80017c0 <HAL_RCC_OscConfig+0x8b4>
 800188a:	e063      	b.n	8001954 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7ff f85c 	bl	8000948 <HAL_GetTick>
 8001890:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff f857 	bl	8000948 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e23c      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
 80018ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018b2:	2202      	movs	r2, #2
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ca:	2202      	movs	r2, #2
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018dc:	601a      	str	r2, [r3, #0]
  return result;
 80018de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_OscConfig+0x9f2>
 80018f8:	4b95      	ldr	r3, [pc, #596]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	e00d      	b.n	800191a <HAL_RCC_OscConfig+0xa0e>
 80018fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	fa93 f2a3 	rbit	r2, r3
 8001910:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	4b8e      	ldr	r3, [pc, #568]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800191e:	2102      	movs	r1, #2
 8001920:	6011      	str	r1, [r2, #0]
 8001922:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	fa92 f1a2 	rbit	r1, r2
 800192c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001930:	6011      	str	r1, [r2, #0]
  return result;
 8001932:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f002 021f 	and.w	r2, r2, #31
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f202 	lsl.w	r2, r1, r2
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1a0      	bne.n	8001896 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001954:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	4a7b      	ldr	r2, [pc, #492]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001966:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 81d9 	beq.w	8001d26 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	f000 81a6 	beq.w	8001cce <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b02      	cmp	r3, #2
 800198a:	f040 811e 	bne.w	8001bca <HAL_RCC_OscConfig+0xcbe>
 800198e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001992:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019a6:	601a      	str	r2, [r3, #0]
  return result;
 80019a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	461a      	mov	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7fe ffc0 	bl	8000948 <HAL_GetTick>
 80019c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019cc:	e009      	b.n	80019e2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ce:	f7fe ffbb 	bl	8000948 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1a2      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
 80019e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019fa:	601a      	str	r2, [r3, #0]
  return result;
 80019fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	095b      	lsrs	r3, r3, #5
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d102      	bne.n	8001a1c <HAL_RCC_OscConfig+0xb10>
 8001a16:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	e01b      	b.n	8001a54 <HAL_RCC_OscConfig+0xb48>
 8001a1c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a5c:	6011      	str	r1, [r2, #0]
 8001a5e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	fa92 f1a2 	rbit	r1, r2
 8001a68:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a6c:	6011      	str	r1, [r2, #0]
  return result;
 8001a6e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	fab2 f282 	clz	r2, r2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f042 0220 	orr.w	r2, r2, #32
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d19e      	bne.n	80019ce <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f023 020f 	bic.w	r2, r3, #15
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	492c      	ldr	r1, [pc, #176]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6a19      	ldr	r1, [r3, #32]
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	4925      	ldr	r1, [pc, #148]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fa93 f2a3 	rbit	r2, r3
 8001ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ad8:	601a      	str	r2, [r3, #0]
  return result;
 8001ada:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ade:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	461a      	mov	r2, r3
 8001af2:	2301      	movs	r3, #1
 8001af4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7fe ff27 	bl	8000948 <HAL_GetTick>
 8001afa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afe:	e009      	b.n	8001b14 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7fe ff22 	bl	8000948 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e109      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
 8001b14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	fa93 f2a3 	rbit	r2, r3
 8001b28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b2c:	601a      	str	r2, [r3, #0]
  return result;
 8001b2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0xc48>
 8001b48:	4b01      	ldr	r3, [pc, #4]	; (8001b50 <HAL_RCC_OscConfig+0xc44>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e01e      	b.n	8001b8c <HAL_RCC_OscConfig+0xc80>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f2a3 	rbit	r2, r3
 8001b82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0xe28>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b94:	6011      	str	r1, [r2, #0]
 8001b96:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	fa92 f1a2 	rbit	r1, r2
 8001ba0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ba4:	6011      	str	r1, [r2, #0]
  return result;
 8001ba6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d09b      	beq.n	8001b00 <HAL_RCC_OscConfig+0xbf4>
 8001bc8:	e0ad      	b.n	8001d26 <HAL_RCC_OscConfig+0xe1a>
 8001bca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001be2:	601a      	str	r2, [r3, #0]
  return result;
 8001be4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001be8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe fea2 	bl	8000948 <HAL_GetTick>
 8001c04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7fe fe9d 	bl	8000948 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e084      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
 8001c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c36:	601a      	str	r2, [r3, #0]
  return result;
 8001c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d102      	bne.n	8001c58 <HAL_RCC_OscConfig+0xd4c>
 8001c52:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <HAL_RCC_OscConfig+0xe28>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	e01b      	b.n	8001c90 <HAL_RCC_OscConfig+0xd84>
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f107 0318 	add.w	r3, r7, #24
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_RCC_OscConfig+0xe28>)
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	f107 0214 	add.w	r2, r7, #20
 8001c94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c98:	6011      	str	r1, [r2, #0]
 8001c9a:	f107 0214 	add.w	r2, r7, #20
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	fa92 f1a2 	rbit	r1, r2
 8001ca4:	f107 0210 	add.w	r2, r7, #16
 8001ca8:	6011      	str	r1, [r2, #0]
  return result;
 8001caa:	f107 0210 	add.w	r2, r7, #16
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f042 0220 	orr.w	r2, r2, #32
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d19e      	bne.n	8001c0a <HAL_RCC_OscConfig+0xcfe>
 8001ccc:	e02b      	b.n	8001d26 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e025      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_RCC_OscConfig+0xe28>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_RCC_OscConfig+0xe28>)
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cf0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d111      	bne.n	8001d22 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001cfe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d108      	bne.n	8001d22 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d14:	f003 020f 	and.w	r2, r3, #15
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09e      	sub	sp, #120	; 0x78
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e162      	b.n	8002016 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b90      	ldr	r3, [pc, #576]	; (8001f94 <HAL_RCC_ClockConfig+0x25c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d910      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	; (8001f94 <HAL_RCC_ClockConfig+0x25c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 0207 	bic.w	r2, r3, #7
 8001d66:	498b      	ldr	r1, [pc, #556]	; (8001f94 <HAL_RCC_ClockConfig+0x25c>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <HAL_RCC_ClockConfig+0x25c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e14a      	b.n	8002016 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	497f      	ldr	r1, [pc, #508]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80dc 	beq.w	8001f64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d13c      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xf6>
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d102      	bne.n	8001dde <HAL_RCC_ClockConfig+0xa6>
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	e00f      	b.n	8001dfe <HAL_RCC_ClockConfig+0xc6>
 8001dde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	667b      	str	r3, [r7, #100]	; 0x64
 8001dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df0:	663b      	str	r3, [r7, #96]	; 0x60
 8001df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dfa:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e02:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e06:	fa92 f2a2 	rbit	r2, r2
 8001e0a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f002 021f 	and.w	r2, r2, #31
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f202 	lsl.w	r2, r1, r2
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d17b      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0f3      	b.n	8002016 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d13c      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x178>
 8001e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x128>
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_ClockConfig+0x148>
 8001e60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
 8001e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e7c:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e84:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e88:	fa92 f2a2 	rbit	r2, r2
 8001e8c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e90:	fab2 f282 	clz	r2, r2
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f042 0220 	orr.w	r2, r2, #32
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f002 021f 	and.w	r2, r2, #31
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d13a      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0b2      	b.n	8002016 <HAL_RCC_ClockConfig+0x2de>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x1a0>
 8001ed2:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	e00d      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1bc>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	623b      	str	r3, [r7, #32]
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	61ba      	str	r2, [r7, #24]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	fa92 f2a2 	rbit	r2, r2
 8001efe:	617a      	str	r2, [r7, #20]
  return result;
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f042 0220 	orr.w	r2, r2, #32
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f002 021f 	and.w	r2, r2, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e079      	b.n	8002016 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f023 0203 	bic.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	491a      	ldr	r1, [pc, #104]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7fe fd08 	bl	8000948 <HAL_GetTick>
 8001f38:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7fe fd04 	bl	8000948 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e061      	b.n	8002016 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_RCC_ClockConfig+0x260>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 020c 	and.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1eb      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_ClockConfig+0x25c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d214      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_RCC_ClockConfig+0x25c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4906      	ldr	r1, [pc, #24]	; (8001f94 <HAL_RCC_ClockConfig+0x25c>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_RCC_ClockConfig+0x25c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e040      	b.n	8002016 <HAL_RCC_ClockConfig+0x2de>
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCC_ClockConfig+0x2e8>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	491a      	ldr	r1, [pc, #104]	; (8002020 <HAL_RCC_ClockConfig+0x2e8>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_RCC_ClockConfig+0x2e8>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4912      	ldr	r1, [pc, #72]	; (8002020 <HAL_RCC_ClockConfig+0x2e8>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fda:	f000 f829 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001fde:	4601      	mov	r1, r0
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_RCC_ClockConfig+0x2e8>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe8:	22f0      	movs	r2, #240	; 0xf0
 8001fea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	fa92 f2a2 	rbit	r2, r2
 8001ff2:	60fa      	str	r2, [r7, #12]
  return result;
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	fab2 f282 	clz	r2, r2
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	40d3      	lsrs	r3, r2
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x2ec>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	fa21 f303 	lsr.w	r3, r1, r3
 8002006:	4a08      	ldr	r2, [pc, #32]	; (8002028 <HAL_RCC_ClockConfig+0x2f0>)
 8002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_RCC_ClockConfig+0x2f4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fc56 	bl	80008c0 <HAL_InitTick>
  
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3778      	adds	r7, #120	; 0x78
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	08002714 	.word	0x08002714
 8002028:	200000b0 	.word	0x200000b0
 800202c:	200000b4 	.word	0x200000b4

08002030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b480      	push	{r7}
 8002032:	b08b      	sub	sp, #44	; 0x2c
 8002034:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b04      	cmp	r3, #4
 8002058:	d002      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x30>
 800205a:	2b08      	cmp	r3, #8
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0x36>
 800205e:	e03f      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002062:	623b      	str	r3, [r7, #32]
      break;
 8002064:	e03f      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800206c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002070:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	fa92 f2a2 	rbit	r2, r2
 8002078:	607a      	str	r2, [r7, #4]
  return result;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	40d3      	lsrs	r3, r2
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	220f      	movs	r2, #15
 8002094:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	fa92 f2a2 	rbit	r2, r2
 800209c:	60fa      	str	r2, [r7, #12]
  return result;
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	40d3      	lsrs	r3, r2
 80020a8:	4a15      	ldr	r2, [pc, #84]	; (8002100 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	e007      	b.n	80020da <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	623b      	str	r3, [r7, #32]
      break;
 80020de:	e002      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020e2:	623b      	str	r3, [r7, #32]
      break;
 80020e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e6:	6a3b      	ldr	r3, [r7, #32]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	372c      	adds	r7, #44	; 0x2c
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40021000 	.word	0x40021000
 80020f8:	007a1200 	.word	0x007a1200
 80020fc:	08002724 	.word	0x08002724
 8002100:	08002734 	.word	0x08002734

08002104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e01d      	b.n	8002152 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fb62 	bl	80007f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f000 f95a 	bl	80023fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b02      	cmp	r3, #2
 800216e:	d122      	bne.n	80021b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d11b      	bne.n	80021b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f06f 0202 	mvn.w	r2, #2
 8002186:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f90f 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 80021a2:	e005      	b.n	80021b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f901 	bl	80023ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f912 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d122      	bne.n	800220a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d11b      	bne.n	800220a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f06f 0204 	mvn.w	r2, #4
 80021da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f8e5 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 80021f6:	e005      	b.n	8002204 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f8d7 	bl	80023ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8e8 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b08      	cmp	r3, #8
 8002216:	d122      	bne.n	800225e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b08      	cmp	r3, #8
 8002224:	d11b      	bne.n	800225e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f06f 0208 	mvn.w	r2, #8
 800222e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2204      	movs	r2, #4
 8002234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f8bb 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 800224a:	e005      	b.n	8002258 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f8ad 	bl	80023ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8be 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b10      	cmp	r3, #16
 800226a:	d122      	bne.n	80022b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b10      	cmp	r3, #16
 8002278:	d11b      	bne.n	80022b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f06f 0210 	mvn.w	r2, #16
 8002282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2208      	movs	r2, #8
 8002288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f891 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 800229e:	e005      	b.n	80022ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f883 	bl	80023ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f894 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d10e      	bne.n	80022de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f06f 0201 	mvn.w	r2, #1
 80022d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f85d 	bl	8002398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d10e      	bne.n	800230a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	2b80      	cmp	r3, #128	; 0x80
 80022f8:	d107      	bne.n	800230a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f9ad 	bl	8002664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f9a0 	bl	8002678 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002350:	2b40      	cmp	r3, #64	; 0x40
 8002352:	d107      	bne.n	8002364 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f842 	bl	80023e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b20      	cmp	r3, #32
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b20      	cmp	r3, #32
 800237e:	d107      	bne.n	8002390 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0220 	mvn.w	r2, #32
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f960 	bl	8002650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a42      	ldr	r2, [pc, #264]	; (8002518 <TIM_Base_SetConfig+0x11c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241a:	d00f      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3f      	ldr	r2, [pc, #252]	; (800251c <TIM_Base_SetConfig+0x120>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00b      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3e      	ldr	r2, [pc, #248]	; (8002520 <TIM_Base_SetConfig+0x124>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d007      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a3d      	ldr	r2, [pc, #244]	; (8002524 <TIM_Base_SetConfig+0x128>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a3c      	ldr	r2, [pc, #240]	; (8002528 <TIM_Base_SetConfig+0x12c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d108      	bne.n	800244e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a31      	ldr	r2, [pc, #196]	; (8002518 <TIM_Base_SetConfig+0x11c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d01b      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2e      	ldr	r2, [pc, #184]	; (800251c <TIM_Base_SetConfig+0x120>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d017      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2d      	ldr	r2, [pc, #180]	; (8002520 <TIM_Base_SetConfig+0x124>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2c      	ldr	r2, [pc, #176]	; (8002524 <TIM_Base_SetConfig+0x128>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00f      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a2c      	ldr	r2, [pc, #176]	; (800252c <TIM_Base_SetConfig+0x130>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00b      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a2b      	ldr	r2, [pc, #172]	; (8002530 <TIM_Base_SetConfig+0x134>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <TIM_Base_SetConfig+0x138>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d003      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a25      	ldr	r2, [pc, #148]	; (8002528 <TIM_Base_SetConfig+0x12c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d108      	bne.n	80024a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <TIM_Base_SetConfig+0x11c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <TIM_Base_SetConfig+0x100>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <TIM_Base_SetConfig+0x128>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00f      	beq.n	80024fc <TIM_Base_SetConfig+0x100>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a13      	ldr	r2, [pc, #76]	; (800252c <TIM_Base_SetConfig+0x130>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00b      	beq.n	80024fc <TIM_Base_SetConfig+0x100>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <TIM_Base_SetConfig+0x134>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <TIM_Base_SetConfig+0x100>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a11      	ldr	r2, [pc, #68]	; (8002534 <TIM_Base_SetConfig+0x138>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d003      	beq.n	80024fc <TIM_Base_SetConfig+0x100>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <TIM_Base_SetConfig+0x12c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d103      	bne.n	8002504 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	615a      	str	r2, [r3, #20]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40000400 	.word	0x40000400
 8002520:	40000800 	.word	0x40000800
 8002524:	40013400 	.word	0x40013400
 8002528:	40015000 	.word	0x40015000
 800252c:	40014000 	.word	0x40014000
 8002530:	40014400 	.word	0x40014400
 8002534:	40014800 	.word	0x40014800

08002538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800254c:	2302      	movs	r3, #2
 800254e:	e06d      	b.n	800262c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a30      	ldr	r2, [pc, #192]	; (8002638 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d009      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2f      	ldr	r2, [pc, #188]	; (800263c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d004      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2d      	ldr	r2, [pc, #180]	; (8002640 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d108      	bne.n	80025a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002594:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d01d      	beq.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025cc:	d018      	beq.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a15      	ldr	r2, [pc, #84]	; (800263c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a11      	ldr	r2, [pc, #68]	; (8002640 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d10c      	bne.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	4313      	orrs	r3, r2
 8002610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40013400 	.word	0x40013400
 8002640:	40015000 	.word	0x40015000
 8002644:	40000400 	.word	0x40000400
 8002648:	40000800 	.word	0x40000800
 800264c:	40014000 	.word	0x40014000

08002650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <__libc_init_array>:
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	4e0d      	ldr	r6, [pc, #52]	; (80026c4 <__libc_init_array+0x38>)
 8002690:	4c0d      	ldr	r4, [pc, #52]	; (80026c8 <__libc_init_array+0x3c>)
 8002692:	1ba4      	subs	r4, r4, r6
 8002694:	10a4      	asrs	r4, r4, #2
 8002696:	2500      	movs	r5, #0
 8002698:	42a5      	cmp	r5, r4
 800269a:	d109      	bne.n	80026b0 <__libc_init_array+0x24>
 800269c:	4e0b      	ldr	r6, [pc, #44]	; (80026cc <__libc_init_array+0x40>)
 800269e:	4c0c      	ldr	r4, [pc, #48]	; (80026d0 <__libc_init_array+0x44>)
 80026a0:	f000 f82c 	bl	80026fc <_init>
 80026a4:	1ba4      	subs	r4, r4, r6
 80026a6:	10a4      	asrs	r4, r4, #2
 80026a8:	2500      	movs	r5, #0
 80026aa:	42a5      	cmp	r5, r4
 80026ac:	d105      	bne.n	80026ba <__libc_init_array+0x2e>
 80026ae:	bd70      	pop	{r4, r5, r6, pc}
 80026b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026b4:	4798      	blx	r3
 80026b6:	3501      	adds	r5, #1
 80026b8:	e7ee      	b.n	8002698 <__libc_init_array+0xc>
 80026ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026be:	4798      	blx	r3
 80026c0:	3501      	adds	r5, #1
 80026c2:	e7f2      	b.n	80026aa <__libc_init_array+0x1e>
 80026c4:	08002744 	.word	0x08002744
 80026c8:	08002744 	.word	0x08002744
 80026cc:	08002744 	.word	0x08002744
 80026d0:	08002748 	.word	0x08002748

080026d4 <memcpy>:
 80026d4:	b510      	push	{r4, lr}
 80026d6:	1e43      	subs	r3, r0, #1
 80026d8:	440a      	add	r2, r1
 80026da:	4291      	cmp	r1, r2
 80026dc:	d100      	bne.n	80026e0 <memcpy+0xc>
 80026de:	bd10      	pop	{r4, pc}
 80026e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026e8:	e7f7      	b.n	80026da <memcpy+0x6>

080026ea <memset>:
 80026ea:	4402      	add	r2, r0
 80026ec:	4603      	mov	r3, r0
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d100      	bne.n	80026f4 <memset+0xa>
 80026f2:	4770      	bx	lr
 80026f4:	f803 1b01 	strb.w	r1, [r3], #1
 80026f8:	e7f9      	b.n	80026ee <memset+0x4>
	...

080026fc <_init>:
 80026fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fe:	bf00      	nop
 8002700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002702:	bc08      	pop	{r3}
 8002704:	469e      	mov	lr, r3
 8002706:	4770      	bx	lr

08002708 <_fini>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr
