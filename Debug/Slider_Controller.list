
Slider_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005478  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08005654  08005654  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005654  08005654  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800565c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001c8  08005824  000201c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08005824  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016840  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000324d  00000000  00000000  00036a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00039c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  0003ab18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f9f0  00000000  00000000  0003b810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f056  00000000  00000000  0005b200  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b13db  00000000  00000000  0006a256  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b631  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d70  00000000  00000000  0011b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c8 	.word	0x200001c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080055f8 	.word	0x080055f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001cc 	.word	0x200001cc
 80001d4:	080055f8 	.word	0x080055f8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <get_amount_of_times>:

#include "FIFO.h"
#include <stdio.h>
#include <stdlib.h>

uint8_t get_amount_of_times(Fifo_data *data) {
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint8_t size = 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
	if (!data) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d107      	bne.n	8000b36 <get_amount_of_times+0x22>
		return 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e00a      	b.n	8000b40 <get_amount_of_times+0x2c>
	}
	while (data->next) {
		size++;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
		data = data->next;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	607b      	str	r3, [r7, #4]
	while (data->next) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f5      	bne.n	8000b2a <get_amount_of_times+0x16>
	}
	return size;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <read_data>:

uint16_t read_data(Fifo_data **data) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint16_t retVal;
	if (*data == NULL) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <read_data+0x16>
		return -1;
 8000b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b60:	e012      	b.n	8000b88 <read_data+0x3c>
	} else {
		Fifo_data *new = NULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
		retVal = (*data)->time;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	889b      	ldrh	r3, [r3, #4]
 8000b6c:	817b      	strh	r3, [r7, #10]
		new = (*data)->next;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
		free(*data);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f004 fbe6 	bl	800534c <free>
		(*data) = new;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	601a      	str	r2, [r3, #0]
		return retVal;
 8000b86:	897b      	ldrh	r3, [r7, #10]
	}
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <getLast>:

// Temporary function
Fifo_data *getLast(Fifo_data *data)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if(data)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <getLast+0x1e>
	{
		while(data->next)
 8000b9e:	e002      	b.n	8000ba6 <getLast+0x16>
			data=data->next;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	607b      	str	r3, [r7, #4]
		while(data->next)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f8      	bne.n	8000ba0 <getLast+0x10>
	}
	return data;
 8000bae:	687b      	ldr	r3, [r7, #4]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <write_data_to_FIFO>:
void write_data_to_FIFO(Fifo_data **data, uint16_t val)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
	if(*data)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d015      	beq.n	8000bfc <write_data_to_FIFO+0x40>
	{
		Fifo_data * current =getLast(*data);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ffdb 	bl	8000b90 <getLast>
 8000bda:	60f8      	str	r0, [r7, #12]
		current->next=(Fifo_data *)malloc(sizeof(Fifo_data));
 8000bdc:	2008      	movs	r0, #8
 8000bde:	f004 fbad 	bl	800533c <malloc>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	601a      	str	r2, [r3, #0]
		current->next->next = NULL;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
		current->next->time= val;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	887a      	ldrh	r2, [r7, #2]
 8000bf8:	809a      	strh	r2, [r3, #4]
	{
		(*data)=(Fifo_data*)malloc(sizeof(Fifo_data));
		(*data)->next=NULL;
		(*data)->time=val;
	}
}
 8000bfa:	e00e      	b.n	8000c1a <write_data_to_FIFO+0x5e>
		(*data)=(Fifo_data*)malloc(sizeof(Fifo_data));
 8000bfc:	2008      	movs	r0, #8
 8000bfe:	f004 fb9d 	bl	800533c <malloc>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
		(*data)->next=NULL;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
		(*data)->time=val;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	809a      	strh	r2, [r3, #4]
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <read_time>:
int read_time(Fifo_data *data)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b085      	sub	sp, #20
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
	int time = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
	if(!data)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10a      	bne.n	8000c4a <read_time+0x28>
	{
		return 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	e00c      	b.n	8000c52 <read_time+0x30>
	}
	else{
		while(data)
		{
			time+=data->time;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	889b      	ldrh	r3, [r3, #4]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
			data=data->next;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	607b      	str	r3, [r7, #4]
		while(data)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f3      	bne.n	8000c38 <read_time+0x16>
		}
	}
	return time;
 8000c50:	68fb      	ldr	r3, [r7, #12]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <HAL_TIM_PeriodElapsedCallback>:

MotorErr retval = MOTOR_OK;

DataReadEnum DataRead = data_unavailable;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a3b      	ldr	r2, [pc, #236]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d160      	bne.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0xd4>
		if(MOTOR_OK == retval)
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d117      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			for(int i=0;i<MOTORS_NUM;i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e010      	b.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x42>
			{
				retval = motorRun(&Motor_set[i]);
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fbd4 	bl	800143c <motorRun>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c9a:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<MOTORS_NUM;i++)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	ddeb      	ble.n	8000c80 <HAL_TIM_PeriodElapsedCallback+0x20>
			state = run_trigger(&timer_T);
		else {
			// Do nothing
		}
	}
}
 8000ca8:	e054      	b.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0xf4>
		else if(MOTOR_INTERRUPT_ERROR == retval)
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d12c      	bne.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0xac>
			for(int i=0;i<MOTORS_NUM;i++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	e025      	b.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0xa4>
				if(i==0)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d107      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x6e>
					retval = set(Motor_set);
 8000cbe:	4829      	ldr	r0, [pc, #164]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000cc0:	f000 feae 	bl	8001a20 <set>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	e00d      	b.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x8a>
					retval = set_for_angle(&Motor_set[i]);
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	1a9b      	subs	r3, r3, r2
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 ff07 	bl	8001af0 <set_for_angle>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ce8:	701a      	strb	r2, [r3, #0]
				motorStartMove(&Motor_set[i]);
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4613      	mov	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 fc38 	bl	800156e <motorStartMove>
			for(int i=0;i<MOTORS_NUM;i++)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	3301      	adds	r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	ddd6      	ble.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0x58>
}
 8000d0a:	e023      	b.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0xf4>
			for(int i=0;i<MOTORS_NUM;i++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	e00c      	b.n	8000d2c <HAL_TIM_PeriodElapsedCallback+0xcc>
				motorStop(&Motor_set[i]);
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4613      	mov	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d1e:	4413      	add	r3, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fb5e 	bl	80013e2 <motorStop>
			for(int i=0;i<MOTORS_NUM;i++)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	ddef      	ble.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0xb2>
}
 8000d32:	e00f      	b.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0xf4>
	} else if (htim->Instance == TIM7) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10a      	bne.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0xf4>
		if (1 == state)
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d106      	bne.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0xf4>
			state = run_trigger(&timer_T);
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000d48:	f000 fdf0 	bl	800192c <run_trigger>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40001000 	.word	0x40001000
 8000d60:	200001e4 	.word	0x200001e4
 8000d64:	20000260 	.word	0x20000260
 8000d68:	40001400 	.word	0x40001400
 8000d6c:	20000001 	.word	0x20000001
 8000d70:	200001f8 	.word	0x200001f8

08000d74 <HAL_UART_RxCpltCallback>:
			//motorStop(Motor_set + i);
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_UART_RxCpltCallback+0x38>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d10e      	bne.n	8000da4 <HAL_UART_RxCpltCallback+0x30>
		static int idx=1;
		HAL_UART_Receive_IT(&huart3, (uint16_t*) (data+idx), 2);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_UART_RxCpltCallback+0x3c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <HAL_UART_RxCpltCallback+0x40>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	2202      	movs	r2, #2
 8000d92:	4619      	mov	r1, r3
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <HAL_UART_RxCpltCallback+0x44>)
 8000d96:	f003 fc2f 	bl	80045f8 <HAL_UART_Receive_IT>
		idx++;
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_UART_RxCpltCallback+0x3c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <HAL_UART_RxCpltCallback+0x3c>)
 8000da2:	6013      	str	r3, [r2, #0]
	}
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40004800 	.word	0x40004800
 8000db0:	20000004 	.word	0x20000004
 8000db4:	20000234 	.word	0x20000234
 8000db8:	20000434 	.word	0x20000434

08000dbc <add_motors>:
				},
};


void add_motors(Motor_T *sett)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	sett[0]=motor1;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <add_motors+0x44>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	4611      	mov	r1, r2
 8000dcc:	2370      	movs	r3, #112	; 0x70
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f004 fac4 	bl	800535c <memcpy>
	sett[1]=motor2;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3370      	adds	r3, #112	; 0x70
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <add_motors+0x48>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	4611      	mov	r1, r2
 8000dde:	2370      	movs	r3, #112	; 0x70
 8000de0:	461a      	mov	r2, r3
 8000de2:	f004 fabb 	bl	800535c <memcpy>
	sett[2]=motor3;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	33e0      	adds	r3, #224	; 0xe0
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <add_motors+0x4c>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	4611      	mov	r1, r2
 8000df0:	2370      	movs	r3, #112	; 0x70
 8000df2:	461a      	mov	r2, r3
 8000df4:	f004 fab2 	bl	800535c <memcpy>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000078 	.word	0x20000078
 8000e08:	200000e8 	.word	0x200000e8

08000e0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a52      	ldr	r2, [pc, #328]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e2c:	6153      	str	r3, [r2, #20]
 8000e2e:	4b50      	ldr	r3, [pc, #320]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a46      	ldr	r2, [pc, #280]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a40      	ldr	r2, [pc, #256]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b3e      	ldr	r3, [pc, #248]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a3a      	ldr	r2, [pc, #232]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <MX_GPIO_Init+0x164>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAMERA_T_Pin|MOBILE_T_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2124      	movs	r1, #36	; 0x24
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f001 fc35 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_MS1_Pin|MOTOR2_STEP_Pin|MOTOR2_DIR_Pin|MOTOR1_STEP_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f001 fc2e 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f641 71f0 	movw	r1, #8176	; 0x1ff0
 8000eba:	482e      	ldr	r0, [pc, #184]	; (8000f74 <MX_GPIO_Init+0x168>)
 8000ebc:	f001 fc28 	bl	8002710 <HAL_GPIO_WritePin>
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin|MOTOR3_MS3_Pin|MOTOR3_MS2_Pin
                          |MOTOR3_MS1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f24c 0173 	movw	r1, #49267	; 0xc073
 8000ec6:	482c      	ldr	r0, [pc, #176]	; (8000f78 <MX_GPIO_Init+0x16c>)
 8000ec8:	f001 fc22 	bl	8002710 <HAL_GPIO_WritePin>
                          |MOTOR3_DIR_Pin|MOTOR3_STEP_Pin|MOTOR3_SLEEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR3_RESET_GPIO_Port, MOTOR3_RESET_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2104      	movs	r1, #4
 8000ed0:	482a      	ldr	r0, [pc, #168]	; (8000f7c <MX_GPIO_Init+0x170>)
 8000ed2:	f001 fc1d 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CAMERA_T_Pin|MOTOR2_MS1_Pin|MOBILE_T_Pin|MOTOR2_STEP_Pin
 8000ed6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eda:	617b      	str	r3, [r7, #20]
                          |MOTOR2_DIR_Pin|MOTOR1_STEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f001 fa83 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000ef6:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 8000efa:	617b      	str	r3, [r7, #20]
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin|MOTOR3_MS3_Pin|MOTOR3_MS2_Pin
                          |MOTOR3_MS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4819      	ldr	r0, [pc, #100]	; (8000f74 <MX_GPIO_Init+0x168>)
 8000f10:	f001 fa74 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin
 8000f14:	f24c 0373 	movw	r3, #49267	; 0xc073
 8000f18:	617b      	str	r3, [r7, #20]
                          |MOTOR3_DIR_Pin|MOTOR3_STEP_Pin|MOTOR3_SLEEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4812      	ldr	r0, [pc, #72]	; (8000f78 <MX_GPIO_Init+0x16c>)
 8000f2e:	f001 fa65 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_Pin;
 8000f32:	2304      	movs	r3, #4
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_GPIO_Init+0x174>)
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_GPIO_Init+0x16c>)
 8000f46:	f001 fa59 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR3_RESET_Pin;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR3_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_GPIO_Init+0x170>)
 8000f62:	f001 fa4b 	bl	80023fc <HAL_GPIO_Init>

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000800 	.word	0x48000800
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48000c00 	.word	0x48000c00
 8000f80:	10110000 	.word	0x10110000

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f001 f85f 	bl	800204c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 f899 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f7ff ff3b 	bl	8000e0c <MX_GPIO_Init>
  MX_TIM6_Init();
 8000f96:	f000 ff05 	bl	8001da4 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000f9a:	f000 ffb1 	bl	8001f00 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000f9e:	f000 ff37 	bl	8001e10 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	add_motors(Motor_set);
 8000fa2:	483f      	ldr	r0, [pc, #252]	; (80010a0 <main+0x11c>)
 8000fa4:	f7ff ff0a 	bl	8000dbc <add_motors>
	HAL_UART_Receive_IT(&huart3, (uint16_t*) data, 2);
 8000fa8:	2202      	movs	r2, #2
 8000faa:	493e      	ldr	r1, [pc, #248]	; (80010a4 <main+0x120>)
 8000fac:	483e      	ldr	r0, [pc, #248]	; (80010a8 <main+0x124>)
 8000fae:	f003 fb23 	bl	80045f8 <HAL_UART_Receive_IT>
	while (data_unavailable == DataRead)
 8000fb2:	e006      	b.n	8000fc2 <main+0x3e>
		DataRead = DataReceive(data);
 8000fb4:	483b      	ldr	r0, [pc, #236]	; (80010a4 <main+0x120>)
 8000fb6:	f000 fc58 	bl	800186a <DataReceive>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <main+0x128>)
 8000fc0:	701a      	strb	r2, [r3, #0]
	while (data_unavailable == DataRead)
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <main+0x128>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d0f4      	beq.n	8000fb4 <main+0x30>
	//Waiting for data
	UART_WriteData(Motor_set, data, &timer_T);
 8000fca:	4a39      	ldr	r2, [pc, #228]	; (80010b0 <main+0x12c>)
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <main+0x120>)
 8000fce:	4834      	ldr	r0, [pc, #208]	; (80010a0 <main+0x11c>)
 8000fd0:	f000 fbd6 	bl	8001780 <UART_WriteData>
	init_t(&timer_T, Motor_set);
 8000fd4:	4932      	ldr	r1, [pc, #200]	; (80010a0 <main+0x11c>)
 8000fd6:	4836      	ldr	r0, [pc, #216]	; (80010b0 <main+0x12c>)
 8000fd8:	f000 fd0f 	bl	80019fa <init_t>
	for (int i = 0; i < MOTORS_NUM; i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	e01f      	b.n	8001022 <main+0x9e>
		Motor_Init(Motor_set + i);
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <main+0x11c>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f9b2 	bl	800135c <Motor_Init>
		if (i == 0)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <main+0x82>
			set(Motor_set);
 8000ffe:	4828      	ldr	r0, [pc, #160]	; (80010a0 <main+0x11c>)
 8001000:	f000 fd0e 	bl	8001a20 <set>
 8001004:	e00a      	b.n	800101c <main+0x98>
		else
			set_for_angle(Motor_set + i);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	461a      	mov	r2, r3
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <main+0x11c>)
 8001014:	4413      	add	r3, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fd6a 	bl	8001af0 <set_for_angle>
	for (int i = 0; i < MOTORS_NUM; i++) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3301      	adds	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b02      	cmp	r3, #2
 8001026:	dddc      	ble.n	8000fe2 <main+0x5e>
	}
	motorStartMove(Motor_set);
 8001028:	481d      	ldr	r0, [pc, #116]	; (80010a0 <main+0x11c>)
 800102a:	f000 faa0 	bl	800156e <motorStartMove>
	motorStartMove(&Motor_set[1]);
 800102e:	4821      	ldr	r0, [pc, #132]	; (80010b4 <main+0x130>)
 8001030:	f000 fa9d 	bl	800156e <motorStartMove>
	motorStartMove(&Motor_set[2]);
 8001034:	4820      	ldr	r0, [pc, #128]	; (80010b8 <main+0x134>)
 8001036:	f000 fa9a 	bl	800156e <motorStartMove>
	while(data_confirm != DataRead)
 800103a:	e006      	b.n	800104a <main+0xc6>
		DataRead = DataReceive(data);
 800103c:	4819      	ldr	r0, [pc, #100]	; (80010a4 <main+0x120>)
 800103e:	f000 fc14 	bl	800186a <DataReceive>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <main+0x128>)
 8001048:	701a      	strb	r2, [r3, #0]
	while(data_confirm != DataRead)
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <main+0x128>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d1f4      	bne.n	800103c <main+0xb8>
	HAL_TIM_Base_Start_IT(&htim6);
 8001052:	481a      	ldr	r0, [pc, #104]	; (80010bc <main+0x138>)
 8001054:	f002 ff0a 	bl	8003e6c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <main+0x13c>)
 800105a:	f002 ff07 	bl	8003e6c <HAL_TIM_Base_Start_IT>
	UART_startmove();
 800105e:	f000 fb6f 	bl	8001740 <UART_startmove>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(data_stop == DataReceive(data))
 8001062:	4810      	ldr	r0, [pc, #64]	; (80010a4 <main+0x120>)
 8001064:	f000 fc01 	bl	800186a <DataReceive>
 8001068:	4603      	mov	r3, r0
 800106a:	2b03      	cmp	r3, #3
 800106c:	d1f9      	bne.n	8001062 <main+0xde>
		{
			for(int i=0;i<MOTORS_NUM;++i)
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	e00d      	b.n	8001090 <main+0x10c>
				motorStop(Motor_set+i);
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	4613      	mov	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	1a9b      	subs	r3, r3, r2
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	461a      	mov	r2, r3
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <main+0x11c>)
 8001082:	4413      	add	r3, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f9ac 	bl	80013e2 <motorStop>
			for(int i=0;i<MOTORS_NUM;++i)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b02      	cmp	r3, #2
 8001094:	ddee      	ble.n	8001074 <main+0xf0>
			HAL_TIM_Base_Stop_IT(&htim7);
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <main+0x13c>)
 8001098:	f002 ff12 	bl	8003ec0 <HAL_TIM_Base_Stop_IT>
		if(data_stop == DataReceive(data))
 800109c:	e7e1      	b.n	8001062 <main+0xde>
 800109e:	bf00      	nop
 80010a0:	20000260 	.word	0x20000260
 80010a4:	20000234 	.word	0x20000234
 80010a8:	20000434 	.word	0x20000434
 80010ac:	20000000 	.word	0x20000000
 80010b0:	200001f8 	.word	0x200001f8
 80010b4:	200002d0 	.word	0x200002d0
 80010b8:	20000340 	.word	0x20000340
 80010bc:	200003b4 	.word	0x200003b4
 80010c0:	200003f4 	.word	0x200003f4

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0a6      	sub	sp, #152	; 0x98
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ce:	2228      	movs	r2, #40	; 0x28
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f94d 	bl	8005372 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2258      	movs	r2, #88	; 0x58
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 f93f 	bl	8005372 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fe:	2301      	movs	r3, #1
 8001100:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001110:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fb0c 	bl	8002740 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800112e:	f000 f827 	bl	8001180 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2302      	movs	r3, #2
 8001138:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001142:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001148:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800114c:	2102      	movs	r1, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fa0c 	bl	800356c <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800115a:	f000 f811 	bl	8001180 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800115e:	2304      	movs	r3, #4
 8001160:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fc35 	bl	80039d8 <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001174:	f000 f804 	bl	8001180 <Error_Handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3798      	adds	r7, #152	; 0x98
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <Motor_PinMode>:
 * 4 -> 1/16 steep
 *
 * While init mircosteep is set to 0 ( Full steep)
 ********************************************/

void Motor_PinMode(Motor_T *sett) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6998      	ldr	r0, [r3, #24]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	8b99      	ldrh	r1, [r3, #28]
			(sett->flags.isOn) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 80011aa:	461a      	mov	r2, r3
 80011ac:	f001 fab0 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	8899      	ldrh	r1, [r3, #4]
			(sett->flags.reset) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf0c      	ite	eq
 80011c8:	2301      	moveq	r3, #1
 80011ca:	2300      	movne	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	f001 fa9e 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6898      	ldr	r0, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	8999      	ldrh	r1, [r3, #12]
			(sett->flags.sleep) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	f001 fa8c 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6918      	ldr	r0, [r3, #16]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8a99      	ldrh	r1, [r3, #20]
			(sett->flags.direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 8001210:	461a      	mov	r2, r3
 8001212:	f001 fa7d 	bl	8002710 <HAL_GPIO_WritePin>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <Motor_MicroPinSet>:

MotorErr Motor_MicroPinSet(Motor_T *sett) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	MotorErr retValue = MOTOR_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
	switch (sett->device.microstep) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001232:	2b04      	cmp	r3, #4
 8001234:	f200 808b 	bhi.w	800134e <Motor_MicroPinSet+0x12e>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <Motor_MicroPinSet+0x20>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	08001255 	.word	0x08001255
 8001244:	08001287 	.word	0x08001287
 8001248:	080012b9 	.word	0x080012b9
 800124c:	080012eb 	.word	0x080012eb
 8001250:	0800131d 	.word	0x0800131d
	case 0:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a18      	ldr	r0, [r3, #32]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	f001 fa56 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800126c:	2200      	movs	r2, #0
 800126e:	4619      	mov	r1, r3
 8001270:	f001 fa4e 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f001 fa46 	bl	8002710 <HAL_GPIO_WritePin>
		break;
 8001284:	e065      	b.n	8001352 <Motor_MicroPinSet+0x132>
	case 1:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a18      	ldr	r0, [r3, #32]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800128e:	2201      	movs	r2, #1
 8001290:	4619      	mov	r1, r3
 8001292:	f001 fa3d 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	f001 fa35 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	f001 fa2d 	bl	8002710 <HAL_GPIO_WritePin>
		break;
 80012b6:	e04c      	b.n	8001352 <Motor_MicroPinSet+0x132>
	case 2:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a18      	ldr	r0, [r3, #32]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	f001 fa24 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80012d0:	2201      	movs	r2, #1
 80012d2:	4619      	mov	r1, r3
 80012d4:	f001 fa1c 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	f001 fa14 	bl	8002710 <HAL_GPIO_WritePin>
		break;
 80012e8:	e033      	b.n	8001352 <Motor_MicroPinSet+0x132>
	case 3:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a18      	ldr	r0, [r3, #32]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012f2:	2201      	movs	r2, #1
 80012f4:	4619      	mov	r1, r3
 80012f6:	f001 fa0b 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001302:	2201      	movs	r2, #1
 8001304:	4619      	mov	r1, r3
 8001306:	f001 fa03 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	f001 f9fb 	bl	8002710 <HAL_GPIO_WritePin>
		break;
 800131a:	e01a      	b.n	8001352 <Motor_MicroPinSet+0x132>

	case 4:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a18      	ldr	r0, [r3, #32]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f001 f9f2 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001334:	2201      	movs	r2, #1
 8001336:	4619      	mov	r1, r3
 8001338:	f001 f9ea 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_SET);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001344:	2201      	movs	r2, #1
 8001346:	4619      	mov	r1, r3
 8001348:	f001 f9e2 	bl	8002710 <HAL_GPIO_WritePin>
		break;
 800134c:	e001      	b.n	8001352 <Motor_MicroPinSet+0x132>
	default:
		retValue = MOTOR_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
	}
	return retValue;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <Motor_Init>:

void Motor_Init(Motor_T *sett) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	sett->flags.isOn = 0;
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800136a:	f36f 0300 	bfc	r3, #0, #1
 800136e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.reset = 0;
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001378:	f36f 0341 	bfc	r3, #1, #1
 800137c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.direction = CWC;
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001386:	f36f 03c3 	bfc	r3, #3, #1
 800138a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.stepPhase = LOW;
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80013a2:	f36f 1304 	bfc	r3, #4, #1
 80013a6:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	sett->counter.pulse = 0;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sett->counter.stepLeft = 0;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
	sett->data.position = 0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	659a      	str	r2, [r3, #88]	; 0x58
	sett->device.points_num = -1;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	22ff      	movs	r2, #255	; 0xff
 80013c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	sett->device.microstep = 0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Motor_PinMode(sett);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fedd 	bl	800118e <Motor_PinMode>
	Motor_MicroPinSet(sett);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff23 	bl	8001220 <Motor_MicroPinSet>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <motorStop>:

MotorErr motorStop(Motor_T *sett) {
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]

	if (sett->flags.reset) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <motorStop+0x20>
		return MOTOR_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e018      	b.n	8001434 <motorStop+0x52>
	}

	sett->flags.isOn = 0;
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001408:	f36f 0300 	bfc	r3, #0, #1
 800140c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.stepPhase = LOW;
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001424:	f36f 1304 	bfc	r3, #4, #1
 8001428:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	Motor_PinMode(sett);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff feae 	bl	800118e <Motor_PinMode>

	return retval;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <motorRun>:
MotorErr motorRun(Motor_T *sett) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
	if (!sett->flags.reset && !sett->flags.sleep) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 8081 	bne.w	800155c <motorRun+0x120>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d178      	bne.n	800155c <motorRun+0x120>
		--(sett->counter.changeTime);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800146e:	3b01      	subs	r3, #1
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	879a      	strh	r2, [r3, #60]	; 0x3c
		if (sett->counter.changeTime <= 0) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800147a:	2b00      	cmp	r3, #0
 800147c:	d171      	bne.n	8001562 <motorRun+0x126>
			sett->counter.changeTime = sett->counter.pulse;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	879a      	strh	r2, [r3, #60]	; 0x3c
			--(sett->counter.stepLeft);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40

			if (sett->counter.stepLeft <= 0) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	2b00      	cmp	r3, #0
 8001498:	dc04      	bgt.n	80014a4 <motorRun+0x68>
				motorStop(sett);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa1 	bl	80013e2 <motorStop>
				return MOTOR_INTERRUPT_ERROR;
 80014a0:	2302      	movs	r3, #2
 80014a2:	e060      	b.n	8001566 <motorRun+0x12a>
			}

			switch (sett->flags.stepPhase) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d010      	beq.n	80014d6 <motorRun+0x9a>
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d148      	bne.n	800154a <motorRun+0x10e>
			case HIGH:
				sett->flags.stepPhase = LOW;
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80014be:	f36f 1304 	bfc	r3, #4, #1
 80014c2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 0;
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80014cc:	f36f 0300 	bfc	r3, #0, #1
 80014d0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				break;
 80014d4:	e03b      	b.n	800154e <motorRun+0x112>
			case LOW:
				sett->flags.stepPhase = HIGH;
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 1;
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				if (sett->flags.direction == CWC) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d111      	bne.n	8001526 <motorRun+0xea>
					sett->data.position -= sett->device.stepSize;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151c:	ee17 2a90 	vmov	r2, s15
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	659a      	str	r2, [r3, #88]	; 0x58
				} else {
					sett->data.position += sett->device.stepSize;
				}
				break;
 8001524:	e013      	b.n	800154e <motorRun+0x112>
					sett->data.position += sett->device.stepSize;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001540:	ee17 2a90 	vmov	r2, s15
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	659a      	str	r2, [r3, #88]	; 0x58
				break;
 8001548:	e001      	b.n	800154e <motorRun+0x112>
			default:
				retval = MOTOR_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
			}
			if (retval == MOTOR_OK) {
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d106      	bne.n	8001562 <motorRun+0x126>
				Motor_PinMode(sett);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fe1a 	bl	800118e <Motor_PinMode>
		if (sett->counter.changeTime <= 0) {
 800155a:	e002      	b.n	8001562 <motorRun+0x126>
			}
		}
	} else {
		retval = MOTOR_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e000      	b.n	8001564 <motorRun+0x128>
		if (sett->counter.changeTime <= 0) {
 8001562:	bf00      	nop
	}

	return retval;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <motorStartMove>:
MotorErr motorStartMove(Motor_T *sett) {
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
	if (sett->counter.stepLeft <= 0 || sett->counter.pulse <= 0) {
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	dd04      	ble.n	8001588 <motorStartMove+0x1a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <motorStartMove+0x1e>
		return MOTOR_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e025      	b.n	80015d8 <motorStartMove+0x6a>
	}

	if (sett->flags.reset) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <motorStartMove+0x32>
		return MOTOR_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e01b      	b.n	80015d8 <motorStartMove+0x6a>
	}

	if (sett->flags.stepPhase != LOW) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <motorStartMove+0x46>
		return MOTOR_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e011      	b.n	80015d8 <motorStartMove+0x6a>
	}

	sett->flags.sleep = 0;
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80015ba:	f36f 0382 	bfc	r3, #2, #1
 80015be:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 1;
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	Motor_PinMode(sett);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fddc 	bl	800118e <Motor_PinMode>

	return MOTOR_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <prepareMotor>:

void prepareMotor(Motor_T *sett)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if(sett->device.positionStart <0)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da07      	bge.n	8001602 <prepareMotor+0x22>
		sett->flags.direction = CWC;
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80015f8:	f36f 03c3 	bfc	r3, #3, #1
 80015fc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8001600:	e006      	b.n	8001610 <prepareMotor+0x30>
	else
		sett->flags.direction = CW;
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	sett->flags.sleep = 0;
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001616:	f36f 0382 	bfc	r3, #2, #1
 800161a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 1;
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	uint8_t iter = ceil(abs(sett->device.positionStart)/sett->device.stepSize);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8001632:	2b00      	cmp	r3, #0
 8001634:	bfb8      	it	lt
 8001636:	425b      	neglt	r3, r3
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001646:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800164a:	ee16 0a90 	vmov	r0, s13
 800164e:	f7fe ff27 	bl	80004a0 <__aeabi_f2d>
 8001652:	4603      	mov	r3, r0
 8001654:	460c      	mov	r4, r1
 8001656:	ec44 3b10 	vmov	d0, r3, r4
 800165a:	f003 ff4d 	bl	80054f8 <ceil>
 800165e:	ec54 3b10 	vmov	r3, r4, d0
 8001662:	4618      	mov	r0, r3
 8001664:	4621      	mov	r1, r4
 8001666:	f7ff fa35 	bl	8000ad4 <__aeabi_d2uiz>
 800166a:	4603      	mov	r3, r0
 800166c:	72fb      	strb	r3, [r7, #11]
	Motor_PinMode(sett);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fd8d 	bl	800118e <Motor_PinMode>

	for(int i=0;i<iter;++i)
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e018      	b.n	80016ac <prepareMotor+0xcc>
	{
		HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN, GPIO_PIN_SET);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6998      	ldr	r0, [r3, #24]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	8b9b      	ldrh	r3, [r3, #28]
 8001682:	2201      	movs	r2, #1
 8001684:	4619      	mov	r1, r3
 8001686:	f001 f843 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800168a:	2001      	movs	r0, #1
 800168c:	f000 fd44 	bl	8002118 <HAL_Delay>
		HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN, GPIO_PIN_RESET);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6998      	ldr	r0, [r3, #24]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	8b9b      	ldrh	r3, [r3, #28]
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	f001 f838 	bl	8002710 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f000 fd39 	bl	8002118 <HAL_Delay>
	for(int i=0;i<iter;++i)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3301      	adds	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbe2      	blt.n	800167a <prepareMotor+0x9a>
	}

	sett->flags.sleep = 1;
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 0;
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80016c8:	f36f 0300 	bfc	r3, #0, #1
 80016cc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.direction = (sett->flags.direction) ? CWC : CW;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2d9      	uxtb	r1, r3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80016ec:	f361 03c3 	bfi	r3, r1, #3, #1
 80016f0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	Motor_PinMode(sett);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fd4a 	bl	800118e <Motor_PinMode>
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd90      	pop	{r4, r7, pc}
	...

08001704 <UART_Confirm>:
#include "parametr.h"
#include <stdio.h>
#include <stdint.h>


void UART_Confirm(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	msg_size=0;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <UART_Confirm+0x2c>)
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
	msg_size=sprintf((char*) msg, "get");
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <UART_Confirm+0x30>)
 8001710:	4a09      	ldr	r2, [pc, #36]	; (8001738 <UART_Confirm+0x34>)
 8001712:	6810      	ldr	r0, [r2, #0]
 8001714:	6018      	str	r0, [r3, #0]
 8001716:	2303      	movs	r3, #3
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <UART_Confirm+0x2c>)
 800171c:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart3, msg, msg_size,10);
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <UART_Confirm+0x2c>)
 8001720:	881a      	ldrh	r2, [r3, #0]
 8001722:	230a      	movs	r3, #10
 8001724:	4903      	ldr	r1, [pc, #12]	; (8001734 <UART_Confirm+0x30>)
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <UART_Confirm+0x38>)
 8001728:	f002 fed2 	bl	80044d0 <HAL_UART_Transmit>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000025a 	.word	0x2000025a
 8001734:	20000214 	.word	0x20000214
 8001738:	08005610 	.word	0x08005610
 800173c:	20000434 	.word	0x20000434

08001740 <UART_startmove>:


void UART_startmove(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	msg_size2=0;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <UART_startmove+0x30>)
 8001746:	2200      	movs	r2, #0
 8001748:	801a      	strh	r2, [r3, #0]
	msg_size2=sprintf((char*) msg_v2, "start");
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <UART_startmove+0x34>)
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <UART_startmove+0x38>)
 800174e:	6810      	ldr	r0, [r2, #0]
 8001750:	6018      	str	r0, [r3, #0]
 8001752:	8892      	ldrh	r2, [r2, #4]
 8001754:	809a      	strh	r2, [r3, #4]
 8001756:	2305      	movs	r3, #5
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <UART_startmove+0x30>)
 800175c:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart3, msg_v2, msg_size2,10);
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <UART_startmove+0x30>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	230a      	movs	r3, #10
 8001764:	4903      	ldr	r1, [pc, #12]	; (8001774 <UART_startmove+0x34>)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <UART_startmove+0x3c>)
 8001768:	f002 feb2 	bl	80044d0 <HAL_UART_Transmit>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000210 	.word	0x20000210
 8001774:	20000228 	.word	0x20000228
 8001778:	08005614 	.word	0x08005614
 800177c:	20000434 	.word	0x20000434

08001780 <UART_WriteData>:

void UART_WriteData(Motor_T *data, uint16_t *tab, Trigger_T *time) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	uint8_t i = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	75fb      	strb	r3, [r7, #23]
	while ((uint16_t) -1 != tab[i])
 8001790:	e00c      	b.n	80017ac <UART_WriteData+0x2c>
		write_data_to_FIFO(&(data->fifo), tab[i++]);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	75fa      	strb	r2, [r7, #23]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	4413      	add	r3, r2
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff fa08 	bl	8000bbc <write_data_to_FIFO>
	while ((uint16_t) -1 != tab[i])
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d1e9      	bne.n	8001792 <UART_WriteData+0x12>
	(data + 1)->device.positionStart = (int16_t) tab[++i];
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	3301      	adds	r3, #1
 80017c2:	75fb      	strb	r3, [r7, #23]
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	4413      	add	r3, r2
 80017cc:	881a      	ldrh	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3370      	adds	r3, #112	; 0x70
 80017d2:	b212      	sxth	r2, r2
 80017d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	(data + 1)->device.positionEnd = (int16_t) tab[++i];
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	3301      	adds	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	4413      	add	r3, r2
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3370      	adds	r3, #112	; 0x70
 80017ec:	b212      	sxth	r2, r2
 80017ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	i++;
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	3301      	adds	r3, #1
 80017f6:	75fb      	strb	r3, [r7, #23]
	(data + 2)->device.positionStart = (int16_t) tab[++i];
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	3301      	adds	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4413      	add	r3, r2
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	33e0      	adds	r3, #224	; 0xe0
 800180c:	b212      	sxth	r2, r2
 800180e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	(data + 2)->device.positionEnd = (int16_t) tab[++i];
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	3301      	adds	r3, #1
 8001816:	75fb      	strb	r3, [r7, #23]
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	881a      	ldrh	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	33e0      	adds	r3, #224	; 0xe0
 8001826:	b212      	sxth	r2, r2
 8001828:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	i++;
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	3301      	adds	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
	time->device = tab[++i];
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	3301      	adds	r3, #1
 8001836:	75fb      	strb	r3, [r7, #23]
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	729a      	strb	r2, [r3, #10]
	time->period = tab[++i];
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	3301      	adds	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	4413      	add	r3, r2
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	725a      	strb	r2, [r3, #9]

	UART_Confirm();
 800185e:	f7ff ff51 	bl	8001704 <UART_Confirm>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <DataReceive>:

DataReadEnum DataReceive(uint16_t *data)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	DataReadEnum retVal = data_unavailable;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
	for(int i=0;i<UARTpoint;++i)
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	e025      	b.n	80018c8 <DataReceive+0x5e>
	{
		if(data[i] == (uint16_t)-2)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800188a:	4293      	cmp	r3, r2
 800188c:	d102      	bne.n	8001894 <DataReceive+0x2a>
		{
			retVal = data_available;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e016      	b.n	80018c2 <DataReceive+0x58>
		}
		else if(data[i] == (uint16_t)-3)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d102      	bne.n	80018ac <DataReceive+0x42>
		{
			retVal =data_confirm;
 80018a6:	2302      	movs	r3, #2
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	e00a      	b.n	80018c2 <DataReceive+0x58>
		}
		else if(data[i] == (uint16_t)-4)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <DataReceive+0x58>
		{
			retVal = data_stop;
 80018be:	2303      	movs	r3, #3
 80018c0:	73fb      	strb	r3, [r7, #15]
	for(int i=0;i<UARTpoint;++i)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	ddd6      	ble.n	800187c <DataReceive+0x12>
		}
	}
	return retVal;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <device_choose>:
 *  Created on: Oct 21, 2020
 *      Author: rzesz
 */
#include "self_timer.h"
int flaga = 0;
void device_choose(Trigger_T *trig) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	trig->Pin_Trigger.PORT =
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018ea:	601a      	str	r2, [r3, #0]
			(1 == trig->device) ? CAMERA_T_GPIO_Port : MOBILE_T_GPIO_Port;
	trig->Pin_Trigger.PIN = (1 == trig->device) ? CAMERA_T_Pin : MOBILE_T_Pin;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7a9b      	ldrb	r3, [r3, #10]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <device_choose+0x1c>
 80018f4:	2204      	movs	r2, #4
 80018f6:	e000      	b.n	80018fa <device_choose+0x1e>
 80018f8:	2220      	movs	r2, #32
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	809a      	strh	r2, [r3, #4]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <calculate_intterupts>:

int calculate_intterupts(Trigger_T *trig) {
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	return (FREQ_T * trig->period);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7a5b      	ldrb	r3, [r3, #9]
 8001916:	461a      	mov	r2, r3
 8001918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191c:	fb03 f302 	mul.w	r3, r3, r2
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <run_trigger>:

uint8_t run_trigger(Trigger_T *trig) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	uint32_t diff = trig->memTime-trig->changeTime;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	60fb      	str	r3, [r7, #12]
	--(trig->changeTime);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60da      	str	r2, [r3, #12]
	if (trig->changeTime <= 0) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	dc1a      	bgt.n	8001988 <run_trigger+0x5c>
		trig->isOn = 1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	721a      	strb	r2, [r3, #8]
		--(trig->Time);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	1e5a      	subs	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	615a      	str	r2, [r3, #20]
		trig->changeTime=trig->memTime;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(trig->Pin_Trigger.PORT,trig->Pin_Trigger.PIN, GPIO_PIN_RESET);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	889b      	ldrh	r3, [r3, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	f000 fecb 	bl	8002710 <HAL_GPIO_WritePin>
		if(trig->Time<=0)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	dc02      	bgt.n	8001988 <run_trigger+0x5c>
			HAL_TIM_Base_Stop_IT(&htim7);
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <run_trigger+0x8c>)
 8001984:	f002 fa9c 	bl	8003ec0 <HAL_TIM_Base_Stop_IT>
	}
	if(diff==100 && trig->isOn)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d10e      	bne.n	80019ac <run_trigger+0x80>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7a1b      	ldrb	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <run_trigger+0x80>
	{
		trig->isOn=0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	721a      	strb	r2, [r3, #8]
		HAL_GPIO_WritePin(trig->Pin_Trigger.PORT,trig->Pin_Trigger.PIN, GPIO_PIN_SET);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	889b      	ldrh	r3, [r3, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4619      	mov	r1, r3
 80019a8:	f000 feb2 	bl	8002710 <HAL_GPIO_WritePin>
	}
	return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200003f4 	.word	0x200003f4

080019bc <set_trigger>:
void set_trigger(Trigger_T *trig, Motor_T *sett) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	trig->Time = read_time(sett->fifo) / trig->period;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f929 	bl	8000c22 <read_time>
 80019d0:	4602      	mov	r2, r0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7a5b      	ldrb	r3, [r3, #9]
 80019d6:	fb92 f2f3 	sdiv	r2, r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	615a      	str	r2, [r3, #20]
	trig->changeTime = calculate_intterupts(trig);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff93 	bl	800190a <calculate_intterupts>
 80019e4:	4602      	mov	r2, r0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60da      	str	r2, [r3, #12]
	trig->memTime = trig->changeTime;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <init_t>:

void init_t(Trigger_T *trig, Motor_T *sett) {
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
	device_choose(trig);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff69 	bl	80018dc <device_choose>
	set_trigger(trig, sett);
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffd5 	bl	80019bc <set_trigger>
	trig->isOn = 1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	721a      	strb	r2, [r3, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <set>:
#include <math.h>

static uint8_t stoppingPoint;
uint16_t time;

MotorErr set(Motor_T *sett) {
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	MotorErr retVal = MOTOR_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	75fb      	strb	r3, [r7, #23]
	if(sett->device.points_num == (uint8_t)-1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d109      	bne.n	8001a4a <set+0x2a>
		sett->device.points_num = get_amount_of_times(sett->fifo);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f86a 	bl	8000b14 <get_amount_of_times>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	stoppingPoint = sett->device.points_num;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <set+0xc8>)
 8001a52:	701a      	strb	r2, [r3, #0]
	time = read_data(&(sett->fifo));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3368      	adds	r3, #104	; 0x68
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f877 	bl	8000b4c <read_data>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <set+0xcc>)
 8001a64:	801a      	strh	r2, [r3, #0]
	if(time == 0)
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <set+0xcc>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <set+0x52>
	{
		return MOTOR_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e036      	b.n	8001ae0 <set+0xc0>
	}
	uint16_t length = round(SLIDER_LENGHT / sett->device.points_num);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f242 3328 	movw	r3, #9000	; 0x2328
 8001a7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fcfa 	bl	800047c <__aeabi_i2d>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4621      	mov	r1, r4
 8001a90:	f7ff f820 	bl	8000ad4 <__aeabi_d2uiz>
 8001a94:	4603      	mov	r3, r0
 8001a96:	82bb      	strh	r3, [r7, #20]
	int stepSize = sett->device.stepSize;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa2:	ee17 3a90 	vmov	r3, s15
 8001aa6:	613b      	str	r3, [r7, #16]
	sett->counter.stepLeft = set_stepLeft(length, stepSize);
 8001aa8:	8abb      	ldrh	r3, [r7, #20]
 8001aaa:	6939      	ldr	r1, [r7, #16]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f87f 	bl	8001bb0 <set_stepLeft>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
	//int (*fun)(uint16_t, int) = &set_stepLeft;
	int stepLeftx2 = sett->counter.stepLeft;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	60fb      	str	r3, [r7, #12]
	sett->counter.pulse = set_pulse(time, stepLeftx2);
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <set+0xcc>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f88c 	bl	8001be2 <set_pulse>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sett->counter.changeTime = sett->counter.pulse;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	879a      	strh	r2, [r3, #60]	; 0x3c

	return retVal;
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	200001e5 	.word	0x200001e5
 8001aec:	200003b2 	.word	0x200003b2

08001af0 <set_for_angle>:
MotorErr set_for_angle(Motor_T *sett)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	MotorErr retVal = MOTOR_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	75fb      	strb	r3, [r7, #23]
	if(sett->device.points_num == (uint8_t)-1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d104      	bne.n	8001b10 <set_for_angle+0x20>
		sett->device.points_num = stoppingPoint;
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <set_for_angle+0xb8>)
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if(sett->device.positionStart != 0 && sett->counter.pulse==0)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <set_for_angle+0x3a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <set_for_angle+0x3a>
		prepareMotor(sett);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fd5b 	bl	80015e0 <prepareMotor>
	if(time==0)
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <set_for_angle+0xbc>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <set_for_angle+0x46>
		return MOTOR_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e034      	b.n	8001ba0 <set_for_angle+0xb0>
	uint16_t diff = abs(sett->device.positionEnd-sett->device.positionStart);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bfb8      	it	lt
 8001b4a:	425b      	neglt	r3, r3
 8001b4c:	82bb      	strh	r3, [r7, #20]
	int stepSize =sett->device.stepSize;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b58:	ee17 3a90 	vmov	r3, s15
 8001b5c:	613b      	str	r3, [r7, #16]
	sett->counter.stepLeft = set_stepLeft(diff/stoppingPoint, stepSize);
 8001b5e:	8abb      	ldrh	r3, [r7, #20]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <set_for_angle+0xb8>)
 8001b62:	7812      	ldrb	r2, [r2, #0]
 8001b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	6939      	ldr	r1, [r7, #16]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 f81f 	bl	8001bb0 <set_stepLeft>
 8001b72:	4602      	mov	r2, r0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
	int stepLeftx2 = sett->counter.stepLeft;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	60fb      	str	r3, [r7, #12]
	sett->counter.pulse = set_pulse(time, stepLeftx2);
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <set_for_angle+0xbc>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	68f9      	ldr	r1, [r7, #12]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f82c 	bl	8001be2 <set_pulse>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sett->counter.changeTime = sett->counter.pulse;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	879a      	strh	r2, [r3, #60]	; 0x3c

	return retVal;
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200001e5 	.word	0x200001e5
 8001bac:	200003b2 	.word	0x200003b2

08001bb0 <set_stepLeft>:
int set_stepLeft(uint16_t len, int step)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	80fb      	strh	r3, [r7, #6]
	return ceil((2*len)/step);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	005a      	lsls	r2, r3, #1
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fc58 	bl	800047c <__aeabi_i2d>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	460c      	mov	r4, r1
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	f7fe ff56 	bl	8000a84 <__aeabi_d2iz>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd90      	pop	{r4, r7, pc}

08001be2 <set_pulse>:
uint16_t set_pulse(uint16_t time, int stepleft)
{
 8001be2:	b5b0      	push	{r4, r5, r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	6039      	str	r1, [r7, #0]
 8001bec:	80fb      	strh	r3, [r7, #6]
	return ceil(TIM_FREQ*time)/stepleft;
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf4:	fb02 f303 	mul.w	r3, r2, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fc3f 	bl	800047c <__aeabi_i2d>
 8001bfe:	4604      	mov	r4, r0
 8001c00:	460d      	mov	r5, r1
 8001c02:	6838      	ldr	r0, [r7, #0]
 8001c04:	f7fe fc3a 	bl	800047c <__aeabi_i2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe fdc8 	bl	80007a4 <__aeabi_ddiv>
 8001c14:	4603      	mov	r3, r0
 8001c16:	460c      	mov	r4, r1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	f7fe ff5a 	bl	8000ad4 <__aeabi_d2uiz>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b29b      	uxth	r3, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}

08001c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_MspInit+0x44>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_MspInit+0x44>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6193      	str	r3, [r2, #24]
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_MspInit+0x44>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_MspInit+0x44>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_MspInit+0x44>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_MspInit+0x44>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <MemManage_Handler+0x4>

08001c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc8:	f000 fa06 	bl	80020d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <USART3_IRQHandler+0x10>)
 8001cd6:	f002 fd31 	bl	800473c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000434 	.word	0x20000434

08001ce4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <TIM6_DAC_IRQHandler+0x10>)
 8001cea:	f002 f914 	bl	8003f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200003b4 	.word	0x200003b4

08001cf8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM7_IRQHandler+0x10>)
 8001cfe:	f002 f90a 	bl	8003f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200003f4 	.word	0x200003f4

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f003 fad4 	bl	80052e8 <__errno>
 8001d40:	4602      	mov	r2, r0
 8001d42:	230c      	movs	r3, #12
 8001d44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20010000 	.word	0x20010000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	200001e8 	.word	0x200001e8
 8001d74:	200004c0 	.word	0x200004c0

08001d78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <SystemInit+0x28>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <SystemInit+0x28>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SystemInit+0x28>)
 8001d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d92:	609a      	str	r2, [r3, #8]
#endif
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_TIM6_Init+0x64>)
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <MX_TIM6_Init+0x68>)
 8001db8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MX_TIM6_Init+0x64>)
 8001dbc:	2247      	movs	r2, #71	; 0x47
 8001dbe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_TIM6_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_TIM6_Init+0x64>)
 8001dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dcc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_TIM6_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <MX_TIM6_Init+0x64>)
 8001dd6:	f002 f81d 	bl	8003e14 <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001de0:	f7ff f9ce 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_TIM6_Init+0x64>)
 8001df2:	f002 fa75 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001dfc:	f7ff f9c0 	bl	8001180 <Error_Handler>
  }

}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200003b4 	.word	0x200003b4
 8001e0c:	40001000 	.word	0x40001000

08001e10 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_TIM7_Init+0x64>)
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <MX_TIM7_Init+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <MX_TIM7_Init+0x64>)
 8001e28:	2247      	movs	r2, #71	; 0x47
 8001e2a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_TIM7_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <MX_TIM7_Init+0x64>)
 8001e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e38:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_TIM7_Init+0x64>)
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <MX_TIM7_Init+0x64>)
 8001e42:	f001 ffe7 	bl	8003e14 <HAL_TIM_Base_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e4c:	f7ff f998 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_TIM7_Init+0x64>)
 8001e5e:	f002 fa3f 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e68:	f7ff f98a 	bl	8001180 <Error_Handler>
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200003f4 	.word	0x200003f4
 8001e78:	40001400 	.word	0x40001400

08001e7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_TIM_Base_MspInit+0x78>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d114      	bne.n	8001eb8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e94:	f043 0310 	orr.w	r3, r3, #16
 8001e98:	61d3      	str	r3, [r2, #28]
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2036      	movs	r0, #54	; 0x36
 8001eac:	f000 fa31 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001eb0:	2036      	movs	r0, #54	; 0x36
 8001eb2:	f000 fa4a 	bl	800234a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001eb6:	e018      	b.n	8001eea <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_TIM_Base_MspInit+0x80>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d113      	bne.n	8001eea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_TIM_Base_MspInit+0x7c>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_TIM_Base_MspInit+0x7c>)
 8001ec8:	f043 0320 	orr.w	r3, r3, #32
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_TIM_Base_MspInit+0x7c>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2037      	movs	r0, #55	; 0x37
 8001ee0:	f000 fa17 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ee4:	2037      	movs	r0, #55	; 0x37
 8001ee6:	f000 fa30 	bl	800234a <HAL_NVIC_EnableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40001000 	.word	0x40001000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40001400 	.word	0x40001400

08001f00 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f06:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <MX_USART3_UART_Init+0x5c>)
 8001f08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f26:	220c      	movs	r2, #12
 8001f28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_USART3_UART_Init+0x58>)
 8001f44:	f002 fa76 	bl	8004434 <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f4e:	f7ff f917 	bl	8001180 <Error_Handler>
  }

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000434 	.word	0x20000434
 8001f5c:	40004800 	.word	0x40004800

08001f60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <HAL_UART_MspInit+0x8c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d130      	bne.n	8001fe4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_UART_MspInit+0x90>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a1a      	ldr	r2, [pc, #104]	; (8001ff0 <HAL_UART_MspInit+0x90>)
 8001f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_UART_MspInit+0x90>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_UART_MspInit+0x90>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <HAL_UART_MspInit+0x90>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6153      	str	r3, [r2, #20]
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_UART_MspInit+0x90>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fc4:	2307      	movs	r3, #7
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <HAL_UART_MspInit+0x94>)
 8001fd0:	f000 fa14 	bl	80023fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2027      	movs	r0, #39	; 0x27
 8001fda:	f000 f99a 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fde:	2027      	movs	r0, #39	; 0x27
 8001fe0:	f000 f9b3 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40004800 	.word	0x40004800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	48000400 	.word	0x48000400

08001ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002030 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ffc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ffe:	e003      	b.n	8002008 <LoopCopyDataInit>

08002000 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002002:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002004:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002006:	3104      	adds	r1, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <LoopForever+0xa>)
	ldr	r3, =_edata
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <LoopForever+0xe>)
	adds	r2, r0, r1
 800200c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800200e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002010:	d3f6      	bcc.n	8002000 <CopyDataInit>
	ldr	r2, =_sbss
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002014:	e002      	b.n	800201c <LoopFillZerobss>

08002016 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002016:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002018:	f842 3b04 	str.w	r3, [r2], #4

0800201c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <LoopForever+0x16>)
	cmp	r2, r3
 800201e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002020:	d3f9      	bcc.n	8002016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002022:	f7ff fea9 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002026:	f003 f965 	bl	80052f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800202a:	f7fe ffab 	bl	8000f84 <main>

0800202e <LoopForever>:

LoopForever:
    b LoopForever
 800202e:	e7fe      	b.n	800202e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002030:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002034:	0800565c 	.word	0x0800565c
	ldr	r0, =_sdata
 8002038:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800203c:	200001c8 	.word	0x200001c8
	ldr	r2, =_sbss
 8002040:	200001c8 	.word	0x200001c8
	ldr	r3, = _ebss
 8002044:	200004bc 	.word	0x200004bc

08002048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC1_2_IRQHandler>
	...

0800204c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_Init+0x28>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_Init+0x28>)
 8002056:	f043 0310 	orr.w	r3, r3, #16
 800205a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205c:	2003      	movs	r0, #3
 800205e:	f000 f94d 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f808 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002068:	f7ff fde0 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40022000 	.word	0x40022000

08002078 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x54>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_InitTick+0x58>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f965 	bl	8002366 <HAL_SYSTICK_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00e      	b.n	80020c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d80a      	bhi.n	80020c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 f92d 	bl	8002312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <HAL_InitTick+0x5c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000158 	.word	0x20000158
 80020d0:	20000160 	.word	0x20000160
 80020d4:	2000015c 	.word	0x2000015c

080020d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x20>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_IncTick+0x24>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_IncTick+0x24>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000160 	.word	0x20000160
 80020fc:	200004b4 	.word	0x200004b4

08002100 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;  
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_GetTick+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200004b4 	.word	0x200004b4

08002118 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff ffee 	bl	8002100 <HAL_GetTick>
 8002124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d005      	beq.n	800213e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_Delay+0x40>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800213e:	bf00      	nop
 8002140:	f7ff ffde 	bl	8002100 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d8f7      	bhi.n	8002140 <HAL_Delay+0x28>
  {
  }
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000160 	.word	0x20000160

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db0a      	blt.n	8002226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <__NVIC_SetPriority+0x4c>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002224:	e00a      	b.n	800223c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <__NVIC_SetPriority+0x50>)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	3b04      	subs	r3, #4
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	440b      	add	r3, r1
 800223a:	761a      	strb	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f1c3 0307 	rsb	r3, r3, #7
 800226a:	2b04      	cmp	r3, #4
 800226c:	bf28      	it	cs
 800226e:	2304      	movcs	r3, #4
 8002270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3304      	adds	r3, #4
 8002276:	2b06      	cmp	r3, #6
 8002278:	d902      	bls.n	8002280 <NVIC_EncodePriority+0x30>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b03      	subs	r3, #3
 800227e:	e000      	b.n	8002282 <NVIC_EncodePriority+0x32>
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	4313      	orrs	r3, r2
         );
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c8:	d301      	bcc.n	80022ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <SysTick_Config+0x40>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d6:	210f      	movs	r1, #15
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f7ff ff8e 	bl	80021fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SysTick_Config+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SysTick_Config+0x40>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff29 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff3e 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff8e 	bl	8002250 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5d 	bl	80021fc <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff31 	bl	80021c0 <__NVIC_EnableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffa2 	bl	80022b8 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002390:	2b02      	cmp	r3, #2
 8002392:	d005      	beq.n	80023a0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2204      	movs	r2, #4
 8002398:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e027      	b.n	80023f0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 020e 	bic.w	r2, r2, #14
 80023ae:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	2101      	movs	r1, #1
 80023ca:	fa01 f202 	lsl.w	r2, r1, r2
 80023ce:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
    } 
  }
  return status;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240a:	e160      	b.n	80026ce <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8152 	beq.w	80026c8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d00b      	beq.n	8002444 <HAL_GPIO_Init+0x48>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d007      	beq.n	8002444 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002438:	2b11      	cmp	r3, #17
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b12      	cmp	r3, #18
 8002442:	d130      	bne.n	80024a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800247a:	2201      	movs	r2, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f003 0201 	and.w	r2, r3, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0xea>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b12      	cmp	r3, #18
 80024e4:	d123      	bne.n	800252e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0203 	and.w	r2, r3, #3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80ac 	beq.w	80026c8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a5d      	ldr	r2, [pc, #372]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002588:	4a59      	ldr	r2, [pc, #356]	; (80026f0 <HAL_GPIO_Init+0x2f4>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025b2:	d025      	beq.n	8002600 <HAL_GPIO_Init+0x204>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a4f      	ldr	r2, [pc, #316]	; (80026f4 <HAL_GPIO_Init+0x2f8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d01f      	beq.n	80025fc <HAL_GPIO_Init+0x200>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a4e      	ldr	r2, [pc, #312]	; (80026f8 <HAL_GPIO_Init+0x2fc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d019      	beq.n	80025f8 <HAL_GPIO_Init+0x1fc>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a4d      	ldr	r2, [pc, #308]	; (80026fc <HAL_GPIO_Init+0x300>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_GPIO_Init+0x1f8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a4c      	ldr	r2, [pc, #304]	; (8002700 <HAL_GPIO_Init+0x304>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00d      	beq.n	80025f0 <HAL_GPIO_Init+0x1f4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a4b      	ldr	r2, [pc, #300]	; (8002704 <HAL_GPIO_Init+0x308>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0x1f0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a4a      	ldr	r2, [pc, #296]	; (8002708 <HAL_GPIO_Init+0x30c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_GPIO_Init+0x1ec>
 80025e4:	2306      	movs	r3, #6
 80025e6:	e00c      	b.n	8002602 <HAL_GPIO_Init+0x206>
 80025e8:	2307      	movs	r3, #7
 80025ea:	e00a      	b.n	8002602 <HAL_GPIO_Init+0x206>
 80025ec:	2305      	movs	r3, #5
 80025ee:	e008      	b.n	8002602 <HAL_GPIO_Init+0x206>
 80025f0:	2304      	movs	r3, #4
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_Init+0x206>
 80025f4:	2303      	movs	r3, #3
 80025f6:	e004      	b.n	8002602 <HAL_GPIO_Init+0x206>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e002      	b.n	8002602 <HAL_GPIO_Init+0x206>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_GPIO_Init+0x206>
 8002600:	2300      	movs	r3, #0
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	f002 0203 	and.w	r2, r2, #3
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	4093      	lsls	r3, r2
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002612:	4937      	ldr	r1, [pc, #220]	; (80026f0 <HAL_GPIO_Init+0x2f4>)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002620:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_GPIO_Init+0x310>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	43db      	mvns	r3, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002644:	4a31      	ldr	r2, [pc, #196]	; (800270c <HAL_GPIO_Init+0x310>)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800264a:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_GPIO_Init+0x310>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800266e:	4a27      	ldr	r2, [pc, #156]	; (800270c <HAL_GPIO_Init+0x310>)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002674:	4b25      	ldr	r3, [pc, #148]	; (800270c <HAL_GPIO_Init+0x310>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_GPIO_Init+0x310>)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_GPIO_Init+0x310>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_GPIO_Init+0x310>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f47f ae97 	bne.w	800240c <HAL_GPIO_Init+0x10>
  }
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40010000 	.word	0x40010000
 80026f4:	48000400 	.word	0x48000400
 80026f8:	48000800 	.word	0x48000800
 80026fc:	48000c00 	.word	0x48000c00
 8002700:	48001000 	.word	0x48001000
 8002704:	48001400 	.word	0x48001400
 8002708:	48001800 	.word	0x48001800
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800272c:	e002      	b.n	8002734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002746:	af00      	add	r7, sp, #0
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f000 bf01 	b.w	800355c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8160 	beq.w	8002a2a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800276a:	4bae      	ldr	r3, [pc, #696]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d00c      	beq.n	8002790 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002776:	4bab      	ldr	r3, [pc, #684]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b08      	cmp	r3, #8
 8002780:	d159      	bne.n	8002836 <HAL_RCC_OscConfig+0xf6>
 8002782:	4ba8      	ldr	r3, [pc, #672]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800278a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278e:	d152      	bne.n	8002836 <HAL_RCC_OscConfig+0xf6>
 8002790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002794:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_OscConfig+0x82>
 80027bc:	4b99      	ldr	r3, [pc, #612]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e015      	b.n	80027ee <HAL_RCC_OscConfig+0xae>
 80027c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80027d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027da:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027de:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027ea:	4b8e      	ldr	r3, [pc, #568]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80027f6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80027fa:	fa92 f2a2 	rbit	r2, r2
 80027fe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002802:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002806:	fab2 f282 	clz	r2, r2
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f042 0220 	orr.w	r2, r2, #32
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f002 021f 	and.w	r2, r2, #31
 8002816:	2101      	movs	r1, #1
 8002818:	fa01 f202 	lsl.w	r2, r1, r2
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8102 	beq.w	8002a28 <HAL_RCC_OscConfig+0x2e8>
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 80fc 	bne.w	8002a28 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f000 be93 	b.w	800355c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d106      	bne.n	8002850 <HAL_RCC_OscConfig+0x110>
 8002842:	4b78      	ldr	r3, [pc, #480]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a77      	ldr	r2, [pc, #476]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e030      	b.n	80028b2 <HAL_RCC_OscConfig+0x172>
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x134>
 800285a:	4b72      	ldr	r3, [pc, #456]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a71      	ldr	r2, [pc, #452]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6e      	ldr	r2, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 800286c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01e      	b.n	80028b2 <HAL_RCC_OscConfig+0x172>
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287e:	d10c      	bne.n	800289a <HAL_RCC_OscConfig+0x15a>
 8002880:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a67      	ldr	r2, [pc, #412]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a64      	ldr	r2, [pc, #400]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e00b      	b.n	80028b2 <HAL_RCC_OscConfig+0x172>
 800289a:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a61      	ldr	r2, [pc, #388]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5e      	ldr	r2, [pc, #376]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 80028ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d059      	beq.n	8002970 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fc20 	bl	8002100 <HAL_GetTick>
 80028c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c6:	f7ff fc1b 	bl	8002100 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d902      	bls.n	80028dc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	f000 be40 	b.w	800355c <HAL_RCC_OscConfig+0xe1c>
 80028dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80028f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d102      	bne.n	800290e <HAL_RCC_OscConfig+0x1ce>
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0x1fa>
 800290e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002912:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002926:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800292a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800293e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002942:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002946:	fa92 f2a2 	rbit	r2, r2
 800294a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800294e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f042 0220 	orr.w	r2, r2, #32
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f002 021f 	and.w	r2, r2, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ab      	beq.n	80028c6 <HAL_RCC_OscConfig+0x186>
 800296e:	e05c      	b.n	8002a2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff fbc6 	bl	8002100 <HAL_GetTick>
 8002974:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297a:	f7ff fbc1 	bl	8002100 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d902      	bls.n	8002990 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	f000 bde6 	b.w	800355c <HAL_RCC_OscConfig+0xe1c>
 8002990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002994:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80029a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_OscConfig+0x282>
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	e015      	b.n	80029ee <HAL_RCC_OscConfig+0x2ae>
 80029c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80029d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_RCC_OscConfig+0x2e4>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029f2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80029f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80029fa:	fa92 f2a2 	rbit	r2, r2
 80029fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002a02:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a06:	fab2 f282 	clz	r2, r2
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f042 0220 	orr.w	r2, r2, #32
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	f002 021f 	and.w	r2, r2, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ab      	bne.n	800297a <HAL_RCC_OscConfig+0x23a>
 8002a22:	e002      	b.n	8002a2a <HAL_RCC_OscConfig+0x2ea>
 8002a24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8170 	beq.w	8002d1a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a3a:	4bd0      	ldr	r3, [pc, #832]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a46:	4bcd      	ldr	r3, [pc, #820]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d16d      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3ee>
 8002a52:	4bca      	ldr	r3, [pc, #808]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a5e:	d166      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3ee>
 8002a60:	2302      	movs	r3, #2
 8002a62:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002a72:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d102      	bne.n	8002a90 <HAL_RCC_OscConfig+0x350>
 8002a8a:	4bbc      	ldr	r3, [pc, #752]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	e013      	b.n	8002ab8 <HAL_RCC_OscConfig+0x378>
 8002a90:	2302      	movs	r3, #2
 8002a92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002aa8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ab4:	4bb1      	ldr	r3, [pc, #708]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002abe:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002ac2:	fa92 f2a2 	rbit	r2, r2
 8002ac6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002aca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ace:	fab2 f282 	clz	r2, r2
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f002 021f 	and.w	r2, r2, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_RCC_OscConfig+0x3ba>
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d002      	beq.n	8002afa <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f000 bd31 	b.w	800355c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4ba0      	ldr	r3, [pc, #640]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	21f8      	movs	r1, #248	; 0xf8
 8002b0a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002b12:	fa91 f1a1 	rbit	r1, r1
 8002b16:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002b1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b1e:	fab1 f181 	clz	r1, r1
 8002b22:	b2c9      	uxtb	r1, r1
 8002b24:	408b      	lsls	r3, r1
 8002b26:	4995      	ldr	r1, [pc, #596]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2c:	e0f5      	b.n	8002d1a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8085 	beq.w	8002c44 <HAL_RCC_OscConfig+0x504>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002b4c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	461a      	mov	r2, r3
 8002b62:	2301      	movs	r3, #1
 8002b64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7ff facb 	bl	8002100 <HAL_GetTick>
 8002b6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b70:	f7ff fac6 	bl	8002100 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d902      	bls.n	8002b86 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	f000 bceb 	b.w	800355c <HAL_RCC_OscConfig+0xe1c>
 8002b86:	2302      	movs	r3, #2
 8002b88:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002b98:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d102      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x476>
 8002bb0:	4b72      	ldr	r3, [pc, #456]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	e013      	b.n	8002bde <HAL_RCC_OscConfig+0x49e>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002bda:	4b68      	ldr	r3, [pc, #416]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2202      	movs	r2, #2
 8002be0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002be4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002be8:	fa92 f2a2 	rbit	r2, r2
 8002bec:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002bf0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bf4:	fab2 f282 	clz	r2, r2
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f042 0220 	orr.w	r2, r2, #32
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f002 021f 	and.w	r2, r2, #31
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0af      	beq.n	8002b70 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c10:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	21f8      	movs	r1, #248	; 0xf8
 8002c20:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002c28:	fa91 f1a1 	rbit	r1, r1
 8002c2c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002c30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c34:	fab1 f181 	clz	r1, r1
 8002c38:	b2c9      	uxtb	r1, r1
 8002c3a:	408b      	lsls	r3, r1
 8002c3c:	494f      	ldr	r1, [pc, #316]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
 8002c42:	e06a      	b.n	8002d1a <HAL_RCC_OscConfig+0x5da>
 8002c44:	2301      	movs	r3, #1
 8002c46:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002c56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7ff fa46 	bl	8002100 <HAL_GetTick>
 8002c74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c7a:	f7ff fa41 	bl	8002100 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d902      	bls.n	8002c90 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	f000 bc66 	b.w	800355c <HAL_RCC_OscConfig+0xe1c>
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002ca2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x580>
 8002cba:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e013      	b.n	8002ce8 <HAL_RCC_OscConfig+0x5a8>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002cd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_RCC_OscConfig+0x63c>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002cee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002cf2:	fa92 f2a2 	rbit	r2, r2
 8002cf6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002cfa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002cfe:	fab2 f282 	clz	r2, r2
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f042 0220 	orr.w	r2, r2, #32
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f002 021f 	and.w	r2, r2, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1af      	bne.n	8002c7a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80da 	beq.w	8002ede <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d069      	beq.n	8002e08 <HAL_RCC_OscConfig+0x6c8>
 8002d34:	2301      	movs	r3, #1
 8002d36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002d46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_OscConfig+0x640>)
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7ff f9cf 	bl	8002100 <HAL_GetTick>
 8002d62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	e00d      	b.n	8002d84 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d68:	f7ff f9ca 	bl	8002100 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d905      	bls.n	8002d84 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e3ef      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	10908120 	.word	0x10908120
 8002d84:	2302      	movs	r3, #2
 8002d86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002db4:	2202      	movs	r2, #2
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fa93 f2a3 	rbit	r2, r3
 8002dc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002dc6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc8:	4ba4      	ldr	r3, [pc, #656]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dcc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	6019      	str	r1, [r3, #0]
 8002dd4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	fa93 f1a3 	rbit	r1, r3
 8002dde:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002de2:	6019      	str	r1, [r3, #0]
  return result;
 8002de4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0b0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x628>
 8002e06:	e06a      	b.n	8002ede <HAL_RCC_OscConfig+0x79e>
 8002e08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e1e:	601a      	str	r2, [r3, #0]
  return result;
 8002e20:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e24:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b8c      	ldr	r3, [pc, #560]	; (8003060 <HAL_RCC_OscConfig+0x920>)
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	461a      	mov	r2, r3
 8002e36:	2300      	movs	r3, #0
 8002e38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7ff f961 	bl	8002100 <HAL_GetTick>
 8002e3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e42:	e009      	b.n	8002e58 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e44:	f7ff f95c 	bl	8002100 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e381      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
 8002e58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	fa93 f2a3 	rbit	r2, r3
 8002e6a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e74:	2202      	movs	r2, #2
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	fa93 f2a3 	rbit	r2, r3
 8002e82:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fa93 f2a3 	rbit	r2, r3
 8002e9a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002e9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea0:	4b6e      	ldr	r3, [pc, #440]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	6019      	str	r1, [r3, #0]
 8002eac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fa93 f1a3 	rbit	r1, r3
 8002eb6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002eba:	6019      	str	r1, [r3, #0]
  return result;
 8002ebc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1b2      	bne.n	8002e44 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8157 	beq.w	800319c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef4:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d112      	bne.n	8002f26 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b56      	ldr	r3, [pc, #344]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	4a55      	ldr	r2, [pc, #340]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	61d3      	str	r3, [r2, #28]
 8002f0c:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f14:	f107 030c 	add.w	r3, r7, #12
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	f107 030c 	add.w	r3, r7, #12
 8002f1e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f26:	4b4f      	ldr	r3, [pc, #316]	; (8003064 <HAL_RCC_OscConfig+0x924>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d11a      	bne.n	8002f68 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f32:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <HAL_RCC_OscConfig+0x924>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4b      	ldr	r2, [pc, #300]	; (8003064 <HAL_RCC_OscConfig+0x924>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3e:	f7ff f8df 	bl	8002100 <HAL_GetTick>
 8002f42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	e009      	b.n	8002f5c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7ff f8da 	bl	8002100 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b64      	cmp	r3, #100	; 0x64
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e2ff      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_RCC_OscConfig+0x924>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ef      	beq.n	8002f48 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d106      	bne.n	8002f80 <HAL_RCC_OscConfig+0x840>
 8002f72:	4b3a      	ldr	r3, [pc, #232]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a39      	ldr	r2, [pc, #228]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6213      	str	r3, [r2, #32]
 8002f7e:	e02f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8a0>
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x864>
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	4a33      	ldr	r2, [pc, #204]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6213      	str	r3, [r2, #32]
 8002f96:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4a30      	ldr	r2, [pc, #192]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	6213      	str	r3, [r2, #32]
 8002fa2:	e01d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8a0>
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x888>
 8002fae:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a2a      	ldr	r2, [pc, #168]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6213      	str	r3, [r2, #32]
 8002fba:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a27      	ldr	r2, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6213      	str	r3, [r2, #32]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8a0>
 8002fc8:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a20      	ldr	r2, [pc, #128]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d06a      	beq.n	80030c0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7ff f889 	bl	8002100 <HAL_GetTick>
 8002fee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7ff f884 	bl	8002100 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e2a7      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
 800300c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003010:	2202      	movs	r2, #2
 8003012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	fa93 f2a3 	rbit	r2, r3
 800301e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003028:	2202      	movs	r2, #2
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	fa93 f2a3 	rbit	r2, r3
 8003036:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800303a:	601a      	str	r2, [r3, #0]
  return result;
 800303c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003040:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d108      	bne.n	8003068 <HAL_RCC_OscConfig+0x928>
 8003056:	4b01      	ldr	r3, [pc, #4]	; (800305c <HAL_RCC_OscConfig+0x91c>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	e013      	b.n	8003084 <HAL_RCC_OscConfig+0x944>
 800305c:	40021000 	.word	0x40021000
 8003060:	10908120 	.word	0x10908120
 8003064:	40007000 	.word	0x40007000
 8003068:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800306c:	2202      	movs	r2, #2
 800306e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	4bc0      	ldr	r3, [pc, #768]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003088:	2102      	movs	r1, #2
 800308a:	6011      	str	r1, [r2, #0]
 800308c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	fa92 f1a2 	rbit	r1, r2
 8003096:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800309a:	6011      	str	r1, [r2, #0]
  return result;
 800309c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	fab2 f282 	clz	r2, r2
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f002 021f 	and.w	r2, r2, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f202 	lsl.w	r2, r1, r2
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d09a      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x8b4>
 80030be:	e063      	b.n	8003188 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7ff f81e 	bl	8002100 <HAL_GetTick>
 80030c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c8:	e00b      	b.n	80030e2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7ff f819 	bl	8002100 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e23c      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
 80030e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030e6:	2202      	movs	r2, #2
 80030e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	fa93 f2a3 	rbit	r2, r3
 80030f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030fe:	2202      	movs	r2, #2
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	fa93 f2a3 	rbit	r2, r3
 800310c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003110:	601a      	str	r2, [r3, #0]
  return result;
 8003112:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003116:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d102      	bne.n	8003132 <HAL_RCC_OscConfig+0x9f2>
 800312c:	4b95      	ldr	r3, [pc, #596]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	e00d      	b.n	800314e <HAL_RCC_OscConfig+0xa0e>
 8003132:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003136:	2202      	movs	r2, #2
 8003138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	fa93 f2a3 	rbit	r2, r3
 8003144:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	4b8e      	ldr	r3, [pc, #568]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003152:	2102      	movs	r1, #2
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	fa92 f1a2 	rbit	r1, r2
 8003160:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003164:	6011      	str	r1, [r2, #0]
  return result;
 8003166:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f002 021f 	and.w	r2, r2, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f202 	lsl.w	r2, r1, r2
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1a0      	bne.n	80030ca <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003188:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003190:	4b7c      	ldr	r3, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	4a7b      	ldr	r2, [pc, #492]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 8003196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 81d9 	beq.w	800355a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a8:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	f000 81a6 	beq.w	8003502 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	f040 811e 	bne.w	80033fe <HAL_RCC_OscConfig+0xcbe>
 80031c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80031c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031da:	601a      	str	r2, [r3, #0]
  return result;
 80031dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	461a      	mov	r2, r3
 80031f4:	2300      	movs	r3, #0
 80031f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fe ff82 	bl	8002100 <HAL_GetTick>
 80031fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	e009      	b.n	8003216 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003202:	f7fe ff7d 	bl	8002100 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1a2      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
 8003216:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800321a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800321e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800322e:	601a      	str	r2, [r3, #0]
  return result;
 8003230:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <HAL_RCC_OscConfig+0xb10>
 800324a:	4b4e      	ldr	r3, [pc, #312]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	e01b      	b.n	8003288 <HAL_RCC_OscConfig+0xb48>
 8003250:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f2a3 	rbit	r2, r3
 8003264:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800326e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fa93 f2a3 	rbit	r2, r3
 800327e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800328c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003290:	6011      	str	r1, [r2, #0]
 8003292:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	fa92 f1a2 	rbit	r1, r2
 800329c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032a0:	6011      	str	r1, [r2, #0]
  return result;
 80032a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	fab2 f282 	clz	r2, r2
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f042 0220 	orr.w	r2, r2, #32
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f002 021f 	and.w	r2, r2, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f202 	lsl.w	r2, r1, r2
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d19e      	bne.n	8003202 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c4:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f023 020f 	bic.w	r2, r3, #15
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	492c      	ldr	r1, [pc, #176]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80032d8:	4b2a      	ldr	r3, [pc, #168]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a19      	ldr	r1, [r3, #32]
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	4925      	ldr	r1, [pc, #148]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800330c:	601a      	str	r2, [r3, #0]
  return result;
 800330e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003312:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800331e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	461a      	mov	r2, r3
 8003326:	2301      	movs	r3, #1
 8003328:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7fe fee9 	bl	8002100 <HAL_GetTick>
 800332e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003332:	e009      	b.n	8003348 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe fee4 	bl	8002100 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e109      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
 8003348:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800334c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003360:	601a      	str	r2, [r3, #0]
  return result;
 8003362:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003366:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_RCC_OscConfig+0xc48>
 800337c:	4b01      	ldr	r3, [pc, #4]	; (8003384 <HAL_RCC_OscConfig+0xc44>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	e01e      	b.n	80033c0 <HAL_RCC_OscConfig+0xc80>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800338c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f2a3 	rbit	r2, r3
 800339c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_OscConfig+0xe28>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033c8:	6011      	str	r1, [r2, #0]
 80033ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	fa92 f1a2 	rbit	r1, r2
 80033d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033d8:	6011      	str	r1, [r2, #0]
  return result;
 80033da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	fab2 f282 	clz	r2, r2
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	f042 0220 	orr.w	r2, r2, #32
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	f002 021f 	and.w	r2, r2, #31
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f202 	lsl.w	r2, r1, r2
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d09b      	beq.n	8003334 <HAL_RCC_OscConfig+0xbf4>
 80033fc:	e0ad      	b.n	800355a <HAL_RCC_OscConfig+0xe1a>
 80033fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003402:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fa93 f2a3 	rbit	r2, r3
 8003412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003416:	601a      	str	r2, [r3, #0]
  return result;
 8003418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800341c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003428:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	461a      	mov	r2, r3
 8003430:	2300      	movs	r3, #0
 8003432:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe fe64 	bl	8002100 <HAL_GetTick>
 8003438:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343c:	e009      	b.n	8003452 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343e:	f7fe fe5f 	bl	8002100 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e084      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
 8003452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003456:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800345a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	fa93 f2a3 	rbit	r2, r3
 8003466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800346a:	601a      	str	r2, [r3, #0]
  return result;
 800346c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003470:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0xd4c>
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <HAL_RCC_OscConfig+0xe28>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e01b      	b.n	80034c4 <HAL_RCC_OscConfig+0xd84>
 800348c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fa93 f2a3 	rbit	r2, r3
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f107 031c 	add.w	r3, r7, #28
 80034aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f107 0318 	add.w	r3, r7, #24
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_RCC_OscConfig+0xe28>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f107 0214 	add.w	r2, r7, #20
 80034c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034cc:	6011      	str	r1, [r2, #0]
 80034ce:	f107 0214 	add.w	r2, r7, #20
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	fa92 f1a2 	rbit	r1, r2
 80034d8:	f107 0210 	add.w	r2, r7, #16
 80034dc:	6011      	str	r1, [r2, #0]
  return result;
 80034de:	f107 0210 	add.w	r2, r7, #16
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	fab2 f282 	clz	r2, r2
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	f042 0220 	orr.w	r2, r2, #32
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f002 021f 	and.w	r2, r2, #31
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f202 	lsl.w	r2, r1, r2
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d19e      	bne.n	800343e <HAL_RCC_OscConfig+0xcfe>
 8003500:	e02b      	b.n	800355a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e025      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_RCC_OscConfig+0xe28>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_RCC_OscConfig+0xe28>)
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003520:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003524:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	429a      	cmp	r2, r3
 8003530:	d111      	bne.n	8003556 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003532:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003540:	429a      	cmp	r2, r3
 8003542:	d108      	bne.n	8003556 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003552:	429a      	cmp	r2, r3
 8003554:	d001      	beq.n	800355a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000

0800356c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b09e      	sub	sp, #120	; 0x78
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e162      	b.n	800384a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b90      	ldr	r3, [pc, #576]	; (80037c8 <HAL_RCC_ClockConfig+0x25c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d910      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b8d      	ldr	r3, [pc, #564]	; (80037c8 <HAL_RCC_ClockConfig+0x25c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	498b      	ldr	r1, [pc, #556]	; (80037c8 <HAL_RCC_ClockConfig+0x25c>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b89      	ldr	r3, [pc, #548]	; (80037c8 <HAL_RCC_ClockConfig+0x25c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e14a      	b.n	800384a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c0:	4b82      	ldr	r3, [pc, #520]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	497f      	ldr	r1, [pc, #508]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80dc 	beq.w	8003798 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d13c      	bne.n	8003662 <HAL_RCC_ClockConfig+0xf6>
 80035e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d102      	bne.n	8003612 <HAL_RCC_ClockConfig+0xa6>
 800360c:	4b6f      	ldr	r3, [pc, #444]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	e00f      	b.n	8003632 <HAL_RCC_ClockConfig+0xc6>
 8003612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003616:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	667b      	str	r3, [r7, #100]	; 0x64
 8003620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003624:	663b      	str	r3, [r7, #96]	; 0x60
 8003626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800362e:	4b67      	ldr	r3, [pc, #412]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003636:	65ba      	str	r2, [r7, #88]	; 0x58
 8003638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800363a:	fa92 f2a2 	rbit	r2, r2
 800363e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003640:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003642:	fab2 f282 	clz	r2, r2
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	f042 0220 	orr.w	r2, r2, #32
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	f002 021f 	and.w	r2, r2, #31
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f202 	lsl.w	r2, r1, r2
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d17b      	bne.n	8003756 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e0f3      	b.n	800384a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d13c      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x178>
 800366a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800366e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d102      	bne.n	8003694 <HAL_RCC_ClockConfig+0x128>
 800368e:	4b4f      	ldr	r3, [pc, #316]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	e00f      	b.n	80036b4 <HAL_RCC_ClockConfig+0x148>
 8003694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003698:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	647b      	str	r3, [r7, #68]	; 0x44
 80036a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
 80036a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b0:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80036ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036bc:	fa92 f2a2 	rbit	r2, r2
 80036c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c4:	fab2 f282 	clz	r2, r2
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	f042 0220 	orr.w	r2, r2, #32
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	f002 021f 	and.w	r2, r2, #31
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d13a      	bne.n	8003756 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0b2      	b.n	800384a <HAL_RCC_ClockConfig+0x2de>
 80036e4:	2302      	movs	r3, #2
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_RCC_ClockConfig+0x1a0>
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	e00d      	b.n	8003728 <HAL_RCC_ClockConfig+0x1bc>
 800370c:	2302      	movs	r3, #2
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
 8003718:	2302      	movs	r3, #2
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	4b29      	ldr	r3, [pc, #164]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2202      	movs	r2, #2
 800372a:	61ba      	str	r2, [r7, #24]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	fa92 f2a2 	rbit	r2, r2
 8003732:	617a      	str	r2, [r7, #20]
  return result;
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	fab2 f282 	clz	r2, r2
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f042 0220 	orr.w	r2, r2, #32
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	f002 021f 	and.w	r2, r2, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f202 	lsl.w	r2, r1, r2
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e079      	b.n	800384a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f023 0203 	bic.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	491a      	ldr	r1, [pc, #104]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003768:	f7fe fcca 	bl	8002100 <HAL_GetTick>
 800376c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	e00a      	b.n	8003786 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fe fcc6 	bl	8002100 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e061      	b.n	800384a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_RCC_ClockConfig+0x260>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 020c 	and.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	429a      	cmp	r2, r3
 8003796:	d1eb      	bne.n	8003770 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_ClockConfig+0x25c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d214      	bcs.n	80037d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_RCC_ClockConfig+0x25c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 0207 	bic.w	r2, r3, #7
 80037ae:	4906      	ldr	r1, [pc, #24]	; (80037c8 <HAL_RCC_ClockConfig+0x25c>)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <HAL_RCC_ClockConfig+0x25c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e040      	b.n	800384a <HAL_RCC_ClockConfig+0x2de>
 80037c8:	40022000 	.word	0x40022000
 80037cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCC_ClockConfig+0x2e8>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	491a      	ldr	r1, [pc, #104]	; (8003854 <HAL_RCC_ClockConfig+0x2e8>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fa:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_RCC_ClockConfig+0x2e8>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4912      	ldr	r1, [pc, #72]	; (8003854 <HAL_RCC_ClockConfig+0x2e8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800380e:	f000 f829 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003812:	4601      	mov	r1, r0
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <HAL_RCC_ClockConfig+0x2e8>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381c:	22f0      	movs	r2, #240	; 0xf0
 800381e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	fa92 f2a2 	rbit	r2, r2
 8003826:	60fa      	str	r2, [r7, #12]
  return result;
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	40d3      	lsrs	r3, r2
 8003832:	4a09      	ldr	r2, [pc, #36]	; (8003858 <HAL_RCC_ClockConfig+0x2ec>)
 8003834:	5cd3      	ldrb	r3, [r2, r3]
 8003836:	fa21 f303 	lsr.w	r3, r1, r3
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <HAL_RCC_ClockConfig+0x2f0>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_RCC_ClockConfig+0x2f4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fc18 	bl	8002078 <HAL_InitTick>
  
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3778      	adds	r7, #120	; 0x78
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	0800561c 	.word	0x0800561c
 800385c:	20000158 	.word	0x20000158
 8003860:	2000015c 	.word	0x2000015c

08003864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	b08b      	sub	sp, #44	; 0x2c
 8003868:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b04      	cmp	r3, #4
 800388c:	d002      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x30>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x36>
 8003892:	e03f      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003896:	623b      	str	r3, [r7, #32]
      break;
 8003898:	e03f      	b.n	800391a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	fa92 f2a2 	rbit	r2, r2
 80038ac:	607a      	str	r2, [r7, #4]
  return result;
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	fab2 f282 	clz	r2, r2
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	40d3      	lsrs	r3, r2
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038ba:	5cd3      	ldrb	r3, [r2, r3]
 80038bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038be:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	220f      	movs	r2, #15
 80038c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	fa92 f2a2 	rbit	r2, r2
 80038d0:	60fa      	str	r2, [r7, #12]
  return result;
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	fab2 f282 	clz	r2, r2
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	40d3      	lsrs	r3, r2
 80038dc:	4a15      	ldr	r2, [pc, #84]	; (8003934 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038de:	5cd3      	ldrb	r3, [r2, r3]
 80038e0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038ec:	4a0f      	ldr	r2, [pc, #60]	; (800392c <HAL_RCC_GetSysClockFreq+0xc8>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	e007      	b.n	800390e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038fe:	4a0b      	ldr	r2, [pc, #44]	; (800392c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fbb2 f2f3 	udiv	r2, r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	623b      	str	r3, [r7, #32]
      break;
 8003912:	e002      	b.n	800391a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003916:	623b      	str	r3, [r7, #32]
      break;
 8003918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391a:	6a3b      	ldr	r3, [r7, #32]
}
 800391c:	4618      	mov	r0, r3
 800391e:	372c      	adds	r7, #44	; 0x2c
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	40021000 	.word	0x40021000
 800392c:	007a1200 	.word	0x007a1200
 8003930:	08005634 	.word	0x08005634
 8003934:	08005644 	.word	0x08005644

08003938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_RCC_GetHCLKFreq+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000158 	.word	0x20000158

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003956:	f7ff ffef 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 800395a:	4601      	mov	r1, r0
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003964:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003968:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	fa92 f2a2 	rbit	r2, r2
 8003970:	603a      	str	r2, [r7, #0]
  return result;
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	fab2 f282 	clz	r2, r2
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	40d3      	lsrs	r3, r2
 800397c:	4a04      	ldr	r2, [pc, #16]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x40>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	0800562c 	.word	0x0800562c

08003994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800399a:	f7ff ffcd 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 800399e:	4601      	mov	r1, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	fa92 f2a2 	rbit	r2, r2
 80039b4:	603a      	str	r2, [r7, #0]
  return result;
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	fab2 f282 	clz	r2, r2
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	40d3      	lsrs	r3, r2
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	0800562c 	.word	0x0800562c

080039d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b092      	sub	sp, #72	; 0x48
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80d7 	beq.w	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fc:	4b4e      	ldr	r3, [pc, #312]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10e      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a08:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a12:	61d3      	str	r3, [r2, #28]
 8003a14:	4b48      	ldr	r3, [pc, #288]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b45      	ldr	r3, [pc, #276]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a32:	4b42      	ldr	r3, [pc, #264]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a41      	ldr	r2, [pc, #260]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe fb5f 	bl	8002100 <HAL_GetTick>
 8003a42:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fe fb5b 	bl	8002100 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	; 0x64
 8003a52:	d901      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e1d6      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b38      	ldr	r3, [pc, #224]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8084 	beq.w	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d07c      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	461a      	mov	r2, r3
 8003aae:	2301      	movs	r3, #1
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ada:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d04b      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fe fb0b 	bl	8002100 <HAL_GetTick>
 8003aea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aee:	f7fe fb07 	bl	8002100 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e180      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b04:	2302      	movs	r3, #2
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	2302      	movs	r3, #2
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
  return result;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d108      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b32:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	e00d      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	10908100 	.word	0x10908100
 8003b44:	2302      	movs	r3, #2
 8003b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	4ba0      	ldr	r3, [pc, #640]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2202      	movs	r2, #2
 8003b56:	613a      	str	r2, [r7, #16]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	fa92 f2a2 	rbit	r2, r2
 8003b5e:	60fa      	str	r2, [r7, #12]
  return result;
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	fab2 f282 	clz	r2, r2
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f002 021f 	and.w	r2, r2, #31
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0b7      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b7e:	4b95      	ldr	r3, [pc, #596]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4992      	ldr	r1, [pc, #584]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b98:	4b8e      	ldr	r3, [pc, #568]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4a8d      	ldr	r2, [pc, #564]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb0:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	f023 0203 	bic.w	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4985      	ldr	r1, [pc, #532]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bce:	4b81      	ldr	r3, [pc, #516]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	497e      	ldr	r1, [pc, #504]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bec:	4b79      	ldr	r3, [pc, #484]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	4976      	ldr	r1, [pc, #472]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c0a:	4b72      	ldr	r3, [pc, #456]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f023 0210 	bic.w	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	496f      	ldr	r1, [pc, #444]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	4967      	ldr	r1, [pc, #412]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c46:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f023 0220 	bic.w	r2, r3, #32
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	4960      	ldr	r1, [pc, #384]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c64:	4b5b      	ldr	r3, [pc, #364]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	4958      	ldr	r1, [pc, #352]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c82:	4b54      	ldr	r3, [pc, #336]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	4951      	ldr	r1, [pc, #324]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ca0:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	4949      	ldr	r1, [pc, #292]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cbe:	4b45      	ldr	r3, [pc, #276]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4942      	ldr	r1, [pc, #264]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cdc:	4b3d      	ldr	r3, [pc, #244]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	493a      	ldr	r1, [pc, #232]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003cfa:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	4933      	ldr	r1, [pc, #204]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d18:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	492b      	ldr	r1, [pc, #172]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4924      	ldr	r1, [pc, #144]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d54:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	491c      	ldr	r1, [pc, #112]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003d72:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	4915      	ldr	r1, [pc, #84]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	490d      	ldr	r1, [pc, #52]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	4906      	ldr	r1, [pc, #24]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00c      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dcc:	4b01      	ldr	r3, [pc, #4]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de0:	490b      	ldr	r1, [pc, #44]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfe:	4904      	ldr	r1, [pc, #16]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3748      	adds	r7, #72	; 0x48
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000

08003e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e01d      	b.n	8003e62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe f81e 	bl	8001e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 f9a6 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_TIM_Base_Start_IT+0x50>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d00b      	beq.n	8003eae <HAL_TIM_Base_Start_IT+0x42>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d007      	beq.n	8003eae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	00010007 	.word	0x00010007

08003ec0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_TIM_Base_Stop_IT+0x48>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	f240 4344 	movw	r3, #1092	; 0x444
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d107      	bne.n	8003f08 <HAL_TIM_Base_Stop_IT+0x48>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d122      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d11b      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0202 	mvn.w	r2, #2
 8003f42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f905 	bl	8004168 <HAL_TIM_IC_CaptureCallback>
 8003f5e:	e005      	b.n	8003f6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f8f7 	bl	8004154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f908 	bl	800417c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d122      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d11b      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0204 	mvn.w	r2, #4
 8003f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8db 	bl	8004168 <HAL_TIM_IC_CaptureCallback>
 8003fb2:	e005      	b.n	8003fc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8cd 	bl	8004154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f8de 	bl	800417c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d122      	bne.n	800401a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d11b      	bne.n	800401a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f06f 0208 	mvn.w	r2, #8
 8003fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8b1 	bl	8004168 <HAL_TIM_IC_CaptureCallback>
 8004006:	e005      	b.n	8004014 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8a3 	bl	8004154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f8b4 	bl	800417c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b10      	cmp	r3, #16
 8004026:	d122      	bne.n	800406e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b10      	cmp	r3, #16
 8004034:	d11b      	bne.n	800406e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f06f 0210 	mvn.w	r2, #16
 800403e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2208      	movs	r2, #8
 8004044:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f887 	bl	8004168 <HAL_TIM_IC_CaptureCallback>
 800405a:	e005      	b.n	8004068 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f879 	bl	8004154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f88a 	bl	800417c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d10e      	bne.n	800409a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f06f 0201 	mvn.w	r2, #1
 8004092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7fc fde3 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b80      	cmp	r3, #128	; 0x80
 80040a6:	d10e      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d107      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f9a3 	bl	800440c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f996 	bl	8004420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d10e      	bne.n	8004120 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d107      	bne.n	8004120 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f838 	bl	8004190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b20      	cmp	r3, #32
 800412c:	d10e      	bne.n	800414c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b20      	cmp	r3, #32
 800413a:	d107      	bne.n	800414c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0220 	mvn.w	r2, #32
 8004144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f956 	bl	80043f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a42      	ldr	r2, [pc, #264]	; (80042c0 <TIM_Base_SetConfig+0x11c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3f      	ldr	r2, [pc, #252]	; (80042c4 <TIM_Base_SetConfig+0x120>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a3e      	ldr	r2, [pc, #248]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <TIM_Base_SetConfig+0x128>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <TIM_Base_SetConfig+0x12c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d108      	bne.n	80041f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a31      	ldr	r2, [pc, #196]	; (80042c0 <TIM_Base_SetConfig+0x11c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01f      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d01b      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2e      	ldr	r2, [pc, #184]	; (80042c4 <TIM_Base_SetConfig+0x120>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d017      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <TIM_Base_SetConfig+0x128>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00f      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <TIM_Base_SetConfig+0x130>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <TIM_Base_SetConfig+0x134>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2a      	ldr	r2, [pc, #168]	; (80042dc <TIM_Base_SetConfig+0x138>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <TIM_Base_SetConfig+0x12c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d108      	bne.n	8004250 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <TIM_Base_SetConfig+0x11c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <TIM_Base_SetConfig+0x100>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <TIM_Base_SetConfig+0x128>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00f      	beq.n	80042a4 <TIM_Base_SetConfig+0x100>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <TIM_Base_SetConfig+0x130>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00b      	beq.n	80042a4 <TIM_Base_SetConfig+0x100>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <TIM_Base_SetConfig+0x134>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_Base_SetConfig+0x100>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <TIM_Base_SetConfig+0x138>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0x100>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <TIM_Base_SetConfig+0x12c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d103      	bne.n	80042ac <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	615a      	str	r2, [r3, #20]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40013400 	.word	0x40013400
 80042d0:	40015000 	.word	0x40015000
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40014800 	.word	0x40014800

080042e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e06d      	b.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a30      	ldr	r2, [pc, #192]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2f      	ldr	r2, [pc, #188]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2d      	ldr	r2, [pc, #180]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800433c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d01d      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d018      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10c      	bne.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40013400 	.word	0x40013400
 80043e8:	40015000 	.word	0x40015000
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40014000 	.word	0x40014000

080043f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e040      	b.n	80044c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fd fd82 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2224      	movs	r2, #36	; 0x24
 8004460:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fabc 	bl	80049f0 <UART_SetConfig>
 8004478:	4603      	mov	r3, r0
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e022      	b.n	80044c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fcca 	bl	8004e24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800449e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fd51 	bl	8004f68 <UART_CheckIdleState>
 80044c6:	4603      	mov	r3, r0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	f040 8081 	bne.w	80045ec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_UART_Transmit+0x26>
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e079      	b.n	80045ee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_UART_Transmit+0x38>
 8004504:	2302      	movs	r3, #2
 8004506:	e072      	b.n	80045ee <HAL_UART_Transmit+0x11e>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2221      	movs	r2, #33	; 0x21
 800451a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800451c:	f7fd fdf0 	bl	8002100 <HAL_GetTick>
 8004520:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453a:	d108      	bne.n	800454e <HAL_UART_Transmit+0x7e>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e003      	b.n	8004556 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004556:	e02d      	b.n	80045b4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2200      	movs	r2, #0
 8004560:	2180      	movs	r1, #128	; 0x80
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fd45 	bl	8004ff2 <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e03d      	b.n	80045ee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004584:	b292      	uxth	r2, r2
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	3302      	adds	r3, #2
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e008      	b.n	80045a2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b292      	uxth	r2, r2
 800459a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3301      	adds	r3, #1
 80045a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1cb      	bne.n	8004558 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2140      	movs	r1, #64	; 0x40
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fd11 	bl	8004ff2 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e009      	b.n	80045ee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460a:	2b20      	cmp	r3, #32
 800460c:	f040 808a 	bne.w	8004724 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <HAL_UART_Receive_IT+0x24>
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e082      	b.n	8004726 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_UART_Receive_IT+0x36>
 800462a:	2302      	movs	r3, #2
 800462c:	e07b      	b.n	8004726 <HAL_UART_Receive_IT+0x12e>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	d10e      	bne.n	800467a <HAL_UART_Receive_IT+0x82>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_UART_Receive_IT+0x78>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f240 12ff 	movw	r2, #511	; 0x1ff
 800466a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800466e:	e02d      	b.n	80046cc <HAL_UART_Receive_IT+0xd4>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	22ff      	movs	r2, #255	; 0xff
 8004674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004678:	e028      	b.n	80046cc <HAL_UART_Receive_IT+0xd4>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_UART_Receive_IT+0xa6>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <HAL_UART_Receive_IT+0x9c>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	22ff      	movs	r2, #255	; 0xff
 800468e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004692:	e01b      	b.n	80046cc <HAL_UART_Receive_IT+0xd4>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	227f      	movs	r2, #127	; 0x7f
 8004698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800469c:	e016      	b.n	80046cc <HAL_UART_Receive_IT+0xd4>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a6:	d10d      	bne.n	80046c4 <HAL_UART_Receive_IT+0xcc>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_UART_Receive_IT+0xc2>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	227f      	movs	r2, #127	; 0x7f
 80046b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b8:	e008      	b.n	80046cc <HAL_UART_Receive_IT+0xd4>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	223f      	movs	r2, #63	; 0x3f
 80046be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c2:	e003      	b.n	80046cc <HAL_UART_Receive_IT+0xd4>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2222      	movs	r2, #34	; 0x22
 80046d6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f0:	d107      	bne.n	8004702 <HAL_UART_Receive_IT+0x10a>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a0d      	ldr	r2, [pc, #52]	; (8004734 <HAL_UART_Receive_IT+0x13c>)
 80046fe:	661a      	str	r2, [r3, #96]	; 0x60
 8004700:	e002      	b.n	8004708 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a0c      	ldr	r2, [pc, #48]	; (8004738 <HAL_UART_Receive_IT+0x140>)
 8004706:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800471e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	0800522d 	.word	0x0800522d
 8004738:	08005187 	.word	0x08005187

0800473c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004762:	4013      	ands	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d113      	bne.n	8004794 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00e      	beq.n	8004794 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8114 	beq.w	80049b2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
      }
      return;
 8004792:	e10e      	b.n	80049b2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80d6 	beq.w	8004948 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80cb 	beq.w	8004948 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00e      	beq.n	80047da <HAL_UART_IRQHandler+0x9e>
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2201      	movs	r2, #1
 80047cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d2:	f043 0201 	orr.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00e      	beq.n	8004802 <HAL_UART_IRQHandler+0xc6>
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2202      	movs	r2, #2
 80047f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fa:	f043 0204 	orr.w	r2, r3, #4
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00e      	beq.n	800482a <HAL_UART_IRQHandler+0xee>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2204      	movs	r2, #4
 800481c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004822:	f043 0202 	orr.w	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2208      	movs	r2, #8
 800484e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004854:	f043 0208 	orr.w	r2, r3, #8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00f      	beq.n	8004886 <HAL_UART_IRQHandler+0x14a>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8093 	beq.w	80049b6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00c      	beq.n	80048b4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d004      	beq.n	80048d2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d031      	beq.n	8004936 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fc08 	bl	80050e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d123      	bne.n	800492e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d013      	beq.n	8004926 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004902:	4a30      	ldr	r2, [pc, #192]	; (80049c4 <HAL_UART_IRQHandler+0x288>)
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fd37 	bl	800237e <HAL_DMA_Abort_IT>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d016      	beq.n	8004944 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004920:	4610      	mov	r0, r2
 8004922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	e00e      	b.n	8004944 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f858 	bl	80049dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	e00a      	b.n	8004944 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f854 	bl	80049dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004934:	e006      	b.n	8004944 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f850 	bl	80049dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004942:	e038      	b.n	80049b6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004944:	bf00      	nop
    return;
 8004946:	e036      	b.n	80049b6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <HAL_UART_IRQHandler+0x232>
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fcb3 	bl	80052d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800496c:	e026      	b.n	80049bc <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d008      	beq.n	8004994 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004986:	2b00      	cmp	r3, #0
 8004988:	d017      	beq.n	80049ba <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
    }
    return;
 8004992:	e012      	b.n	80049ba <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00e      	beq.n	80049bc <HAL_UART_IRQHandler+0x280>
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fbd3 	bl	8005154 <UART_EndTransmit_IT>
    return;
 80049ae:	bf00      	nop
 80049b0:	e004      	b.n	80049bc <HAL_UART_IRQHandler+0x280>
      return;
 80049b2:	bf00      	nop
 80049b4:	e002      	b.n	80049bc <HAL_UART_IRQHandler+0x280>
    return;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <HAL_UART_IRQHandler+0x280>
    return;
 80049ba:	bf00      	nop
  }

}
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	08005129 	.word	0x08005129

080049c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4bac      	ldr	r3, [pc, #688]	; (8004cd0 <UART_SetConfig+0x2e0>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	6939      	ldr	r1, [r7, #16]
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a9a      	ldr	r2, [pc, #616]	; (8004cd4 <UART_SetConfig+0x2e4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d121      	bne.n	8004ab4 <UART_SetConfig+0xc4>
 8004a70:	4b99      	ldr	r3, [pc, #612]	; (8004cd8 <UART_SetConfig+0x2e8>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d817      	bhi.n	8004aac <UART_SetConfig+0xbc>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <UART_SetConfig+0x94>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004aa1 	.word	0x08004aa1
 8004a8c:	08004aa7 	.word	0x08004aa7
 8004a90:	08004a9b 	.word	0x08004a9b
 8004a94:	2301      	movs	r3, #1
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e0b2      	b.n	8004c00 <UART_SetConfig+0x210>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e0af      	b.n	8004c00 <UART_SetConfig+0x210>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e0ac      	b.n	8004c00 <UART_SetConfig+0x210>
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e0a9      	b.n	8004c00 <UART_SetConfig+0x210>
 8004aac:	2310      	movs	r3, #16
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	bf00      	nop
 8004ab2:	e0a5      	b.n	8004c00 <UART_SetConfig+0x210>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a88      	ldr	r2, [pc, #544]	; (8004cdc <UART_SetConfig+0x2ec>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d123      	bne.n	8004b06 <UART_SetConfig+0x116>
 8004abe:	4b86      	ldr	r3, [pc, #536]	; (8004cd8 <UART_SetConfig+0x2e8>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aca:	d012      	beq.n	8004af2 <UART_SetConfig+0x102>
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d802      	bhi.n	8004ad8 <UART_SetConfig+0xe8>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <UART_SetConfig+0xf6>
 8004ad6:	e012      	b.n	8004afe <UART_SetConfig+0x10e>
 8004ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004adc:	d00c      	beq.n	8004af8 <UART_SetConfig+0x108>
 8004ade:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ae2:	d003      	beq.n	8004aec <UART_SetConfig+0xfc>
 8004ae4:	e00b      	b.n	8004afe <UART_SetConfig+0x10e>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e089      	b.n	8004c00 <UART_SetConfig+0x210>
 8004aec:	2302      	movs	r3, #2
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e086      	b.n	8004c00 <UART_SetConfig+0x210>
 8004af2:	2304      	movs	r3, #4
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e083      	b.n	8004c00 <UART_SetConfig+0x210>
 8004af8:	2308      	movs	r3, #8
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e080      	b.n	8004c00 <UART_SetConfig+0x210>
 8004afe:	2310      	movs	r3, #16
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	bf00      	nop
 8004b04:	e07c      	b.n	8004c00 <UART_SetConfig+0x210>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a75      	ldr	r2, [pc, #468]	; (8004ce0 <UART_SetConfig+0x2f0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d123      	bne.n	8004b58 <UART_SetConfig+0x168>
 8004b10:	4b71      	ldr	r3, [pc, #452]	; (8004cd8 <UART_SetConfig+0x2e8>)
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b1c:	d012      	beq.n	8004b44 <UART_SetConfig+0x154>
 8004b1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b22:	d802      	bhi.n	8004b2a <UART_SetConfig+0x13a>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <UART_SetConfig+0x148>
 8004b28:	e012      	b.n	8004b50 <UART_SetConfig+0x160>
 8004b2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b2e:	d00c      	beq.n	8004b4a <UART_SetConfig+0x15a>
 8004b30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b34:	d003      	beq.n	8004b3e <UART_SetConfig+0x14e>
 8004b36:	e00b      	b.n	8004b50 <UART_SetConfig+0x160>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e060      	b.n	8004c00 <UART_SetConfig+0x210>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e05d      	b.n	8004c00 <UART_SetConfig+0x210>
 8004b44:	2304      	movs	r3, #4
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e05a      	b.n	8004c00 <UART_SetConfig+0x210>
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e057      	b.n	8004c00 <UART_SetConfig+0x210>
 8004b50:	2310      	movs	r3, #16
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	bf00      	nop
 8004b56:	e053      	b.n	8004c00 <UART_SetConfig+0x210>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a61      	ldr	r2, [pc, #388]	; (8004ce4 <UART_SetConfig+0x2f4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d123      	bne.n	8004baa <UART_SetConfig+0x1ba>
 8004b62:	4b5d      	ldr	r3, [pc, #372]	; (8004cd8 <UART_SetConfig+0x2e8>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6e:	d012      	beq.n	8004b96 <UART_SetConfig+0x1a6>
 8004b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b74:	d802      	bhi.n	8004b7c <UART_SetConfig+0x18c>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <UART_SetConfig+0x19a>
 8004b7a:	e012      	b.n	8004ba2 <UART_SetConfig+0x1b2>
 8004b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b80:	d00c      	beq.n	8004b9c <UART_SetConfig+0x1ac>
 8004b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b86:	d003      	beq.n	8004b90 <UART_SetConfig+0x1a0>
 8004b88:	e00b      	b.n	8004ba2 <UART_SetConfig+0x1b2>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e037      	b.n	8004c00 <UART_SetConfig+0x210>
 8004b90:	2302      	movs	r3, #2
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e034      	b.n	8004c00 <UART_SetConfig+0x210>
 8004b96:	2304      	movs	r3, #4
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e031      	b.n	8004c00 <UART_SetConfig+0x210>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e02e      	b.n	8004c00 <UART_SetConfig+0x210>
 8004ba2:	2310      	movs	r3, #16
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	bf00      	nop
 8004ba8:	e02a      	b.n	8004c00 <UART_SetConfig+0x210>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a4e      	ldr	r2, [pc, #312]	; (8004ce8 <UART_SetConfig+0x2f8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d123      	bne.n	8004bfc <UART_SetConfig+0x20c>
 8004bb4:	4b48      	ldr	r3, [pc, #288]	; (8004cd8 <UART_SetConfig+0x2e8>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc0:	d012      	beq.n	8004be8 <UART_SetConfig+0x1f8>
 8004bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc6:	d802      	bhi.n	8004bce <UART_SetConfig+0x1de>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <UART_SetConfig+0x1ec>
 8004bcc:	e012      	b.n	8004bf4 <UART_SetConfig+0x204>
 8004bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bd2:	d00c      	beq.n	8004bee <UART_SetConfig+0x1fe>
 8004bd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bd8:	d003      	beq.n	8004be2 <UART_SetConfig+0x1f2>
 8004bda:	e00b      	b.n	8004bf4 <UART_SetConfig+0x204>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e00e      	b.n	8004c00 <UART_SetConfig+0x210>
 8004be2:	2302      	movs	r3, #2
 8004be4:	77fb      	strb	r3, [r7, #31]
 8004be6:	e00b      	b.n	8004c00 <UART_SetConfig+0x210>
 8004be8:	2304      	movs	r3, #4
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e008      	b.n	8004c00 <UART_SetConfig+0x210>
 8004bee:	2308      	movs	r3, #8
 8004bf0:	77fb      	strb	r3, [r7, #31]
 8004bf2:	e005      	b.n	8004c00 <UART_SetConfig+0x210>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	bf00      	nop
 8004bfa:	e001      	b.n	8004c00 <UART_SetConfig+0x210>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c08:	f040 8090 	bne.w	8004d2c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004c0c:	7ffb      	ldrb	r3, [r7, #31]
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d86c      	bhi.n	8004cec <UART_SetConfig+0x2fc>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x228>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c5d 	.word	0x08004c5d
 8004c20:	08004c7d 	.word	0x08004c7d
 8004c24:	08004ced 	.word	0x08004ced
 8004c28:	08004c99 	.word	0x08004c99
 8004c2c:	08004ced 	.word	0x08004ced
 8004c30:	08004ced 	.word	0x08004ced
 8004c34:	08004ced 	.word	0x08004ced
 8004c38:	08004cb9 	.word	0x08004cb9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fe fe88 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8004c40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	005a      	lsls	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	441a      	add	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	61bb      	str	r3, [r7, #24]
        break;
 8004c5a:	e04a      	b.n	8004cf2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c5c:	f7fe fe9a 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8004c60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	005a      	lsls	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	441a      	add	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	61bb      	str	r3, [r7, #24]
        break;
 8004c7a:	e03a      	b.n	8004cf2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004c86:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6852      	ldr	r2, [r2, #4]
 8004c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	61bb      	str	r3, [r7, #24]
        break;
 8004c96:	e02c      	b.n	8004cf2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c98:	f7fe fde4 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8004c9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	005a      	lsls	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	61bb      	str	r3, [r7, #24]
        break;
 8004cb6:	e01c      	b.n	8004cf2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	61bb      	str	r3, [r7, #24]
        break;
 8004cce:	e010      	b.n	8004cf2 <UART_SetConfig+0x302>
 8004cd0:	efff69f3 	.word	0xefff69f3
 8004cd4:	40013800 	.word	0x40013800
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40004400 	.word	0x40004400
 8004ce0:	40004800 	.word	0x40004800
 8004ce4:	40004c00 	.word	0x40004c00
 8004ce8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75fb      	strb	r3, [r7, #23]
        break;
 8004cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b0f      	cmp	r3, #15
 8004cf6:	d916      	bls.n	8004d26 <UART_SetConfig+0x336>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d212      	bcs.n	8004d26 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f023 030f 	bic.w	r3, r3, #15
 8004d08:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	897b      	ldrh	r3, [r7, #10]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	897a      	ldrh	r2, [r7, #10]
 8004d22:	60da      	str	r2, [r3, #12]
 8004d24:	e072      	b.n	8004e0c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	75fb      	strb	r3, [r7, #23]
 8004d2a:	e06f      	b.n	8004e0c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004d2c:	7ffb      	ldrb	r3, [r7, #31]
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d85b      	bhi.n	8004dea <UART_SetConfig+0x3fa>
 8004d32:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0x348>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d7b 	.word	0x08004d7b
 8004d40:	08004d99 	.word	0x08004d99
 8004d44:	08004deb 	.word	0x08004deb
 8004d48:	08004db5 	.word	0x08004db5
 8004d4c:	08004deb 	.word	0x08004deb
 8004d50:	08004deb 	.word	0x08004deb
 8004d54:	08004deb 	.word	0x08004deb
 8004d58:	08004dd3 	.word	0x08004dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fe fdf8 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8004d60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	085a      	lsrs	r2, r3, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	441a      	add	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	61bb      	str	r3, [r7, #24]
        break;
 8004d78:	e03a      	b.n	8004df0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d7a:	f7fe fe0b 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8004d7e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	085a      	lsrs	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	441a      	add	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	61bb      	str	r3, [r7, #24]
        break;
 8004d96:	e02b      	b.n	8004df0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004da2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6852      	ldr	r2, [r2, #4]
 8004daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	61bb      	str	r3, [r7, #24]
        break;
 8004db2:	e01d      	b.n	8004df0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db4:	f7fe fd56 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8004db8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	085a      	lsrs	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	61bb      	str	r3, [r7, #24]
        break;
 8004dd0:	e00e      	b.n	8004df0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	61bb      	str	r3, [r7, #24]
        break;
 8004de8:	e002      	b.n	8004df0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	75fb      	strb	r3, [r7, #23]
        break;
 8004dee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b0f      	cmp	r3, #15
 8004df4:	d908      	bls.n	8004e08 <UART_SetConfig+0x418>
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfc:	d204      	bcs.n	8004e08 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	e001      	b.n	8004e0c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3720      	adds	r7, #32
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop

08004e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01a      	beq.n	8004f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f22:	d10a      	bne.n	8004f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004f76:	f7fd f8c3 	bl	8002100 <HAL_GetTick>
 8004f7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d10e      	bne.n	8004fa8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f82a 	bl	8004ff2 <UART_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e020      	b.n	8004fea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d10e      	bne.n	8004fd4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f814 	bl	8004ff2 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e00a      	b.n	8004fea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005002:	e05d      	b.n	80050c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d059      	beq.n	80050c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500c:	f7fd f878 	bl	8002100 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	429a      	cmp	r2, r3
 800501a:	d302      	bcc.n	8005022 <UART_WaitOnFlagUntilTimeout+0x30>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d11b      	bne.n	800505a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005030:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e042      	b.n	80050e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d02b      	beq.n	80050c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005076:	d123      	bne.n	80050c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005080:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005090:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0201 	bic.w	r2, r2, #1
 80050a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e00f      	b.n	80050e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69da      	ldr	r2, [r3, #28]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4013      	ands	r3, r2
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d092      	beq.n	8005004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff fc48 	bl	80049dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff fc25 	bl	80049c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005194:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800519a:	2b22      	cmp	r3, #34	; 0x22
 800519c:	d13a      	bne.n	8005214 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051a4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051a6:	89bb      	ldrh	r3, [r7, #12]
 80051a8:	b2d9      	uxtb	r1, r3
 80051aa:	89fb      	ldrh	r3, [r7, #14]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	400a      	ands	r2, r1
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d121      	bne.n	8005224 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051ee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fb fdb1 	bl	8000d74 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005212:	e007      	b.n	8005224 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0208 	orr.w	r2, r2, #8
 8005222:	619a      	str	r2, [r3, #24]
}
 8005224:	bf00      	nop
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800523a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005240:	2b22      	cmp	r3, #34	; 0x22
 8005242:	d13a      	bne.n	80052ba <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800524a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005252:	89ba      	ldrh	r2, [r7, #12]
 8005254:	89fb      	ldrh	r3, [r7, #14]
 8005256:	4013      	ands	r3, r2
 8005258:	b29a      	uxth	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	1c9a      	adds	r2, r3, #2
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d121      	bne.n	80052ca <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005294:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fb fd5e 	bl	8000d74 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052b8:	e007      	b.n	80052ca <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0208 	orr.w	r2, r2, #8
 80052c8:	619a      	str	r2, [r3, #24]
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <__errno>:
 80052e8:	4b01      	ldr	r3, [pc, #4]	; (80052f0 <__errno+0x8>)
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000164 	.word	0x20000164

080052f4 <__libc_init_array>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	4e0d      	ldr	r6, [pc, #52]	; (800532c <__libc_init_array+0x38>)
 80052f8:	4c0d      	ldr	r4, [pc, #52]	; (8005330 <__libc_init_array+0x3c>)
 80052fa:	1ba4      	subs	r4, r4, r6
 80052fc:	10a4      	asrs	r4, r4, #2
 80052fe:	2500      	movs	r5, #0
 8005300:	42a5      	cmp	r5, r4
 8005302:	d109      	bne.n	8005318 <__libc_init_array+0x24>
 8005304:	4e0b      	ldr	r6, [pc, #44]	; (8005334 <__libc_init_array+0x40>)
 8005306:	4c0c      	ldr	r4, [pc, #48]	; (8005338 <__libc_init_array+0x44>)
 8005308:	f000 f976 	bl	80055f8 <_init>
 800530c:	1ba4      	subs	r4, r4, r6
 800530e:	10a4      	asrs	r4, r4, #2
 8005310:	2500      	movs	r5, #0
 8005312:	42a5      	cmp	r5, r4
 8005314:	d105      	bne.n	8005322 <__libc_init_array+0x2e>
 8005316:	bd70      	pop	{r4, r5, r6, pc}
 8005318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800531c:	4798      	blx	r3
 800531e:	3501      	adds	r5, #1
 8005320:	e7ee      	b.n	8005300 <__libc_init_array+0xc>
 8005322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005326:	4798      	blx	r3
 8005328:	3501      	adds	r5, #1
 800532a:	e7f2      	b.n	8005312 <__libc_init_array+0x1e>
 800532c:	08005654 	.word	0x08005654
 8005330:	08005654 	.word	0x08005654
 8005334:	08005654 	.word	0x08005654
 8005338:	08005658 	.word	0x08005658

0800533c <malloc>:
 800533c:	4b02      	ldr	r3, [pc, #8]	; (8005348 <malloc+0xc>)
 800533e:	4601      	mov	r1, r0
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	f000 b86d 	b.w	8005420 <_malloc_r>
 8005346:	bf00      	nop
 8005348:	20000164 	.word	0x20000164

0800534c <free>:
 800534c:	4b02      	ldr	r3, [pc, #8]	; (8005358 <free+0xc>)
 800534e:	4601      	mov	r1, r0
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	f000 b817 	b.w	8005384 <_free_r>
 8005356:	bf00      	nop
 8005358:	20000164 	.word	0x20000164

0800535c <memcpy>:
 800535c:	b510      	push	{r4, lr}
 800535e:	1e43      	subs	r3, r0, #1
 8005360:	440a      	add	r2, r1
 8005362:	4291      	cmp	r1, r2
 8005364:	d100      	bne.n	8005368 <memcpy+0xc>
 8005366:	bd10      	pop	{r4, pc}
 8005368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800536c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005370:	e7f7      	b.n	8005362 <memcpy+0x6>

08005372 <memset>:
 8005372:	4402      	add	r2, r0
 8005374:	4603      	mov	r3, r0
 8005376:	4293      	cmp	r3, r2
 8005378:	d100      	bne.n	800537c <memset+0xa>
 800537a:	4770      	bx	lr
 800537c:	f803 1b01 	strb.w	r1, [r3], #1
 8005380:	e7f9      	b.n	8005376 <memset+0x4>
	...

08005384 <_free_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4605      	mov	r5, r0
 8005388:	2900      	cmp	r1, #0
 800538a:	d045      	beq.n	8005418 <_free_r+0x94>
 800538c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005390:	1f0c      	subs	r4, r1, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	bfb8      	it	lt
 8005396:	18e4      	addlt	r4, r4, r3
 8005398:	f000 f8ac 	bl	80054f4 <__malloc_lock>
 800539c:	4a1f      	ldr	r2, [pc, #124]	; (800541c <_free_r+0x98>)
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	4610      	mov	r0, r2
 80053a2:	b933      	cbnz	r3, 80053b2 <_free_r+0x2e>
 80053a4:	6063      	str	r3, [r4, #4]
 80053a6:	6014      	str	r4, [r2, #0]
 80053a8:	4628      	mov	r0, r5
 80053aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ae:	f000 b8a2 	b.w	80054f6 <__malloc_unlock>
 80053b2:	42a3      	cmp	r3, r4
 80053b4:	d90c      	bls.n	80053d0 <_free_r+0x4c>
 80053b6:	6821      	ldr	r1, [r4, #0]
 80053b8:	1862      	adds	r2, r4, r1
 80053ba:	4293      	cmp	r3, r2
 80053bc:	bf04      	itt	eq
 80053be:	681a      	ldreq	r2, [r3, #0]
 80053c0:	685b      	ldreq	r3, [r3, #4]
 80053c2:	6063      	str	r3, [r4, #4]
 80053c4:	bf04      	itt	eq
 80053c6:	1852      	addeq	r2, r2, r1
 80053c8:	6022      	streq	r2, [r4, #0]
 80053ca:	6004      	str	r4, [r0, #0]
 80053cc:	e7ec      	b.n	80053a8 <_free_r+0x24>
 80053ce:	4613      	mov	r3, r2
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	b10a      	cbz	r2, 80053d8 <_free_r+0x54>
 80053d4:	42a2      	cmp	r2, r4
 80053d6:	d9fa      	bls.n	80053ce <_free_r+0x4a>
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	1858      	adds	r0, r3, r1
 80053dc:	42a0      	cmp	r0, r4
 80053de:	d10b      	bne.n	80053f8 <_free_r+0x74>
 80053e0:	6820      	ldr	r0, [r4, #0]
 80053e2:	4401      	add	r1, r0
 80053e4:	1858      	adds	r0, r3, r1
 80053e6:	4282      	cmp	r2, r0
 80053e8:	6019      	str	r1, [r3, #0]
 80053ea:	d1dd      	bne.n	80053a8 <_free_r+0x24>
 80053ec:	6810      	ldr	r0, [r2, #0]
 80053ee:	6852      	ldr	r2, [r2, #4]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	4401      	add	r1, r0
 80053f4:	6019      	str	r1, [r3, #0]
 80053f6:	e7d7      	b.n	80053a8 <_free_r+0x24>
 80053f8:	d902      	bls.n	8005400 <_free_r+0x7c>
 80053fa:	230c      	movs	r3, #12
 80053fc:	602b      	str	r3, [r5, #0]
 80053fe:	e7d3      	b.n	80053a8 <_free_r+0x24>
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	1821      	adds	r1, r4, r0
 8005404:	428a      	cmp	r2, r1
 8005406:	bf04      	itt	eq
 8005408:	6811      	ldreq	r1, [r2, #0]
 800540a:	6852      	ldreq	r2, [r2, #4]
 800540c:	6062      	str	r2, [r4, #4]
 800540e:	bf04      	itt	eq
 8005410:	1809      	addeq	r1, r1, r0
 8005412:	6021      	streq	r1, [r4, #0]
 8005414:	605c      	str	r4, [r3, #4]
 8005416:	e7c7      	b.n	80053a8 <_free_r+0x24>
 8005418:	bd38      	pop	{r3, r4, r5, pc}
 800541a:	bf00      	nop
 800541c:	200001ec 	.word	0x200001ec

08005420 <_malloc_r>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	1ccd      	adds	r5, r1, #3
 8005424:	f025 0503 	bic.w	r5, r5, #3
 8005428:	3508      	adds	r5, #8
 800542a:	2d0c      	cmp	r5, #12
 800542c:	bf38      	it	cc
 800542e:	250c      	movcc	r5, #12
 8005430:	2d00      	cmp	r5, #0
 8005432:	4606      	mov	r6, r0
 8005434:	db01      	blt.n	800543a <_malloc_r+0x1a>
 8005436:	42a9      	cmp	r1, r5
 8005438:	d903      	bls.n	8005442 <_malloc_r+0x22>
 800543a:	230c      	movs	r3, #12
 800543c:	6033      	str	r3, [r6, #0]
 800543e:	2000      	movs	r0, #0
 8005440:	bd70      	pop	{r4, r5, r6, pc}
 8005442:	f000 f857 	bl	80054f4 <__malloc_lock>
 8005446:	4a21      	ldr	r2, [pc, #132]	; (80054cc <_malloc_r+0xac>)
 8005448:	6814      	ldr	r4, [r2, #0]
 800544a:	4621      	mov	r1, r4
 800544c:	b991      	cbnz	r1, 8005474 <_malloc_r+0x54>
 800544e:	4c20      	ldr	r4, [pc, #128]	; (80054d0 <_malloc_r+0xb0>)
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	b91b      	cbnz	r3, 800545c <_malloc_r+0x3c>
 8005454:	4630      	mov	r0, r6
 8005456:	f000 f83d 	bl	80054d4 <_sbrk_r>
 800545a:	6020      	str	r0, [r4, #0]
 800545c:	4629      	mov	r1, r5
 800545e:	4630      	mov	r0, r6
 8005460:	f000 f838 	bl	80054d4 <_sbrk_r>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d124      	bne.n	80054b2 <_malloc_r+0x92>
 8005468:	230c      	movs	r3, #12
 800546a:	6033      	str	r3, [r6, #0]
 800546c:	4630      	mov	r0, r6
 800546e:	f000 f842 	bl	80054f6 <__malloc_unlock>
 8005472:	e7e4      	b.n	800543e <_malloc_r+0x1e>
 8005474:	680b      	ldr	r3, [r1, #0]
 8005476:	1b5b      	subs	r3, r3, r5
 8005478:	d418      	bmi.n	80054ac <_malloc_r+0x8c>
 800547a:	2b0b      	cmp	r3, #11
 800547c:	d90f      	bls.n	800549e <_malloc_r+0x7e>
 800547e:	600b      	str	r3, [r1, #0]
 8005480:	50cd      	str	r5, [r1, r3]
 8005482:	18cc      	adds	r4, r1, r3
 8005484:	4630      	mov	r0, r6
 8005486:	f000 f836 	bl	80054f6 <__malloc_unlock>
 800548a:	f104 000b 	add.w	r0, r4, #11
 800548e:	1d23      	adds	r3, r4, #4
 8005490:	f020 0007 	bic.w	r0, r0, #7
 8005494:	1ac3      	subs	r3, r0, r3
 8005496:	d0d3      	beq.n	8005440 <_malloc_r+0x20>
 8005498:	425a      	negs	r2, r3
 800549a:	50e2      	str	r2, [r4, r3]
 800549c:	e7d0      	b.n	8005440 <_malloc_r+0x20>
 800549e:	428c      	cmp	r4, r1
 80054a0:	684b      	ldr	r3, [r1, #4]
 80054a2:	bf16      	itet	ne
 80054a4:	6063      	strne	r3, [r4, #4]
 80054a6:	6013      	streq	r3, [r2, #0]
 80054a8:	460c      	movne	r4, r1
 80054aa:	e7eb      	b.n	8005484 <_malloc_r+0x64>
 80054ac:	460c      	mov	r4, r1
 80054ae:	6849      	ldr	r1, [r1, #4]
 80054b0:	e7cc      	b.n	800544c <_malloc_r+0x2c>
 80054b2:	1cc4      	adds	r4, r0, #3
 80054b4:	f024 0403 	bic.w	r4, r4, #3
 80054b8:	42a0      	cmp	r0, r4
 80054ba:	d005      	beq.n	80054c8 <_malloc_r+0xa8>
 80054bc:	1a21      	subs	r1, r4, r0
 80054be:	4630      	mov	r0, r6
 80054c0:	f000 f808 	bl	80054d4 <_sbrk_r>
 80054c4:	3001      	adds	r0, #1
 80054c6:	d0cf      	beq.n	8005468 <_malloc_r+0x48>
 80054c8:	6025      	str	r5, [r4, #0]
 80054ca:	e7db      	b.n	8005484 <_malloc_r+0x64>
 80054cc:	200001ec 	.word	0x200001ec
 80054d0:	200001f0 	.word	0x200001f0

080054d4 <_sbrk_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4c06      	ldr	r4, [pc, #24]	; (80054f0 <_sbrk_r+0x1c>)
 80054d8:	2300      	movs	r3, #0
 80054da:	4605      	mov	r5, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	6023      	str	r3, [r4, #0]
 80054e0:	f7fc fc14 	bl	8001d0c <_sbrk>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_sbrk_r+0x1a>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_sbrk_r+0x1a>
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	200004b8 	.word	0x200004b8

080054f4 <__malloc_lock>:
 80054f4:	4770      	bx	lr

080054f6 <__malloc_unlock>:
 80054f6:	4770      	bx	lr

080054f8 <ceil>:
 80054f8:	ec51 0b10 	vmov	r0, r1, d0
 80054fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005500:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005504:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005508:	2e13      	cmp	r6, #19
 800550a:	460c      	mov	r4, r1
 800550c:	ee10 5a10 	vmov	r5, s0
 8005510:	4680      	mov	r8, r0
 8005512:	dc30      	bgt.n	8005576 <ceil+0x7e>
 8005514:	2e00      	cmp	r6, #0
 8005516:	da12      	bge.n	800553e <ceil+0x46>
 8005518:	a333      	add	r3, pc, #204	; (adr r3, 80055e8 <ceil+0xf0>)
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f7fa fe61 	bl	80001e4 <__adddf3>
 8005522:	2200      	movs	r2, #0
 8005524:	2300      	movs	r3, #0
 8005526:	f7fb faa3 	bl	8000a70 <__aeabi_dcmpgt>
 800552a:	b128      	cbz	r0, 8005538 <ceil+0x40>
 800552c:	2c00      	cmp	r4, #0
 800552e:	db55      	blt.n	80055dc <ceil+0xe4>
 8005530:	432c      	orrs	r4, r5
 8005532:	d057      	beq.n	80055e4 <ceil+0xec>
 8005534:	4c2e      	ldr	r4, [pc, #184]	; (80055f0 <ceil+0xf8>)
 8005536:	2500      	movs	r5, #0
 8005538:	4621      	mov	r1, r4
 800553a:	4628      	mov	r0, r5
 800553c:	e025      	b.n	800558a <ceil+0x92>
 800553e:	4f2d      	ldr	r7, [pc, #180]	; (80055f4 <ceil+0xfc>)
 8005540:	4137      	asrs	r7, r6
 8005542:	ea01 0307 	and.w	r3, r1, r7
 8005546:	4303      	orrs	r3, r0
 8005548:	d01f      	beq.n	800558a <ceil+0x92>
 800554a:	a327      	add	r3, pc, #156	; (adr r3, 80055e8 <ceil+0xf0>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f7fa fe48 	bl	80001e4 <__adddf3>
 8005554:	2200      	movs	r2, #0
 8005556:	2300      	movs	r3, #0
 8005558:	f7fb fa8a 	bl	8000a70 <__aeabi_dcmpgt>
 800555c:	2800      	cmp	r0, #0
 800555e:	d0eb      	beq.n	8005538 <ceil+0x40>
 8005560:	2c00      	cmp	r4, #0
 8005562:	bfc2      	ittt	gt
 8005564:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8005568:	fa43 f606 	asrgt.w	r6, r3, r6
 800556c:	19a4      	addgt	r4, r4, r6
 800556e:	ea24 0407 	bic.w	r4, r4, r7
 8005572:	2500      	movs	r5, #0
 8005574:	e7e0      	b.n	8005538 <ceil+0x40>
 8005576:	2e33      	cmp	r6, #51	; 0x33
 8005578:	dd0b      	ble.n	8005592 <ceil+0x9a>
 800557a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800557e:	d104      	bne.n	800558a <ceil+0x92>
 8005580:	ee10 2a10 	vmov	r2, s0
 8005584:	460b      	mov	r3, r1
 8005586:	f7fa fe2d 	bl	80001e4 <__adddf3>
 800558a:	ec41 0b10 	vmov	d0, r0, r1
 800558e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005592:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005596:	f04f 33ff 	mov.w	r3, #4294967295
 800559a:	fa23 f707 	lsr.w	r7, r3, r7
 800559e:	4207      	tst	r7, r0
 80055a0:	d0f3      	beq.n	800558a <ceil+0x92>
 80055a2:	a311      	add	r3, pc, #68	; (adr r3, 80055e8 <ceil+0xf0>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f7fa fe1c 	bl	80001e4 <__adddf3>
 80055ac:	2200      	movs	r2, #0
 80055ae:	2300      	movs	r3, #0
 80055b0:	f7fb fa5e 	bl	8000a70 <__aeabi_dcmpgt>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d0bf      	beq.n	8005538 <ceil+0x40>
 80055b8:	2c00      	cmp	r4, #0
 80055ba:	dd02      	ble.n	80055c2 <ceil+0xca>
 80055bc:	2e14      	cmp	r6, #20
 80055be:	d103      	bne.n	80055c8 <ceil+0xd0>
 80055c0:	3401      	adds	r4, #1
 80055c2:	ea25 0507 	bic.w	r5, r5, r7
 80055c6:	e7b7      	b.n	8005538 <ceil+0x40>
 80055c8:	2301      	movs	r3, #1
 80055ca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80055ce:	fa03 f606 	lsl.w	r6, r3, r6
 80055d2:	4435      	add	r5, r6
 80055d4:	4545      	cmp	r5, r8
 80055d6:	bf38      	it	cc
 80055d8:	18e4      	addcc	r4, r4, r3
 80055da:	e7f2      	b.n	80055c2 <ceil+0xca>
 80055dc:	2500      	movs	r5, #0
 80055de:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80055e2:	e7a9      	b.n	8005538 <ceil+0x40>
 80055e4:	4625      	mov	r5, r4
 80055e6:	e7a7      	b.n	8005538 <ceil+0x40>
 80055e8:	8800759c 	.word	0x8800759c
 80055ec:	7e37e43c 	.word	0x7e37e43c
 80055f0:	3ff00000 	.word	0x3ff00000
 80055f4:	000fffff 	.word	0x000fffff

080055f8 <_init>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr

08005604 <_fini>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	bf00      	nop
 8005608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560a:	bc08      	pop	{r3}
 800560c:	469e      	mov	lr, r3
 800560e:	4770      	bx	lr
