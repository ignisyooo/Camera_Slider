
Slider_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005684  08005684  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  08005684  08005684  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005684  08005684  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800568c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000018c  08005818  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08005818  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016807  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000328c  00000000  00000000  000369c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00039c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  0003aae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f9f0  00000000  00000000  0003b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f08c  00000000  00000000  0005b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b13db  00000000  00000000  0006a264  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b63f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  0011b6bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000018c 	.word	0x2000018c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005628 	.word	0x08005628

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000190 	.word	0x20000190
 80001d4:	08005628 	.word	0x08005628

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <get_amount_of_times>:
#include "FIFO.h"
#include <stdio.h>
#include <stdlib.h>

uint8_t get_amount_of_times(Fifo_data *data)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint8_t size = 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
	if (!data)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d107      	bne.n	8000b36 <get_amount_of_times+0x22>
	{
		return 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e00a      	b.n	8000b40 <get_amount_of_times+0x2c>
	}
	while (data->next)
	{
		size++;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
		data = data->next;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	607b      	str	r3, [r7, #4]
	while (data->next)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f5      	bne.n	8000b2a <get_amount_of_times+0x16>
	}
	return size;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <read_data>:

void read_data(Fifo_data **data, uint16_t *a, uint16_t *b)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	uint16_t retVal;
	if (*data == NULL)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d106      	bne.n	8000b6e <read_data+0x22>
	{
		*a = 0;
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	2200      	movs	r2, #0
 8000b64:	801a      	strh	r2, [r3, #0]
		*b = 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	801a      	strh	r2, [r3, #0]
		*b = (*data)->length;
		new = (*data)->next;
		free(*data);
		(*data) = new;
	}
}
 8000b6c:	e017      	b.n	8000b9e <read_data+0x52>
		Fifo_data *new = NULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
		*a = (*data)->time;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	889a      	ldrh	r2, [r3, #4]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	801a      	strh	r2, [r3, #0]
		*b = (*data)->length;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	88da      	ldrh	r2, [r3, #6]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	801a      	strh	r2, [r3, #0]
		new = (*data)->next;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	617b      	str	r3, [r7, #20]
		free(*data);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 fbf2 	bl	800537c <free>
		(*data) = new;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <getLast>:

static Fifo_data *getLast(Fifo_data *data)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	if (data)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d007      	beq.n	8000bc4 <getLast+0x1e>
	{
		while (data->next)
 8000bb4:	e002      	b.n	8000bbc <getLast+0x16>
			data = data->next;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	607b      	str	r3, [r7, #4]
		while (data->next)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1f8      	bne.n	8000bb6 <getLast+0x10>
	}
	return data;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <write_data_to_FIFO>:

void write_data_to_FIFO(Fifo_data **data, uint16_t val, uint16_t len)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	807b      	strh	r3, [r7, #2]
 8000bde:	4613      	mov	r3, r2
 8000be0:	803b      	strh	r3, [r7, #0]
	if (*data)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d019      	beq.n	8000c1e <write_data_to_FIFO+0x4c>
	{
		Fifo_data *current = getLast(*data);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ffd9 	bl	8000ba6 <getLast>
 8000bf4:	60f8      	str	r0, [r7, #12]
		current->next = (Fifo_data *)malloc(sizeof(Fifo_data));
 8000bf6:	2008      	movs	r0, #8
 8000bf8:	f004 fbb8 	bl	800536c <malloc>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	601a      	str	r2, [r3, #0]
		current->next->next = NULL;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
		current->next->time = val;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	887a      	ldrh	r2, [r7, #2]
 8000c12:	809a      	strh	r2, [r3, #4]
		current->next->length = len;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	883a      	ldrh	r2, [r7, #0]
 8000c1a:	80da      	strh	r2, [r3, #6]
		(*data) = (Fifo_data *)malloc(sizeof(Fifo_data));
		(*data)->next = NULL;
		(*data)->time = val;
		(*data)->length = len;
	}
}
 8000c1c:	e012      	b.n	8000c44 <write_data_to_FIFO+0x72>
		(*data) = (Fifo_data *)malloc(sizeof(Fifo_data));
 8000c1e:	2008      	movs	r0, #8
 8000c20:	f004 fba4 	bl	800536c <malloc>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	601a      	str	r2, [r3, #0]
		(*data)->next = NULL;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
		(*data)->time = val;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	887a      	ldrh	r2, [r7, #2]
 8000c3a:	809a      	strh	r2, [r3, #4]
		(*data)->length = len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	883a      	ldrh	r2, [r7, #0]
 8000c42:	80da      	strh	r2, [r3, #6]
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <read_time>:
int read_time(Fifo_data *data)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	int time = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
	if (!data)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d10a      	bne.n	8000c74 <read_time+0x28>
	{
		return 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e00c      	b.n	8000c7c <read_time+0x30>
	}
	else
	{
		while (data)
		{
			time += data->time;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	889b      	ldrh	r3, [r3, #4]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
			data = data->next;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	607b      	str	r3, [r7, #4]
		while (data)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f3      	bne.n	8000c62 <read_time+0x16>
		}
	}
	return time;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <HAL_TIM_PeriodElapsedCallback>:

MotorErr retval = MOTOR_OK;

DataReadEnum DataRead = data_unavailable;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d15c      	bne.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0xcc>
		if(MOTOR_OK == retval)
 8000c9a:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d116      	bne.n	8000cd0 <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			for(int i=0;i<MOTORS_NUM;i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e00f      	b.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x40>
			{
				retval = motorRun(&Motor_set[i]);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	225c      	movs	r2, #92	; 0x5c
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	4a34      	ldr	r2, [pc, #208]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fbc8 	bl	800144a <motorRun>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000cc0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<MOTORS_NUM;i++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	ddec      	ble.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x20>
			state = run_trigger(&timer_T);
		else {
			// Do nothing
		}
	}
}
 8000cce:	e051      	b.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0xec>
		else if(MOTOR_INTERRUPT_ERROR == retval)
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d12a      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0xa6>
			for(int i=0;i<MOTORS_NUM;i++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	e023      	b.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x9e>
				if(i==0)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d107      	bne.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x6c>
					retval = set(Motor_set);
 8000ce4:	4827      	ldr	r0, [pc, #156]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ce6:	f000 fe85 	bl	80019f4 <set>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e00c      	b.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x86>
					retval = set_for_angle(&Motor_set[i]);
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	225c      	movs	r2, #92	; 0x5c
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fecd 	bl	8001aa0 <set_for_angle>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000d0c:	701a      	strb	r2, [r3, #0]
				motorStartMove(&Motor_set[i]);
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	225c      	movs	r2, #92	; 0x5c
 8000d12:	fb02 f303 	mul.w	r3, r2, r3
 8000d16:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000d18:	4413      	add	r3, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fc02 	bl	8001524 <motorStartMove>
			for(int i=0;i<MOTORS_NUM;i++)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	3301      	adds	r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	ddd8      	ble.n	8000cde <HAL_TIM_PeriodElapsedCallback+0x56>
}
 8000d2c:	e022      	b.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0xec>
			for(int i=0;i<MOTORS_NUM;i++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	e00b      	b.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0xc4>
				motorStop(&Motor_set[i]);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	225c      	movs	r2, #92	; 0x5c
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000d3e:	4413      	add	r3, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fb55 	bl	80013f0 <motorStop>
			for(int i=0;i<MOTORS_NUM;i++)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	ddf0      	ble.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0xac>
}
 8000d52:	e00f      	b.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0xec>
	} else if (htim->Instance == TIM7) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d10a      	bne.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0xec>
		if (1 == state)
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d106      	bne.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0xec>
			state = run_trigger(&timer_T);
 8000d66:	480a      	ldr	r0, [pc, #40]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000d68:	f000 fd9c 	bl	80018a4 <run_trigger>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d72:	701a      	strb	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40001000 	.word	0x40001000
 8000d80:	200001a8 	.word	0x200001a8
 8000d84:	2000023c 	.word	0x2000023c
 8000d88:	40001400 	.word	0x40001400
 8000d8c:	20000001 	.word	0x20000001
 8000d90:	200001b8 	.word	0x200001b8

08000d94 <HAL_UART_RxCpltCallback>:
			//motorStop(Motor_set + i);
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_UART_RxCpltCallback+0x38>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d10e      	bne.n	8000dc4 <HAL_UART_RxCpltCallback+0x30>
		static int idx=1;
		HAL_UART_Receive_IT(&huart3, (uint16_t*) (data+idx), 2);
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_UART_RxCpltCallback+0x3c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <HAL_UART_RxCpltCallback+0x40>)
 8000dae:	4413      	add	r3, r2
 8000db0:	2202      	movs	r2, #2
 8000db2:	4619      	mov	r1, r3
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <HAL_UART_RxCpltCallback+0x44>)
 8000db6:	f003 fc37 	bl	8004628 <HAL_UART_Receive_IT>
		idx++;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_UART_RxCpltCallback+0x3c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_UART_RxCpltCallback+0x3c>)
 8000dc2:	6013      	str	r3, [r2, #0]
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	200001f4 	.word	0x200001f4
 8000dd8:	200003d4 	.word	0x200003d4

08000ddc <add_motors>:
				},
};


void add_motors(Motor_T *sett)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	sett[0]=motor1;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <add_motors+0x44>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	4611      	mov	r1, r2
 8000dec:	235c      	movs	r3, #92	; 0x5c
 8000dee:	461a      	mov	r2, r3
 8000df0:	f004 facc 	bl	800538c <memcpy>
	sett[1]=motor2;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	335c      	adds	r3, #92	; 0x5c
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <add_motors+0x48>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	235c      	movs	r3, #92	; 0x5c
 8000e00:	461a      	mov	r2, r3
 8000e02:	f004 fac3 	bl	800538c <memcpy>
	sett[2]=motor3;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33b8      	adds	r3, #184	; 0xb8
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <add_motors+0x4c>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	4611      	mov	r1, r2
 8000e10:	235c      	movs	r3, #92	; 0x5c
 8000e12:	461a      	mov	r2, r3
 8000e14:	f004 faba 	bl	800538c <memcpy>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000064 	.word	0x20000064
 8000e28:	200000c0 	.word	0x200000c0

08000e2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e42:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	4a52      	ldr	r2, [pc, #328]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e4c:	6153      	str	r3, [r2, #20]
 8000e4e:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	6153      	str	r3, [r2, #20]
 8000e66:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a46      	ldr	r2, [pc, #280]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e7c:	6153      	str	r3, [r2, #20]
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a40      	ldr	r2, [pc, #256]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a3a      	ldr	r2, [pc, #232]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <MX_GPIO_Init+0x164>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAMERA_T_Pin|MOBILE_T_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2124      	movs	r1, #36	; 0x24
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f001 fc3d 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_MS1_Pin|MOTOR2_STEP_Pin|MOTOR2_DIR_Pin|MOTOR1_STEP_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f001 fc36 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f641 71f0 	movw	r1, #8176	; 0x1ff0
 8000eda:	482e      	ldr	r0, [pc, #184]	; (8000f94 <MX_GPIO_Init+0x168>)
 8000edc:	f001 fc30 	bl	8002740 <HAL_GPIO_WritePin>
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin|MOTOR3_MS3_Pin|MOTOR3_MS2_Pin
                          |MOTOR3_MS1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f24c 0173 	movw	r1, #49267	; 0xc073
 8000ee6:	482c      	ldr	r0, [pc, #176]	; (8000f98 <MX_GPIO_Init+0x16c>)
 8000ee8:	f001 fc2a 	bl	8002740 <HAL_GPIO_WritePin>
                          |MOTOR3_DIR_Pin|MOTOR3_STEP_Pin|MOTOR3_SLEEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR3_RESET_GPIO_Port, MOTOR3_RESET_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	482a      	ldr	r0, [pc, #168]	; (8000f9c <MX_GPIO_Init+0x170>)
 8000ef2:	f001 fc25 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CAMERA_T_Pin|MOTOR2_MS1_Pin|MOBILE_T_Pin|MOTOR2_STEP_Pin
 8000ef6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000efa:	617b      	str	r3, [r7, #20]
                          |MOTOR2_DIR_Pin|MOTOR1_STEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f001 fa8b 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR2_SLEEP_Pin|MOTOR2_RESET_Pin|MOTOR1_MS1_Pin|MOTOR1_RESET_Pin
 8000f16:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 8000f1a:	617b      	str	r3, [r7, #20]
                          |MOTOR1_SLEEP_Pin|MOTOR1_DIR_Pin|MOTOR3_MS3_Pin|MOTOR3_MS2_Pin
                          |MOTOR3_MS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4819      	ldr	r0, [pc, #100]	; (8000f94 <MX_GPIO_Init+0x168>)
 8000f30:	f001 fa7c 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR2_MS2_Pin|MOTOR2_MS3_Pin|MOTOR1_MS3_Pin|MOTOR1_MS2_Pin
 8000f34:	f24c 0373 	movw	r3, #49267	; 0xc073
 8000f38:	617b      	str	r3, [r7, #20]
                          |MOTOR3_DIR_Pin|MOTOR3_STEP_Pin|MOTOR3_SLEEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4812      	ldr	r0, [pc, #72]	; (8000f98 <MX_GPIO_Init+0x16c>)
 8000f4e:	f001 fa6d 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_Pin;
 8000f52:	2304      	movs	r3, #4
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_GPIO_Init+0x174>)
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_GPIO_Init+0x16c>)
 8000f66:	f001 fa61 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR3_RESET_Pin;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR3_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_GPIO_Init+0x170>)
 8000f82:	f001 fa53 	bl	800242c <HAL_GPIO_Init>

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000c00 	.word	0x48000c00
 8000fa0:	10110000 	.word	0x10110000

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000faa:	f001 f867 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fae:	f000 f893 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb2:	f7ff ff3b 	bl	8000e2c <MX_GPIO_Init>
  MX_TIM6_Init();
 8000fb6:	f000 ff0d 	bl	8001dd4 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000fba:	f000 ffb9 	bl	8001f30 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000fbe:	f000 ff3f 	bl	8001e40 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	add_motors(Motor_set);
 8000fc2:	483c      	ldr	r0, [pc, #240]	; (80010b4 <main+0x110>)
 8000fc4:	f7ff ff0a 	bl	8000ddc <add_motors>
	HAL_UART_Receive_IT(&huart3, (uint16_t*) data, 2);
 8000fc8:	2202      	movs	r2, #2
 8000fca:	493b      	ldr	r1, [pc, #236]	; (80010b8 <main+0x114>)
 8000fcc:	483b      	ldr	r0, [pc, #236]	; (80010bc <main+0x118>)
 8000fce:	f003 fb2b 	bl	8004628 <HAL_UART_Receive_IT>
	while (data_unavailable == DataRead)
 8000fd2:	e006      	b.n	8000fe2 <main+0x3e>
		DataRead = DataReceive(data);
 8000fd4:	4838      	ldr	r0, [pc, #224]	; (80010b8 <main+0x114>)
 8000fd6:	f000 fbfd 	bl	80017d4 <DataReceive>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <main+0x11c>)
 8000fe0:	701a      	strb	r2, [r3, #0]
	while (data_unavailable == DataRead)
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <main+0x11c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d0f4      	beq.n	8000fd4 <main+0x30>
	//Waiting for data
	UART_WriteData(Motor_set, data, &timer_T);
 8000fea:	4a36      	ldr	r2, [pc, #216]	; (80010c4 <main+0x120>)
 8000fec:	4932      	ldr	r1, [pc, #200]	; (80010b8 <main+0x114>)
 8000fee:	4831      	ldr	r0, [pc, #196]	; (80010b4 <main+0x110>)
 8000ff0:	f000 fba0 	bl	8001734 <UART_WriteData>
	init_t(&timer_T, Motor_set);
 8000ff4:	492f      	ldr	r1, [pc, #188]	; (80010b4 <main+0x110>)
 8000ff6:	4833      	ldr	r0, [pc, #204]	; (80010c4 <main+0x120>)
 8000ff8:	f000 fcbb 	bl	8001972 <init_t>
	for (int i = 0; i < MOTORS_NUM; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	e01b      	b.n	800103a <main+0x96>
		Motor_Init(Motor_set + i);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	225c      	movs	r2, #92	; 0x5c
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <main+0x110>)
 800100c:	4413      	add	r3, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f9ae 	bl	8001370 <Motor_Init>
		if (i == 0)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <main+0x7e>
			set(Motor_set);
 800101a:	4826      	ldr	r0, [pc, #152]	; (80010b4 <main+0x110>)
 800101c:	f000 fcea 	bl	80019f4 <set>
 8001020:	e008      	b.n	8001034 <main+0x90>
		else
			set_for_angle(Motor_set + i);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	225c      	movs	r2, #92	; 0x5c
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <main+0x110>)
 800102c:	4413      	add	r3, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fd36 	bl	8001aa0 <set_for_angle>
	for (int i = 0; i < MOTORS_NUM; i++) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b02      	cmp	r3, #2
 800103e:	dde0      	ble.n	8001002 <main+0x5e>
	}
	motorStartMove(Motor_set);
 8001040:	481c      	ldr	r0, [pc, #112]	; (80010b4 <main+0x110>)
 8001042:	f000 fa6f 	bl	8001524 <motorStartMove>
	motorStartMove(&Motor_set[1]);
 8001046:	4820      	ldr	r0, [pc, #128]	; (80010c8 <main+0x124>)
 8001048:	f000 fa6c 	bl	8001524 <motorStartMove>
	motorStartMove(&Motor_set[2]);
 800104c:	481f      	ldr	r0, [pc, #124]	; (80010cc <main+0x128>)
 800104e:	f000 fa69 	bl	8001524 <motorStartMove>
	while(data_confirm != DataRead)
 8001052:	e006      	b.n	8001062 <main+0xbe>
		DataRead = DataReceive(data);
 8001054:	4818      	ldr	r0, [pc, #96]	; (80010b8 <main+0x114>)
 8001056:	f000 fbbd 	bl	80017d4 <DataReceive>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <main+0x11c>)
 8001060:	701a      	strb	r2, [r3, #0]
	while(data_confirm != DataRead)
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <main+0x11c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d1f4      	bne.n	8001054 <main+0xb0>
	HAL_TIM_Base_Start_IT(&htim6);
 800106a:	4819      	ldr	r0, [pc, #100]	; (80010d0 <main+0x12c>)
 800106c:	f002 ff16 	bl	8003e9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <main+0x130>)
 8001072:	f002 ff13 	bl	8003e9c <HAL_TIM_Base_Start_IT>
	UART_startmove();
 8001076:	f000 fb3d 	bl	80016f4 <UART_startmove>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(data_stop == DataReceive(data))
 800107a:	480f      	ldr	r0, [pc, #60]	; (80010b8 <main+0x114>)
 800107c:	f000 fbaa 	bl	80017d4 <DataReceive>
 8001080:	4603      	mov	r3, r0
 8001082:	2b03      	cmp	r3, #3
 8001084:	d1f9      	bne.n	800107a <main+0xd6>
		{
			for(int i=0;i<MOTORS_NUM;++i)
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	e00b      	b.n	80010a4 <main+0x100>
				motorStop(Motor_set+i);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	225c      	movs	r2, #92	; 0x5c
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <main+0x110>)
 8001096:	4413      	add	r3, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f9a9 	bl	80013f0 <motorStop>
			for(int i=0;i<MOTORS_NUM;++i)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	ddf0      	ble.n	800108c <main+0xe8>
			HAL_TIM_Base_Stop_IT(&htim7);
 80010aa:	480a      	ldr	r0, [pc, #40]	; (80010d4 <main+0x130>)
 80010ac:	f002 ff20 	bl	8003ef0 <HAL_TIM_Base_Stop_IT>
		if(data_stop == DataReceive(data))
 80010b0:	e7e3      	b.n	800107a <main+0xd6>
 80010b2:	bf00      	nop
 80010b4:	2000023c 	.word	0x2000023c
 80010b8:	200001f4 	.word	0x200001f4
 80010bc:	200003d4 	.word	0x200003d4
 80010c0:	20000000 	.word	0x20000000
 80010c4:	200001b8 	.word	0x200001b8
 80010c8:	20000298 	.word	0x20000298
 80010cc:	200002f4 	.word	0x200002f4
 80010d0:	20000354 	.word	0x20000354
 80010d4:	20000394 	.word	0x20000394

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0a6      	sub	sp, #152	; 0x98
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010e2:	2228      	movs	r2, #40	; 0x28
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 f95b 	bl	80053a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2258      	movs	r2, #88	; 0x58
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f004 f94d 	bl	80053a2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001108:	2301      	movs	r3, #1
 800110a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001110:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001124:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001128:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fb1a 	bl	8002770 <HAL_RCC_OscConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001142:	f000 f827 	bl	8001194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001146:	230f      	movs	r3, #15
 8001148:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114a:	2302      	movs	r3, #2
 800114c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001156:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001160:	2102      	movs	r1, #2
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fa1a 	bl	800359c <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800116e:	f000 f811 	bl	8001194 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001172:	2304      	movs	r3, #4
 8001174:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fc43 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001188:	f000 f804 	bl	8001194 <Error_Handler>
  }
}
 800118c:	bf00      	nop
 800118e:	3798      	adds	r7, #152	; 0x98
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <Motor_PinMode>:
 * 4 -> 1/16 steep
 *
 * While init mircosteep is set to 0 ( Full steep)
 ********************************************/

void Motor_PinMode(Motor_T *sett) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6998      	ldr	r0, [r3, #24]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	8b99      	ldrh	r1, [r3, #28]
			(sett->flags.isOn) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN,
 80011be:	461a      	mov	r2, r3
 80011c0:	f001 fabe 	bl	8002740 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	8899      	ldrh	r1, [r3, #4]
			(sett->flags.reset) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Reset.PORT, sett->Pin_Reset.PIN,
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf0c      	ite	eq
 80011dc:	2301      	moveq	r3, #1
 80011de:	2300      	movne	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	f001 faac 	bl	8002740 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	8999      	ldrh	r1, [r3, #12]
			(sett->flags.sleep) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(sett->Pin_Sleep.PORT, sett->Pin_Sleep.PIN,
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	f001 fa9a 	bl	8002740 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6918      	ldr	r0, [r3, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	8a99      	ldrh	r1, [r3, #20]
			(sett->flags.direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(sett->Pin_Direction.PORT, sett->Pin_Direction.PIN,
 8001224:	461a      	mov	r2, r3
 8001226:	f001 fa8b 	bl	8002740 <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <Motor_MicroPinSet>:

MotorErr Motor_MicroPinSet(Motor_T *sett) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	MotorErr retValue = MOTOR_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
	switch (sett->device.microstep) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001246:	2b04      	cmp	r3, #4
 8001248:	f200 808b 	bhi.w	8001362 <Motor_MicroPinSet+0x12e>
 800124c:	a201      	add	r2, pc, #4	; (adr r2, 8001254 <Motor_MicroPinSet+0x20>)
 800124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001252:	bf00      	nop
 8001254:	08001269 	.word	0x08001269
 8001258:	0800129b 	.word	0x0800129b
 800125c:	080012cd 	.word	0x080012cd
 8001260:	080012ff 	.word	0x080012ff
 8001264:	08001331 	.word	0x08001331
	case 0:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a18      	ldr	r0, [r3, #32]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	f001 fa64 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	f001 fa5c 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	f001 fa54 	bl	8002740 <HAL_GPIO_WritePin>
		break;
 8001298:	e065      	b.n	8001366 <Motor_MicroPinSet+0x132>
	case 1:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a18      	ldr	r0, [r3, #32]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012a2:	2201      	movs	r2, #1
 80012a4:	4619      	mov	r1, r3
 80012a6:	f001 fa4b 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_RESET);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80012b2:	2200      	movs	r2, #0
 80012b4:	4619      	mov	r1, r3
 80012b6:	f001 fa43 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	f001 fa3b 	bl	8002740 <HAL_GPIO_WritePin>
		break;
 80012ca:	e04c      	b.n	8001366 <Motor_MicroPinSet+0x132>
	case 2:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_RESET);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a18      	ldr	r0, [r3, #32]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	f001 fa32 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f001 fa2a 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	f001 fa22 	bl	8002740 <HAL_GPIO_WritePin>
		break;
 80012fc:	e033      	b.n	8001366 <Motor_MicroPinSet+0x132>
	case 3:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a18      	ldr	r0, [r3, #32]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001306:	2201      	movs	r2, #1
 8001308:	4619      	mov	r1, r3
 800130a:	f001 fa19 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001316:	2201      	movs	r2, #1
 8001318:	4619      	mov	r1, r3
 800131a:	f001 fa11 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_RESET);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	f001 fa09 	bl	8002740 <HAL_GPIO_WritePin>
		break;
 800132e:	e01a      	b.n	8001366 <Motor_MicroPinSet+0x132>

	case 4:
		HAL_GPIO_WritePin(sett->MS1.PORT, sett->MS1.PIN, GPIO_PIN_SET);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a18      	ldr	r0, [r3, #32]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001338:	2201      	movs	r2, #1
 800133a:	4619      	mov	r1, r3
 800133c:	f001 fa00 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS2.PORT, sett->MS2.PIN, GPIO_PIN_SET);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001348:	2201      	movs	r2, #1
 800134a:	4619      	mov	r1, r3
 800134c:	f001 f9f8 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sett->MS3.PORT, sett->MS3.PIN, GPIO_PIN_SET);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	f001 f9f0 	bl	8002740 <HAL_GPIO_WritePin>
		break;
 8001360:	e001      	b.n	8001366 <Motor_MicroPinSet+0x132>
	default:
		retValue = MOTOR_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	73fb      	strb	r3, [r7, #15]
	}
	return retValue;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <Motor_Init>:

void Motor_Init(Motor_T *sett) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	sett->flags.isOn = 0;
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800137e:	f36f 0300 	bfc	r3, #0, #1
 8001382:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.reset = 0;
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800138c:	f36f 0341 	bfc	r3, #1, #1
 8001390:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.direction = CW;
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.stepPhase = LOW;
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80013b6:	f36f 1304 	bfc	r3, #4, #1
 80013ba:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	sett->counter.pulse = 0;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sett->counter.stepLeft = 0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	641a      	str	r2, [r3, #64]	; 0x40
	sett->device.points_num = -1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	22ff      	movs	r2, #255	; 0xff
 80013d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	sett->device.microstep = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Motor_PinMode(sett);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fee0 	bl	80011a2 <Motor_PinMode>
	Motor_MicroPinSet(sett);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff26 	bl	8001234 <Motor_MicroPinSet>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <motorStop>:

MotorErr motorStop(Motor_T *sett) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]

	if (sett->flags.reset) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <motorStop+0x20>
		return MOTOR_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e018      	b.n	8001442 <motorStop+0x52>
	}

	sett->flags.isOn = 0;
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001416:	f36f 0300 	bfc	r3, #0, #1
 800141a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.sleep = 1;
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.stepPhase = LOW;
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001432:	f36f 1304 	bfc	r3, #4, #1
 8001436:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	Motor_PinMode(sett);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff feb1 	bl	80011a2 <Motor_PinMode>

	return retval;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <motorRun>:

MotorErr motorRun(Motor_T *sett) {
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	MotorErr retval = MOTOR_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
	if (!sett->flags.reset && !sett->flags.sleep) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d155      	bne.n	8001512 <motorRun+0xc8>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d14d      	bne.n	8001512 <motorRun+0xc8>
		--(sett->counter.changeTime);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800147a:	3b01      	subs	r3, #1
 800147c:	b29a      	uxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	879a      	strh	r2, [r3, #60]	; 0x3c
		if (sett->counter.changeTime <= 0) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001486:	2b00      	cmp	r3, #0
 8001488:	d146      	bne.n	8001518 <motorRun+0xce>
			sett->counter.changeTime = sett->counter.pulse;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	879a      	strh	r2, [r3, #60]	; 0x3c
			--(sett->counter.stepLeft);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	1e5a      	subs	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40

			if (sett->counter.stepLeft <= 0) {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	dc04      	bgt.n	80014b0 <motorRun+0x66>
				motorStop(sett);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <motorStop>
				return MOTOR_INTERRUPT_ERROR;
 80014ac:	2302      	movs	r3, #2
 80014ae:	e035      	b.n	800151c <motorRun+0xd2>
			}

			switch (sett->flags.stepPhase) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d010      	beq.n	80014e2 <motorRun+0x98>
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d11d      	bne.n	8001500 <motorRun+0xb6>
			case HIGH:
				sett->flags.stepPhase = LOW;
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80014ca:	f36f 1304 	bfc	r3, #4, #1
 80014ce:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 0;
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80014d8:	f36f 0300 	bfc	r3, #0, #1
 80014dc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				break;
 80014e0:	e010      	b.n	8001504 <motorRun+0xba>
			case LOW:
				sett->flags.stepPhase = HIGH;
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				sett->flags.isOn = 1;
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				break;
 80014fe:	e001      	b.n	8001504 <motorRun+0xba>
			default:
				retval = MOTOR_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
			}
			if (retval == MOTOR_OK) {
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <motorRun+0xce>
				Motor_PinMode(sett);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fe49 	bl	80011a2 <Motor_PinMode>
		if (sett->counter.changeTime <= 0) {
 8001510:	e002      	b.n	8001518 <motorRun+0xce>
			}
		}
	} else {
		retval = MOTOR_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e000      	b.n	800151a <motorRun+0xd0>
		if (sett->counter.changeTime <= 0) {
 8001518:	bf00      	nop
	}

	return retval;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <motorStartMove>:
MotorErr motorStartMove(Motor_T *sett) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	if (sett->counter.stepLeft <= 0 || sett->counter.pulse <= 0) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	2b00      	cmp	r3, #0
 8001532:	dd04      	ble.n	800153e <motorStartMove+0x1a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <motorStartMove+0x1e>
		return MOTOR_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e025      	b.n	800158e <motorStartMove+0x6a>
	}

	if (sett->flags.reset) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <motorStartMove+0x32>
		return MOTOR_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e01b      	b.n	800158e <motorStartMove+0x6a>
	}

	if (sett->flags.stepPhase != LOW) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <motorStartMove+0x46>
		return MOTOR_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e011      	b.n	800158e <motorStartMove+0x6a>
	}

	sett->flags.sleep = 0;
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001570:	f36f 0382 	bfc	r3, #2, #1
 8001574:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 1;
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	Motor_PinMode(sett);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fe0b 	bl	80011a2 <Motor_PinMode>

	return MOTOR_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <prepareMotor>:

void prepareMotor(Motor_T *sett)
{
 8001596:	b590      	push	{r4, r7, lr}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	if(sett->device.positionStart <0)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da07      	bge.n	80015b8 <prepareMotor+0x22>
		sett->flags.direction = CWC;
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80015ae:	f36f 03c3 	bfc	r3, #3, #1
 80015b2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 80015b6:	e006      	b.n	80015c6 <prepareMotor+0x30>
	else
		sett->flags.direction = CW;
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	sett->flags.sleep = 0;
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80015cc:	f36f 0382 	bfc	r3, #2, #1
 80015d0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 1;
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38

	uint8_t iter = ceil(abs(sett->device.positionStart)/sett->device.stepSize);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bfb8      	it	lt
 80015ec:	425b      	neglt	r3, r3
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80015fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001600:	ee16 0a90 	vmov	r0, s13
 8001604:	f7fe ff4c 	bl	80004a0 <__aeabi_f2d>
 8001608:	4603      	mov	r3, r0
 800160a:	460c      	mov	r4, r1
 800160c:	ec44 3b10 	vmov	d0, r3, r4
 8001610:	f003 ff8a 	bl	8005528 <ceil>
 8001614:	ec54 3b10 	vmov	r3, r4, d0
 8001618:	4618      	mov	r0, r3
 800161a:	4621      	mov	r1, r4
 800161c:	f7ff fa5a 	bl	8000ad4 <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	72fb      	strb	r3, [r7, #11]
	Motor_PinMode(sett);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fdbc 	bl	80011a2 <Motor_PinMode>

	for(int i=0;i<iter;++i)
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e018      	b.n	8001662 <prepareMotor+0xcc>
	{
		HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN, GPIO_PIN_SET);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6998      	ldr	r0, [r3, #24]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	8b9b      	ldrh	r3, [r3, #28]
 8001638:	2201      	movs	r2, #1
 800163a:	4619      	mov	r1, r3
 800163c:	f001 f880 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f000 fd81 	bl	8002148 <HAL_Delay>
		HAL_GPIO_WritePin(sett->Pin_Steep.PORT, sett->Pin_Steep.PIN, GPIO_PIN_RESET);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6998      	ldr	r0, [r3, #24]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	8b9b      	ldrh	r3, [r3, #28]
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	f001 f875 	bl	8002740 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f000 fd76 	bl	8002148 <HAL_Delay>
	for(int i=0;i<iter;++i)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	429a      	cmp	r2, r3
 8001668:	dbe2      	blt.n	8001630 <prepareMotor+0x9a>
	}

	sett->flags.sleep = 1;
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.isOn = 0;
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800167e:	f36f 0300 	bfc	r3, #0, #1
 8001682:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	sett->flags.direction = (sett->flags.direction) ? CWC : CW;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	bf0c      	ite	eq
 8001696:	2301      	moveq	r3, #1
 8001698:	2300      	movne	r3, #0
 800169a:	b2d9      	uxtb	r1, r3
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80016a2:	f361 03c3 	bfi	r3, r1, #3, #1
 80016a6:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	Motor_PinMode(sett);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fd79 	bl	80011a2 <Motor_PinMode>
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd90      	pop	{r4, r7, pc}

080016b8 <UART_Confirm>:
#include <stdio.h>
#include <stdint.h>



void UART_Confirm(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	msg_size = 0;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <UART_Confirm+0x2c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	801a      	strh	r2, [r3, #0]
	msg_size = sprintf((char*) msg, "get");
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <UART_Confirm+0x30>)
 80016c4:	4a09      	ldr	r2, [pc, #36]	; (80016ec <UART_Confirm+0x34>)
 80016c6:	6810      	ldr	r0, [r2, #0]
 80016c8:	6018      	str	r0, [r3, #0]
 80016ca:	2303      	movs	r3, #3
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <UART_Confirm+0x2c>)
 80016d0:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart3, msg, msg_size, 10);
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <UART_Confirm+0x2c>)
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	230a      	movs	r3, #10
 80016d8:	4903      	ldr	r1, [pc, #12]	; (80016e8 <UART_Confirm+0x30>)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <UART_Confirm+0x38>)
 80016dc:	f002 ff10 	bl	8004500 <HAL_UART_Transmit>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000023a 	.word	0x2000023a
 80016e8:	200001d4 	.word	0x200001d4
 80016ec:	08005640 	.word	0x08005640
 80016f0:	200003d4 	.word	0x200003d4

080016f4 <UART_startmove>:

void UART_startmove(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	msg_size2 = 0;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <UART_startmove+0x30>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	801a      	strh	r2, [r3, #0]
	msg_size2 = sprintf((char*) msg_v2, "start");
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <UART_startmove+0x34>)
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <UART_startmove+0x38>)
 8001702:	6810      	ldr	r0, [r2, #0]
 8001704:	6018      	str	r0, [r3, #0]
 8001706:	8892      	ldrh	r2, [r2, #4]
 8001708:	809a      	strh	r2, [r3, #4]
 800170a:	2305      	movs	r3, #5
 800170c:	b29a      	uxth	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <UART_startmove+0x30>)
 8001710:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart3, msg_v2, msg_size2, 10);
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <UART_startmove+0x30>)
 8001714:	881a      	ldrh	r2, [r3, #0]
 8001716:	230a      	movs	r3, #10
 8001718:	4903      	ldr	r1, [pc, #12]	; (8001728 <UART_startmove+0x34>)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <UART_startmove+0x3c>)
 800171c:	f002 fef0 	bl	8004500 <HAL_UART_Transmit>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200001d0 	.word	0x200001d0
 8001728:	200001e8 	.word	0x200001e8
 800172c:	08005644 	.word	0x08005644
 8001730:	200003d4 	.word	0x200003d4

08001734 <UART_WriteData>:

void UART_WriteData(Motor_T *data, uint16_t *tab, Trigger_T *time) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	uint8_t i = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]
	for (int j = 0; j < MOTORS_NUM; j++) {
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	e029      	b.n	800179e <UART_WriteData+0x6a>
		while ((uint16_t) -1 != tab[i]) {
			write_data_to_FIFO(&((data+j)->fifo), tab[i], tab[++i]);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	225c      	movs	r2, #92	; 0x5c
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	4413      	add	r3, r2
 8001762:	8819      	ldrh	r1, [r3, #0]
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	3301      	adds	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	4413      	add	r3, r2
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	f7ff fa2c 	bl	8000bd2 <write_data_to_FIFO>
			i++;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	3301      	adds	r3, #1
 800177e:	75fb      	strb	r3, [r7, #23]
		while ((uint16_t) -1 != tab[i]) {
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	4413      	add	r3, r2
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178e:	4293      	cmp	r3, r2
 8001790:	d1db      	bne.n	800174a <UART_WriteData+0x16>
		}
		i++;
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	3301      	adds	r3, #1
 8001796:	75fb      	strb	r3, [r7, #23]
	for (int j = 0; j < MOTORS_NUM; j++) {
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	3301      	adds	r3, #1
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	dded      	ble.n	8001780 <UART_WriteData+0x4c>
	}
	time->device = tab[i++];
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	75fa      	strb	r2, [r7, #23]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	4413      	add	r3, r2
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	729a      	strb	r2, [r3, #10]
	time->period = tab[i];
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	4413      	add	r3, r2
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	725a      	strb	r2, [r3, #9]

	UART_Confirm();
 80017c8:	f7ff ff76 	bl	80016b8 <UART_Confirm>
}
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <DataReceive>:

DataReadEnum DataReceive(uint16_t *data) {
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	DataReadEnum retVal = data_unavailable;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < UARTpoint; ++i) {
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	e025      	b.n	8001832 <DataReceive+0x5e>
		if (data[i] == (uint16_t) -2) {
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d102      	bne.n	80017fe <DataReceive+0x2a>
			retVal = data_available;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e016      	b.n	800182c <DataReceive+0x58>
		} else if (data[i] == (uint16_t) -3) {
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800180c:	4293      	cmp	r3, r2
 800180e:	d102      	bne.n	8001816 <DataReceive+0x42>
			retVal = data_confirm;
 8001810:	2302      	movs	r3, #2
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e00a      	b.n	800182c <DataReceive+0x58>
		} else if (data[i] == (uint16_t) -4) {
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <DataReceive+0x58>
			retVal = data_stop;
 8001828:	2303      	movs	r3, #3
 800182a:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < UARTpoint; ++i) {
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3301      	adds	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b22      	cmp	r3, #34	; 0x22
 8001836:	ddd6      	ble.n	80017e6 <DataReceive+0x12>
		}
	}
	return retVal;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <device_choose>:
 *  Created on: Oct 21, 2020
 *      Author: rzesz
 */
#include "self_timer.h"

void device_choose(Trigger_T *trig) {
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	trig->Pin_Trigger.PORT =
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001854:	601a      	str	r2, [r3, #0]
			(0 == trig->device) ? CAMERA_T_GPIO_Port : MOBILE_T_GPIO_Port;
	trig->Pin_Trigger.PIN = (0 == trig->device) ? CAMERA_T_Pin : MOBILE_T_Pin;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7a9b      	ldrb	r3, [r3, #10]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <device_choose+0x1c>
 800185e:	2204      	movs	r2, #4
 8001860:	e000      	b.n	8001864 <device_choose+0x1e>
 8001862:	2220      	movs	r2, #32
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	809a      	strh	r2, [r3, #4]
	HAL_GPIO_WritePin(trig->Pin_Trigger.PORT,trig->Pin_Trigger.PIN, GPIO_PIN_RESET);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	889b      	ldrh	r3, [r3, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	f000 ff64 	bl	8002740 <HAL_GPIO_WritePin>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <calculate_intterupts>:

int calculate_intterupts(Trigger_T *trig) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	return (FREQ_T * trig->period);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7a5b      	ldrb	r3, [r3, #9]
 800188c:	461a      	mov	r2, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fb03 f302 	mul.w	r3, r3, r2
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <run_trigger>:

uint8_t run_trigger(Trigger_T *trig) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	uint32_t diff = trig->memTime-trig->changeTime;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	60fb      	str	r3, [r7, #12]
	--(trig->changeTime);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	1e5a      	subs	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
	if (trig->changeTime <= 0) {
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dc1a      	bgt.n	8001900 <run_trigger+0x5c>
		trig->isOn = 1;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	721a      	strb	r2, [r3, #8]
		--(trig->Time);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	615a      	str	r2, [r3, #20]
		trig->changeTime=trig->memTime;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(trig->Pin_Trigger.PORT,trig->Pin_Trigger.PIN, GPIO_PIN_SET);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	f000 ff27 	bl	8002740 <HAL_GPIO_WritePin>
		if(trig->Time<=0)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	dc02      	bgt.n	8001900 <run_trigger+0x5c>
			HAL_TIM_Base_Stop_IT(&htim7);
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <run_trigger+0x8c>)
 80018fc:	f002 faf8 	bl	8003ef0 <HAL_TIM_Base_Stop_IT>
	}
	if(diff==100 && trig->isOn)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d10e      	bne.n	8001924 <run_trigger+0x80>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7a1b      	ldrb	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00a      	beq.n	8001924 <run_trigger+0x80>
	{
		trig->isOn=0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	721a      	strb	r2, [r3, #8]
		HAL_GPIO_WritePin(trig->Pin_Trigger.PORT,trig->Pin_Trigger.PIN, GPIO_PIN_RESET);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	889b      	ldrh	r3, [r3, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	f000 ff0e 	bl	8002740 <HAL_GPIO_WritePin>
	}
	return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000394 	.word	0x20000394

08001934 <set_trigger>:
void set_trigger(Trigger_T *trig, Motor_T *sett) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	trig->Time = read_time(sett->fifo) / trig->period;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f982 	bl	8000c4c <read_time>
 8001948:	4602      	mov	r2, r0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7a5b      	ldrb	r3, [r3, #9]
 800194e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	615a      	str	r2, [r3, #20]
	trig->changeTime = calculate_intterupts(trig);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ff92 	bl	8001880 <calculate_intterupts>
 800195c:	4602      	mov	r2, r0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60da      	str	r2, [r3, #12]
	trig->memTime = trig->changeTime;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	611a      	str	r2, [r3, #16]
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <init_t>:

void init_t(Trigger_T *trig, Motor_T *sett) {
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
	device_choose(trig);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff62 	bl	8001846 <device_choose>
	set_trigger(trig, sett);
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffd5 	bl	8001934 <set_trigger>
	trig->isOn = 0;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	721a      	strb	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <poteg>:
#include <math.h>

static uint8_t stoppingPoint;
uint16_t time;

int poteg(int base, uint8_t pot) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
    if (pot == 0)
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <poteg+0x16>
        return 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e01d      	b.n	80019ea <poteg+0x52>
    else if (pot % 2)
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <poteg+0x3a>
        return base * poteg(base, pot - 1);
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	3b01      	subs	r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffe8 	bl	8001998 <poteg>
 80019c8:	4602      	mov	r2, r0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	fb03 f302 	mul.w	r3, r3, r2
 80019d0:	e00b      	b.n	80019ea <poteg+0x52>
    else {
        int temp = poteg(base, pot / 2);
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffdc 	bl	8001998 <poteg>
 80019e0:	60f8      	str	r0, [r7, #12]
        return temp * temp;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
    }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <set>:

MotorErr set(Motor_T *sett) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	MotorErr retVal = MOTOR_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t micro = sett->device.microstep;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a06:	75bb      	strb	r3, [r7, #22]
	if (sett->device.points_num == (uint8_t) -1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a0e:	2bff      	cmp	r3, #255	; 0xff
 8001a10:	d109      	bne.n	8001a26 <set+0x32>
		sett->device.points_num = get_amount_of_times(sett->fifo);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f87c 	bl	8000b14 <get_amount_of_times>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	stoppingPoint = sett->device.points_num;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <set+0xa4>)
 8001a2e:	701a      	strb	r2, [r3, #0]
	read_data(&(sett->fifo), &time, &len);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3358      	adds	r3, #88	; 0x58
 8001a34:	f107 020a 	add.w	r2, r7, #10
 8001a38:	4918      	ldr	r1, [pc, #96]	; (8001a9c <set+0xa8>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f886 	bl	8000b4c <read_data>
	if (!time) {
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <set+0xa8>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <set+0x58>
		return MOTOR_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e021      	b.n	8001a90 <set+0x9c>
	}
	//uint16_t length = round(len / sett->device.points_num);
	float stepSize = sett->device.stepSize;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	613b      	str	r3, [r7, #16]
	sett->counter.stepLeft = set_stepLeft(len, stepSize, micro);
 8001a52:	897b      	ldrh	r3, [r7, #10]
 8001a54:	7dba      	ldrb	r2, [r7, #22]
 8001a56:	4611      	mov	r1, r2
 8001a58:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f899 	bl	8001b94 <set_stepLeft>
 8001a62:	4602      	mov	r2, r0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
	//int (*fun)(uint16_t, int) = &set_stepLeft;
	int stepLeftx2 = sett->counter.stepLeft;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	60fb      	str	r3, [r7, #12]
	sett->counter.pulse = set_pulse(time, stepLeftx2);
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <set+0xa8>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f8cc 	bl	8001c12 <set_pulse>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sett->counter.changeTime = sett->counter.pulse;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	879a      	strh	r2, [r3, #60]	; 0x3c

	return retVal;
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200001a9 	.word	0x200001a9
 8001a9c:	20000352 	.word	0x20000352

08001aa0 <set_for_angle>:
MotorErr set_for_angle(Motor_T *sett) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	MotorErr retVal = MOTOR_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	75fb      	strb	r3, [r7, #23]
	uint8_t micro = sett->device.microstep;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ab2:	75bb      	strb	r3, [r7, #22]
	if (sett->device.points_num == (uint8_t) -1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d104      	bne.n	8001ac8 <set_for_angle+0x28>
		sett->device.points_num = stoppingPoint;
 8001abe:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <set_for_angle+0xec>)
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	read_data(&(sett->fifo), &(sett->device.positionStart), &(sett->device.positionEnd));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f103 0152 	add.w	r1, r3, #82	; 0x52
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3354      	adds	r3, #84	; 0x54
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f7ff f837 	bl	8000b4c <read_data>
	if (sett->device.positionStart != 0 && sett->counter.pulse == 0)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <set_for_angle+0x58>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <set_for_angle+0x58>
		prepareMotor(sett);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fd4f 	bl	8001596 <prepareMotor>
	if (time == 0)
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <set_for_angle+0xf0>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <set_for_angle+0x64>
		return MOTOR_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e03f      	b.n	8001b84 <set_for_angle+0xe4>
	uint16_t diff = abs(sett->device.positionEnd - sett->device.positionStart);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bfb8      	it	lt
 8001b18:	425b      	neglt	r3, r3
 8001b1a:	82bb      	strh	r3, [r7, #20]
	sett->flags.direction = (sett->device.positionEnd>sett->device.positionStart)? CW:CWC;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	bfcc      	ite	gt
 8001b2c:	2301      	movgt	r3, #1
 8001b2e:	2300      	movle	r3, #0
 8001b30:	b2d9      	uxtb	r1, r3
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001b38:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b3c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	float stepSize = sett->device.stepSize;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	613b      	str	r3, [r7, #16]
	sett->counter.stepLeft = set_stepLeft(diff, stepSize, micro);
 8001b46:	7dba      	ldrb	r2, [r7, #22]
 8001b48:	8abb      	ldrh	r3, [r7, #20]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f81f 	bl	8001b94 <set_stepLeft>
 8001b56:	4602      	mov	r2, r0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40
	int stepLeftx2 = sett->counter.stepLeft;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	60fb      	str	r3, [r7, #12]
	sett->counter.pulse = set_pulse(time, stepLeftx2);
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <set_for_angle+0xf0>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	68f9      	ldr	r1, [r7, #12]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f852 	bl	8001c12 <set_pulse>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	sett->counter.changeTime = sett->counter.pulse;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	879a      	strh	r2, [r3, #60]	; 0x3c

	return retVal;
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200001a9 	.word	0x200001a9
 8001b90:	20000352 	.word	0x20000352

08001b94 <set_stepLeft>:
int set_stepLeft(uint16_t len, float step, uint8_t micro) {
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	ed87 0a00 	vstr	s0, [r7]
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	80fb      	strh	r3, [r7, #6]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	717b      	strb	r3, [r7, #5]
	return (ceil((2 *10* len) / step)* poteg(2,micro));
 8001ba8:	88fa      	ldrh	r2, [r7, #6]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bba:	edd7 7a00 	vldr	s15, [r7]
 8001bbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bc2:	ee16 0a90 	vmov	r0, s13
 8001bc6:	f7fe fc6b 	bl	80004a0 <__aeabi_f2d>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	ec44 3b10 	vmov	d0, r3, r4
 8001bd2:	f003 fca9 	bl	8005528 <ceil>
 8001bd6:	ec56 5b10 	vmov	r5, r6, d0
 8001bda:	797b      	ldrb	r3, [r7, #5]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7ff feda 	bl	8001998 <poteg>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc48 	bl	800047c <__aeabi_i2d>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	4631      	mov	r1, r6
 8001bf8:	f7fe fcaa 	bl	8000550 <__aeabi_dmul>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	460c      	mov	r4, r1
 8001c00:	4618      	mov	r0, r3
 8001c02:	4621      	mov	r1, r4
 8001c04:	f7fe ff3e 	bl	8000a84 <__aeabi_d2iz>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c12 <set_pulse>:
uint16_t set_pulse(uint16_t time, int stepleft) {
 8001c12:	b5b0      	push	{r4, r5, r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	6039      	str	r1, [r7, #0]
 8001c1c:	80fb      	strh	r3, [r7, #6]
	return (ceil(TIM_FREQ * time) / stepleft);
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c24:	fb02 f303 	mul.w	r3, r2, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc27 	bl	800047c <__aeabi_i2d>
 8001c2e:	4604      	mov	r4, r0
 8001c30:	460d      	mov	r5, r1
 8001c32:	6838      	ldr	r0, [r7, #0]
 8001c34:	f7fe fc22 	bl	800047c <__aeabi_i2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fdb0 	bl	80007a4 <__aeabi_ddiv>
 8001c44:	4603      	mov	r3, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	f7fe ff42 	bl	8000ad4 <__aeabi_d2uiz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b29b      	uxth	r3, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bdb0      	pop	{r4, r5, r7, pc}

08001c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6193      	str	r3, [r2, #24]
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 fa06 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <USART3_IRQHandler+0x10>)
 8001d06:	f002 fd31 	bl	800476c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200003d4 	.word	0x200003d4

08001d14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <TIM6_DAC_IRQHandler+0x10>)
 8001d1a:	f002 f914 	bl	8003f46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000354 	.word	0x20000354

08001d28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <TIM7_IRQHandler+0x10>)
 8001d2e:	f002 f90a 	bl	8003f46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000394 	.word	0x20000394

08001d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <_sbrk+0x5c>)
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <_sbrk+0x60>)
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <_sbrk+0x64>)
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <_sbrk+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d207      	bcs.n	8001d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d6c:	f003 fad4 	bl	8005318 <__errno>
 8001d70:	4602      	mov	r2, r0
 8001d72:	230c      	movs	r3, #12
 8001d74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	e009      	b.n	8001d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <_sbrk+0x64>)
 8001d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20010000 	.word	0x20010000
 8001d9c:	00000400 	.word	0x00000400
 8001da0:	200001ac 	.word	0x200001ac
 8001da4:	20000460 	.word	0x20000460

08001da8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <SystemInit+0x28>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <SystemInit+0x28>)
 8001db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SystemInit+0x28>)
 8001dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_TIM6_Init+0x64>)
 8001de6:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <MX_TIM6_Init+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_TIM6_Init+0x64>)
 8001dec:	2247      	movs	r2, #71	; 0x47
 8001dee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_TIM6_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <MX_TIM6_Init+0x64>)
 8001df8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dfc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_TIM6_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <MX_TIM6_Init+0x64>)
 8001e06:	f002 f81d 	bl	8003e44 <HAL_TIM_Base_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e10:	f7ff f9c0 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_TIM6_Init+0x64>)
 8001e22:	f002 fa75 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e2c:	f7ff f9b2 	bl	8001194 <Error_Handler>
  }

}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000354 	.word	0x20000354
 8001e3c:	40001000 	.word	0x40001000

08001e40 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_TIM7_Init+0x64>)
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <MX_TIM7_Init+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MX_TIM7_Init+0x64>)
 8001e58:	2247      	movs	r2, #71	; 0x47
 8001e5a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_TIM7_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <MX_TIM7_Init+0x64>)
 8001e64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_TIM7_Init+0x64>)
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <MX_TIM7_Init+0x64>)
 8001e72:	f001 ffe7 	bl	8003e44 <HAL_TIM_Base_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e7c:	f7ff f98a 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_TIM7_Init+0x64>)
 8001e8e:	f002 fa3f 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e98:	f7ff f97c 	bl	8001194 <Error_Handler>
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000394 	.word	0x20000394
 8001ea8:	40001400 	.word	0x40001400

08001eac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <HAL_TIM_Base_MspInit+0x78>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d114      	bne.n	8001ee8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_TIM_Base_MspInit+0x7c>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_TIM_Base_MspInit+0x7c>)
 8001ec4:	f043 0310 	orr.w	r3, r3, #16
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_TIM_Base_MspInit+0x7c>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2036      	movs	r0, #54	; 0x36
 8001edc:	f000 fa31 	bl	8002342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ee0:	2036      	movs	r0, #54	; 0x36
 8001ee2:	f000 fa4a 	bl	800237a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001ee6:	e018      	b.n	8001f1a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_TIM_Base_MspInit+0x80>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d113      	bne.n	8001f1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_TIM_Base_MspInit+0x7c>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_TIM_Base_MspInit+0x7c>)
 8001ef8:	f043 0320 	orr.w	r3, r3, #32
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_TIM_Base_MspInit+0x7c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2037      	movs	r0, #55	; 0x37
 8001f10:	f000 fa17 	bl	8002342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f14:	2037      	movs	r0, #55	; 0x37
 8001f16:	f000 fa30 	bl	800237a <HAL_NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40001000 	.word	0x40001000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40001400 	.word	0x40001400

08001f30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f36:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <MX_USART3_UART_Init+0x5c>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f74:	f002 fa76 	bl	8004464 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f7e:	f7ff f909 	bl	8001194 <Error_Handler>
  }

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200003d4 	.word	0x200003d4
 8001f8c:	40004800 	.word	0x40004800

08001f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HAL_UART_MspInit+0x8c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d130      	bne.n	8002014 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_UART_MspInit+0x90>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <HAL_UART_MspInit+0x90>)
 8001fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_UART_MspInit+0x90>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_UART_MspInit+0x90>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_UART_MspInit+0x90>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd4:	6153      	str	r3, [r2, #20]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_UART_MspInit+0x90>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fe2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ff4:	2307      	movs	r3, #7
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4809      	ldr	r0, [pc, #36]	; (8002024 <HAL_UART_MspInit+0x94>)
 8002000:	f000 fa14 	bl	800242c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	2027      	movs	r0, #39	; 0x27
 800200a:	f000 f99a 	bl	8002342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800200e:	2027      	movs	r0, #39	; 0x27
 8002010:	f000 f9b3 	bl	800237a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002014:	bf00      	nop
 8002016:	3728      	adds	r7, #40	; 0x28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40004800 	.word	0x40004800
 8002020:	40021000 	.word	0x40021000
 8002024:	48000400 	.word	0x48000400

08002028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002060 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800202c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800202e:	e003      	b.n	8002038 <LoopCopyDataInit>

08002030 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002032:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002034:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002036:	3104      	adds	r1, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002038:	480b      	ldr	r0, [pc, #44]	; (8002068 <LoopForever+0xa>)
	ldr	r3, =_edata
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <LoopForever+0xe>)
	adds	r2, r0, r1
 800203c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800203e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002040:	d3f6      	bcc.n	8002030 <CopyDataInit>
	ldr	r2, =_sbss
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002044:	e002      	b.n	800204c <LoopFillZerobss>

08002046 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002046:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002048:	f842 3b04 	str.w	r3, [r2], #4

0800204c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <LoopForever+0x16>)
	cmp	r2, r3
 800204e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002050:	d3f9      	bcc.n	8002046 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002052:	f7ff fea9 	bl	8001da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002056:	f003 f965 	bl	8005324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800205a:	f7fe ffa3 	bl	8000fa4 <main>

0800205e <LoopForever>:

LoopForever:
    b LoopForever
 800205e:	e7fe      	b.n	800205e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002060:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002064:	0800568c 	.word	0x0800568c
	ldr	r0, =_sdata
 8002068:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800206c:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 8002070:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 8002074:	2000045c 	.word	0x2000045c

08002078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC1_2_IRQHandler>
	...

0800207c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_Init+0x28>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_Init+0x28>)
 8002086:	f043 0310 	orr.w	r3, r3, #16
 800208a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 f94d 	bl	800232c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	2000      	movs	r0, #0
 8002094:	f000 f808 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fde0 	bl	8001c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000

080020a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_InitTick+0x54>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f965 	bl	8002396 <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00e      	b.n	80020f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d80a      	bhi.n	80020f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f000 f92d 	bl	8002342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_InitTick+0x5c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	2000011c 	.word	0x2000011c
 8002100:	20000124 	.word	0x20000124
 8002104:	20000120 	.word	0x20000120

08002108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_IncTick+0x20>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x24>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_IncTick+0x24>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000124 	.word	0x20000124
 800212c:	20000454 	.word	0x20000454

08002130 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;  
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000454 	.word	0x20000454

08002148 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff ffee 	bl	8002130 <HAL_GetTick>
 8002154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d005      	beq.n	800216e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_Delay+0x40>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800216e:	bf00      	nop
 8002170:	f7ff ffde 	bl	8002130 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d8f7      	bhi.n	8002170 <HAL_Delay+0x28>
  {
  }
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000124 	.word	0x20000124

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4907      	ldr	r1, [pc, #28]	; (8002228 <__NVIC_EnableIRQ+0x38>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	; (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	; (800227c <__NVIC_SetPriority+0x50>)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	4313      	orrs	r3, r2
         );
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f8:	d301      	bcc.n	80022fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00f      	b.n	800231e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <SysTick_Config+0x40>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002306:	210f      	movs	r1, #15
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f7ff ff8e 	bl	800222c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <SysTick_Config+0x40>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <SysTick_Config+0x40>)
 8002318:	2207      	movs	r2, #7
 800231a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	e000e010 	.word	0xe000e010

0800232c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff29 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002354:	f7ff ff3e 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 8002358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	f7ff ff8e 	bl	8002280 <NVIC_EncodePriority>
 8002364:	4602      	mov	r2, r0
 8002366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff5d 	bl	800222c <__NVIC_SetPriority>
}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff31 	bl	80021f0 <__NVIC_EnableIRQ>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffa2 	bl	80022e8 <SysTick_Config>
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d005      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2204      	movs	r2, #4
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
 80023ce:	e027      	b.n	8002420 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 020e 	bic.w	r2, r2, #14
 80023de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
    } 
  }
  return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	e160      	b.n	80026fe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8152 	beq.w	80026f8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d00b      	beq.n	8002474 <HAL_GPIO_Init+0x48>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d007      	beq.n	8002474 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002468:	2b11      	cmp	r3, #17
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d130      	bne.n	80024d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024aa:	2201      	movs	r2, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 0201 	and.w	r2, r3, #1
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0xea>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b12      	cmp	r3, #18
 8002514:	d123      	bne.n	800255e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	220f      	movs	r2, #15
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	6939      	ldr	r1, [r7, #16]
 800255a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0203 	and.w	r2, r3, #3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80ac 	beq.w	80026f8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a0:	4b5e      	ldr	r3, [pc, #376]	; (800271c <HAL_GPIO_Init+0x2f0>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a5d      	ldr	r2, [pc, #372]	; (800271c <HAL_GPIO_Init+0x2f0>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6193      	str	r3, [r2, #24]
 80025ac:	4b5b      	ldr	r3, [pc, #364]	; (800271c <HAL_GPIO_Init+0x2f0>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025b8:	4a59      	ldr	r2, [pc, #356]	; (8002720 <HAL_GPIO_Init+0x2f4>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	220f      	movs	r2, #15
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025e2:	d025      	beq.n	8002630 <HAL_GPIO_Init+0x204>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a4f      	ldr	r2, [pc, #316]	; (8002724 <HAL_GPIO_Init+0x2f8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d01f      	beq.n	800262c <HAL_GPIO_Init+0x200>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a4e      	ldr	r2, [pc, #312]	; (8002728 <HAL_GPIO_Init+0x2fc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d019      	beq.n	8002628 <HAL_GPIO_Init+0x1fc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a4d      	ldr	r2, [pc, #308]	; (800272c <HAL_GPIO_Init+0x300>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <HAL_GPIO_Init+0x1f8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a4c      	ldr	r2, [pc, #304]	; (8002730 <HAL_GPIO_Init+0x304>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00d      	beq.n	8002620 <HAL_GPIO_Init+0x1f4>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a4b      	ldr	r2, [pc, #300]	; (8002734 <HAL_GPIO_Init+0x308>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_Init+0x1f0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <HAL_GPIO_Init+0x30c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_GPIO_Init+0x1ec>
 8002614:	2306      	movs	r3, #6
 8002616:	e00c      	b.n	8002632 <HAL_GPIO_Init+0x206>
 8002618:	2307      	movs	r3, #7
 800261a:	e00a      	b.n	8002632 <HAL_GPIO_Init+0x206>
 800261c:	2305      	movs	r3, #5
 800261e:	e008      	b.n	8002632 <HAL_GPIO_Init+0x206>
 8002620:	2304      	movs	r3, #4
 8002622:	e006      	b.n	8002632 <HAL_GPIO_Init+0x206>
 8002624:	2303      	movs	r3, #3
 8002626:	e004      	b.n	8002632 <HAL_GPIO_Init+0x206>
 8002628:	2302      	movs	r3, #2
 800262a:	e002      	b.n	8002632 <HAL_GPIO_Init+0x206>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_GPIO_Init+0x206>
 8002630:	2300      	movs	r3, #0
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	f002 0203 	and.w	r2, r2, #3
 8002638:	0092      	lsls	r2, r2, #2
 800263a:	4093      	lsls	r3, r2
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002642:	4937      	ldr	r1, [pc, #220]	; (8002720 <HAL_GPIO_Init+0x2f4>)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_GPIO_Init+0x310>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	43db      	mvns	r3, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_GPIO_Init+0x310>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <HAL_GPIO_Init+0x310>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800269e:	4a27      	ldr	r2, [pc, #156]	; (800273c <HAL_GPIO_Init+0x310>)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_GPIO_Init+0x310>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_GPIO_Init+0x310>)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_GPIO_Init+0x310>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026f2:	4a12      	ldr	r2, [pc, #72]	; (800273c <HAL_GPIO_Init+0x310>)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	f47f ae97 	bne.w	800243c <HAL_GPIO_Init+0x10>
  }
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	40010000 	.word	0x40010000
 8002724:	48000400 	.word	0x48000400
 8002728:	48000800 	.word	0x48000800
 800272c:	48000c00 	.word	0x48000c00
 8002730:	48001000 	.word	0x48001000
 8002734:	48001400 	.word	0x48001400
 8002738:	48001800 	.word	0x48001800
 800273c:	40010400 	.word	0x40010400

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800275c:	e002      	b.n	8002764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002776:	af00      	add	r7, sp, #0
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f000 bf01 	b.w	800358c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8160 	beq.w	8002a5a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800279a:	4bae      	ldr	r3, [pc, #696]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d00c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027a6:	4bab      	ldr	r3, [pc, #684]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d159      	bne.n	8002866 <HAL_RCC_OscConfig+0xf6>
 80027b2:	4ba8      	ldr	r3, [pc, #672]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80027ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027be:	d152      	bne.n	8002866 <HAL_RCC_OscConfig+0xf6>
 80027c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_OscConfig+0x82>
 80027ec:	4b99      	ldr	r3, [pc, #612]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0xae>
 80027f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800280e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800281a:	4b8e      	ldr	r3, [pc, #568]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002822:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002826:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800282a:	fa92 f2a2 	rbit	r2, r2
 800282e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002832:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002836:	fab2 f282 	clz	r2, r2
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f042 0220 	orr.w	r2, r2, #32
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f002 021f 	and.w	r2, r2, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8102 	beq.w	8002a58 <HAL_RCC_OscConfig+0x2e8>
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 80fc 	bne.w	8002a58 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f000 be93 	b.w	800358c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x110>
 8002872:	4b78      	ldr	r3, [pc, #480]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a77      	ldr	r2, [pc, #476]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e030      	b.n	80028e2 <HAL_RCC_OscConfig+0x172>
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x134>
 800288a:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a71      	ldr	r2, [pc, #452]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 8002890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6e      	ldr	r2, [pc, #440]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 800289c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01e      	b.n	80028e2 <HAL_RCC_OscConfig+0x172>
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ae:	d10c      	bne.n	80028ca <HAL_RCC_OscConfig+0x15a>
 80028b0:	4b68      	ldr	r3, [pc, #416]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a67      	ldr	r2, [pc, #412]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80028b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a64      	ldr	r2, [pc, #400]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80028c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	e00b      	b.n	80028e2 <HAL_RCC_OscConfig+0x172>
 80028ca:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a61      	ldr	r2, [pc, #388]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80028d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b5f      	ldr	r3, [pc, #380]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a5e      	ldr	r2, [pc, #376]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80028dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d059      	beq.n	80029a0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff fc20 	bl	8002130 <HAL_GetTick>
 80028f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f6:	f7ff fc1b 	bl	8002130 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d902      	bls.n	800290c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	f000 be40 	b.w	800358c <HAL_RCC_OscConfig+0xe1c>
 800290c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002910:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002920:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d102      	bne.n	800293e <HAL_RCC_OscConfig+0x1ce>
 8002938:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x1fa>
 800293e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002942:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002956:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800295a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800296e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002972:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002976:	fa92 f2a2 	rbit	r2, r2
 800297a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800297e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002982:	fab2 f282 	clz	r2, r2
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f042 0220 	orr.w	r2, r2, #32
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f002 021f 	and.w	r2, r2, #31
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ab      	beq.n	80028f6 <HAL_RCC_OscConfig+0x186>
 800299e:	e05c      	b.n	8002a5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff fbc6 	bl	8002130 <HAL_GetTick>
 80029a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029aa:	f7ff fbc1 	bl	8002130 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d902      	bls.n	80029c0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f000 bde6 	b.w	800358c <HAL_RCC_OscConfig+0xe1c>
 80029c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80029d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_RCC_OscConfig+0x282>
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x2ae>
 80029f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_RCC_OscConfig+0x2e4>)
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a22:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002a26:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a2a:	fa92 f2a2 	rbit	r2, r2
 8002a2e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002a32:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f042 0220 	orr.w	r2, r2, #32
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f002 021f 	and.w	r2, r2, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ab      	bne.n	80029aa <HAL_RCC_OscConfig+0x23a>
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_OscConfig+0x2ea>
 8002a54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8170 	beq.w	8002d4a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a6a:	4bd0      	ldr	r3, [pc, #832]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a76:	4bcd      	ldr	r3, [pc, #820]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d16d      	bne.n	8002b5e <HAL_RCC_OscConfig+0x3ee>
 8002a82:	4bca      	ldr	r3, [pc, #808]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8e:	d166      	bne.n	8002b5e <HAL_RCC_OscConfig+0x3ee>
 8002a90:	2302      	movs	r3, #2
 8002a92:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002aa2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x350>
 8002aba:	4bbc      	ldr	r3, [pc, #752]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	e013      	b.n	8002ae8 <HAL_RCC_OscConfig+0x378>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ad8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ae4:	4bb1      	ldr	r3, [pc, #708]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002aee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002af2:	fa92 f2a2 	rbit	r2, r2
 8002af6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002afa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002afe:	fab2 f282 	clz	r2, r2
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	f042 0220 	orr.w	r2, r2, #32
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f002 021f 	and.w	r2, r2, #31
 8002b0e:	2101      	movs	r1, #1
 8002b10:	fa01 f202 	lsl.w	r2, r1, r2
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <HAL_RCC_OscConfig+0x3ba>
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d002      	beq.n	8002b2a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f000 bd31 	b.w	800358c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4ba0      	ldr	r3, [pc, #640]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	21f8      	movs	r1, #248	; 0xf8
 8002b3a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002b42:	fa91 f1a1 	rbit	r1, r1
 8002b46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002b4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b4e:	fab1 f181 	clz	r1, r1
 8002b52:	b2c9      	uxtb	r1, r1
 8002b54:	408b      	lsls	r3, r1
 8002b56:	4995      	ldr	r1, [pc, #596]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5c:	e0f5      	b.n	8002d4a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8085 	beq.w	8002c74 <HAL_RCC_OscConfig+0x504>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002b7c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	461a      	mov	r2, r3
 8002b92:	2301      	movs	r3, #1
 8002b94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7ff facb 	bl	8002130 <HAL_GetTick>
 8002b9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7ff fac6 	bl	8002130 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d902      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	f000 bceb 	b.w	800358c <HAL_RCC_OscConfig+0xe1c>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002bc8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_RCC_OscConfig+0x476>
 8002be0:	4b72      	ldr	r3, [pc, #456]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	e013      	b.n	8002c0e <HAL_RCC_OscConfig+0x49e>
 8002be6:	2302      	movs	r3, #2
 8002be8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bfe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c0a:	4b68      	ldr	r3, [pc, #416]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c14:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c18:	fa92 f2a2 	rbit	r2, r2
 8002c1c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002c20:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c24:	fab2 f282 	clz	r2, r2
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f042 0220 	orr.w	r2, r2, #32
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f002 021f 	and.w	r2, r2, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0af      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c40:	4b5a      	ldr	r3, [pc, #360]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	21f8      	movs	r1, #248	; 0xf8
 8002c50:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002c58:	fa91 f1a1 	rbit	r1, r1
 8002c5c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002c60:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c64:	fab1 f181 	clz	r1, r1
 8002c68:	b2c9      	uxtb	r1, r1
 8002c6a:	408b      	lsls	r3, r1
 8002c6c:	494f      	ldr	r1, [pc, #316]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
 8002c72:	e06a      	b.n	8002d4a <HAL_RCC_OscConfig+0x5da>
 8002c74:	2301      	movs	r3, #1
 8002c76:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002c86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7ff fa46 	bl	8002130 <HAL_GetTick>
 8002ca4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002caa:	f7ff fa41 	bl	8002130 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d902      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	f000 bc66 	b.w	800358c <HAL_RCC_OscConfig+0xe1c>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002cd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x580>
 8002cea:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	e013      	b.n	8002d18 <HAL_RCC_OscConfig+0x5a8>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002d02:	2302      	movs	r3, #2
 8002d04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_RCC_OscConfig+0x63c>)
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002d22:	fa92 f2a2 	rbit	r2, r2
 8002d26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002d2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d2e:	fab2 f282 	clz	r2, r2
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	f042 0220 	orr.w	r2, r2, #32
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f002 021f 	and.w	r2, r2, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f202 	lsl.w	r2, r1, r2
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1af      	bne.n	8002caa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80da 	beq.w	8002f0e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d069      	beq.n	8002e38 <HAL_RCC_OscConfig+0x6c8>
 8002d64:	2301      	movs	r3, #1
 8002d66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002d76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x640>)
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff f9cf 	bl	8002130 <HAL_GetTick>
 8002d92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e00d      	b.n	8002db4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d98:	f7ff f9ca 	bl	8002130 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d905      	bls.n	8002db4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e3ef      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
 8002dac:	40021000 	.word	0x40021000
 8002db0:	10908120 	.word	0x10908120
 8002db4:	2302      	movs	r3, #2
 8002db6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dbe:	fa93 f2a3 	rbit	r2, r3
 8002dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002dcc:	2202      	movs	r2, #2
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002de4:	2202      	movs	r2, #2
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002df6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df8:	4ba4      	ldr	r3, [pc, #656]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e00:	2102      	movs	r1, #2
 8002e02:	6019      	str	r1, [r3, #0]
 8002e04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f1a3 	rbit	r1, r3
 8002e0e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e12:	6019      	str	r1, [r3, #0]
  return result;
 8002e14:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0b0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x628>
 8002e36:	e06a      	b.n	8002f0e <HAL_RCC_OscConfig+0x79e>
 8002e38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e4e:	601a      	str	r2, [r3, #0]
  return result;
 8002e50:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b8c      	ldr	r3, [pc, #560]	; (8003090 <HAL_RCC_OscConfig+0x920>)
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	461a      	mov	r2, r3
 8002e66:	2300      	movs	r3, #0
 8002e68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7ff f961 	bl	8002130 <HAL_GetTick>
 8002e6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e72:	e009      	b.n	8002e88 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e74:	f7ff f95c 	bl	8002130 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e381      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
 8002e88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fa93 f2a3 	rbit	r2, r3
 8002e9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	fa93 f2a3 	rbit	r2, r3
 8002eb2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	fa93 f2a3 	rbit	r2, r3
 8002eca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ece:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	4b6e      	ldr	r3, [pc, #440]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ed4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ed8:	2102      	movs	r1, #2
 8002eda:	6019      	str	r1, [r3, #0]
 8002edc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	fa93 f1a3 	rbit	r1, r3
 8002ee6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002eea:	6019      	str	r1, [r3, #0]
  return result;
 8002eec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1b2      	bne.n	8002e74 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8157 	beq.w	80031cc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d112      	bne.n	8002f56 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b56      	ldr	r3, [pc, #344]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a55      	ldr	r2, [pc, #340]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	61d3      	str	r3, [r2, #28]
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	f107 030c 	add.w	r3, r7, #12
 8002f4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <HAL_RCC_OscConfig+0x924>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11a      	bne.n	8002f98 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_OscConfig+0x924>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a4b      	ldr	r2, [pc, #300]	; (8003094 <HAL_RCC_OscConfig+0x924>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7ff f8df 	bl	8002130 <HAL_GetTick>
 8002f72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	e009      	b.n	8002f8c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7ff f8da 	bl	8002130 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b64      	cmp	r3, #100	; 0x64
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e2ff      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x924>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x840>
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a39      	ldr	r2, [pc, #228]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	e02f      	b.n	8003010 <HAL_RCC_OscConfig+0x8a0>
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x864>
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a33      	ldr	r2, [pc, #204]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6213      	str	r3, [r2, #32]
 8002fc6:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a30      	ldr	r2, [pc, #192]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	e01d      	b.n	8003010 <HAL_RCC_OscConfig+0x8a0>
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x888>
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6213      	str	r3, [r2, #32]
 8002fea:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a27      	ldr	r2, [pc, #156]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6213      	str	r3, [r2, #32]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0x8a0>
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a20      	ldr	r2, [pc, #128]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 800300a:	f023 0304 	bic.w	r3, r3, #4
 800300e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d06a      	beq.n	80030f0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7ff f889 	bl	8002130 <HAL_GetTick>
 800301e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7ff f884 	bl	8002130 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e2a7      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
 800303c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003040:	2202      	movs	r2, #2
 8003042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003058:	2202      	movs	r2, #2
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fa93 f2a3 	rbit	r2, r3
 8003066:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800306a:	601a      	str	r2, [r3, #0]
  return result;
 800306c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003070:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d108      	bne.n	8003098 <HAL_RCC_OscConfig+0x928>
 8003086:	4b01      	ldr	r3, [pc, #4]	; (800308c <HAL_RCC_OscConfig+0x91c>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	e013      	b.n	80030b4 <HAL_RCC_OscConfig+0x944>
 800308c:	40021000 	.word	0x40021000
 8003090:	10908120 	.word	0x10908120
 8003094:	40007000 	.word	0x40007000
 8003098:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800309c:	2202      	movs	r2, #2
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	4bc0      	ldr	r3, [pc, #768]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80030b8:	2102      	movs	r1, #2
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	fa92 f1a2 	rbit	r1, r2
 80030c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030ca:	6011      	str	r1, [r2, #0]
  return result;
 80030cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	fab2 f282 	clz	r2, r2
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f002 021f 	and.w	r2, r2, #31
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f202 	lsl.w	r2, r1, r2
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d09a      	beq.n	8003024 <HAL_RCC_OscConfig+0x8b4>
 80030ee:	e063      	b.n	80031b8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f0:	f7ff f81e 	bl	8002130 <HAL_GetTick>
 80030f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	e00b      	b.n	8003112 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7ff f819 	bl	8002130 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e23c      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
 8003112:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003116:	2202      	movs	r2, #2
 8003118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800312e:	2202      	movs	r2, #2
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	fa93 f2a3 	rbit	r2, r3
 800313c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003140:	601a      	str	r2, [r3, #0]
  return result;
 8003142:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003146:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d102      	bne.n	8003162 <HAL_RCC_OscConfig+0x9f2>
 800315c:	4b95      	ldr	r3, [pc, #596]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	e00d      	b.n	800317e <HAL_RCC_OscConfig+0xa0e>
 8003162:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003166:	2202      	movs	r2, #2
 8003168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	fa93 f2a3 	rbit	r2, r3
 8003174:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003182:	2102      	movs	r1, #2
 8003184:	6011      	str	r1, [r2, #0]
 8003186:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	fa92 f1a2 	rbit	r1, r2
 8003190:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003194:	6011      	str	r1, [r2, #0]
  return result;
 8003196:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	fab2 f282 	clz	r2, r2
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f002 021f 	and.w	r2, r2, #31
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f202 	lsl.w	r2, r1, r2
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1a0      	bne.n	80030fa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031b8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d105      	bne.n	80031cc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c0:	4b7c      	ldr	r3, [pc, #496]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	4a7b      	ldr	r2, [pc, #492]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 80031c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 81d9 	beq.w	800358a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d8:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	f000 81a6 	beq.w	8003532 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	f040 811e 	bne.w	800342e <HAL_RCC_OscConfig+0xcbe>
 80031f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80031f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800320a:	601a      	str	r2, [r3, #0]
  return result;
 800320c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003210:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800321c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	461a      	mov	r2, r3
 8003224:	2300      	movs	r3, #0
 8003226:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe ff82 	bl	8002130 <HAL_GetTick>
 800322c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003230:	e009      	b.n	8003246 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe ff7d 	bl	8002130 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e1a2      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
 8003246:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800324a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800324e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	fa93 f2a3 	rbit	r2, r3
 800325a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800325e:	601a      	str	r2, [r3, #0]
  return result;
 8003260:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003264:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d102      	bne.n	8003280 <HAL_RCC_OscConfig+0xb10>
 800327a:	4b4e      	ldr	r3, [pc, #312]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	e01b      	b.n	80032b8 <HAL_RCC_OscConfig+0xb48>
 8003280:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800329e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	fa93 f2a3 	rbit	r2, r3
 80032ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80032bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032c0:	6011      	str	r1, [r2, #0]
 80032c2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	fa92 f1a2 	rbit	r1, r2
 80032cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032d0:	6011      	str	r1, [r2, #0]
  return result;
 80032d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	fab2 f282 	clz	r2, r2
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f002 021f 	and.w	r2, r2, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d19e      	bne.n	8003232 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f4:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	f023 020f 	bic.w	r2, r3, #15
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	492c      	ldr	r1, [pc, #176]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 8003304:	4313      	orrs	r3, r2
 8003306:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003308:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a19      	ldr	r1, [r3, #32]
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	430b      	orrs	r3, r1
 800331e:	4925      	ldr	r1, [pc, #148]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
 8003324:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800332c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800333c:	601a      	str	r2, [r3, #0]
  return result;
 800333e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003342:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800334e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	461a      	mov	r2, r3
 8003356:	2301      	movs	r3, #1
 8003358:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe fee9 	bl	8002130 <HAL_GetTick>
 800335e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003362:	e009      	b.n	8003378 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe fee4 	bl	8002130 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e109      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
 8003378:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800337c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003390:	601a      	str	r2, [r3, #0]
  return result;
 8003392:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003396:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_OscConfig+0xc48>
 80033ac:	4b01      	ldr	r3, [pc, #4]	; (80033b4 <HAL_RCC_OscConfig+0xc44>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	e01e      	b.n	80033f0 <HAL_RCC_OscConfig+0xc80>
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	fa93 f2a3 	rbit	r2, r3
 80033cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	fa93 f2a3 	rbit	r2, r3
 80033e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <HAL_RCC_OscConfig+0xe28>)
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033f8:	6011      	str	r1, [r2, #0]
 80033fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	fa92 f1a2 	rbit	r1, r2
 8003404:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003408:	6011      	str	r1, [r2, #0]
  return result;
 800340a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	fab2 f282 	clz	r2, r2
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	f042 0220 	orr.w	r2, r2, #32
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	f002 021f 	and.w	r2, r2, #31
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f202 	lsl.w	r2, r1, r2
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d09b      	beq.n	8003364 <HAL_RCC_OscConfig+0xbf4>
 800342c:	e0ad      	b.n	800358a <HAL_RCC_OscConfig+0xe1a>
 800342e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003432:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003446:	601a      	str	r2, [r3, #0]
  return result;
 8003448:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800344c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003458:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	461a      	mov	r2, r3
 8003460:	2300      	movs	r3, #0
 8003462:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe fe64 	bl	8002130 <HAL_GetTick>
 8003468:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346c:	e009      	b.n	8003482 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fe5f 	bl	8002130 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e084      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
 8003482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800348a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800349a:	601a      	str	r2, [r3, #0]
  return result;
 800349c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d102      	bne.n	80034bc <HAL_RCC_OscConfig+0xd4c>
 80034b6:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_RCC_OscConfig+0xe28>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	e01b      	b.n	80034f4 <HAL_RCC_OscConfig+0xd84>
 80034bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f2a3 	rbit	r2, r3
 80034d0:	f107 0320 	add.w	r3, r7, #32
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	f107 031c 	add.w	r3, r7, #28
 80034da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f107 0318 	add.w	r3, r7, #24
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_OscConfig+0xe28>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f107 0214 	add.w	r2, r7, #20
 80034f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034fc:	6011      	str	r1, [r2, #0]
 80034fe:	f107 0214 	add.w	r2, r7, #20
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	fa92 f1a2 	rbit	r1, r2
 8003508:	f107 0210 	add.w	r2, r7, #16
 800350c:	6011      	str	r1, [r2, #0]
  return result;
 800350e:	f107 0210 	add.w	r2, r7, #16
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	fab2 f282 	clz	r2, r2
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	f042 0220 	orr.w	r2, r2, #32
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	f002 021f 	and.w	r2, r2, #31
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f202 	lsl.w	r2, r1, r2
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d19e      	bne.n	800346e <HAL_RCC_OscConfig+0xcfe>
 8003530:	e02b      	b.n	800358a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e025      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003540:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_RCC_OscConfig+0xe28>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003548:	4b13      	ldr	r3, [pc, #76]	; (8003598 <HAL_RCC_OscConfig+0xe28>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003550:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003554:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	429a      	cmp	r2, r3
 8003560:	d111      	bne.n	8003586 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003562:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003566:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003570:	429a      	cmp	r2, r3
 8003572:	d108      	bne.n	8003586 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003578:	f003 020f 	and.w	r2, r3, #15
 800357c:	1d3b      	adds	r3, r7, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003582:	429a      	cmp	r2, r3
 8003584:	d001      	beq.n	800358a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000

0800359c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b09e      	sub	sp, #120	; 0x78
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e162      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b90      	ldr	r3, [pc, #576]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	498b      	ldr	r1, [pc, #556]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b89      	ldr	r3, [pc, #548]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e14a      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b82      	ldr	r3, [pc, #520]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	497f      	ldr	r1, [pc, #508]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80dc 	beq.w	80037c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d13c      	bne.n	8003692 <HAL_RCC_ClockConfig+0xf6>
 8003618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800361c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d102      	bne.n	8003642 <HAL_RCC_ClockConfig+0xa6>
 800363c:	4b6f      	ldr	r3, [pc, #444]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e00f      	b.n	8003662 <HAL_RCC_ClockConfig+0xc6>
 8003642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003646:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	667b      	str	r3, [r7, #100]	; 0x64
 8003650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003654:	663b      	str	r3, [r7, #96]	; 0x60
 8003656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800365e:	4b67      	ldr	r3, [pc, #412]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003666:	65ba      	str	r2, [r7, #88]	; 0x58
 8003668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800366a:	fa92 f2a2 	rbit	r2, r2
 800366e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003672:	fab2 f282 	clz	r2, r2
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	f042 0220 	orr.w	r2, r2, #32
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	f002 021f 	and.w	r2, r2, #31
 8003682:	2101      	movs	r1, #1
 8003684:	fa01 f202 	lsl.w	r2, r1, r2
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d17b      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0f3      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d13c      	bne.n	8003714 <HAL_RCC_ClockConfig+0x178>
 800369a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800369e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d102      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x128>
 80036be:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	e00f      	b.n	80036e4 <HAL_RCC_ClockConfig+0x148>
 80036c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
 80036d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
 80036d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e0:	4b46      	ldr	r3, [pc, #280]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80036ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ec:	fa92 f2a2 	rbit	r2, r2
 80036f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f042 0220 	orr.w	r2, r2, #32
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f002 021f 	and.w	r2, r2, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d13a      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0b2      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
 8003714:	2302      	movs	r3, #2
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_RCC_ClockConfig+0x1a0>
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e00d      	b.n	8003758 <HAL_RCC_ClockConfig+0x1bc>
 800373c:	2302      	movs	r3, #2
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	2302      	movs	r3, #2
 800374a:	623b      	str	r3, [r7, #32]
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	4b29      	ldr	r3, [pc, #164]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	2202      	movs	r2, #2
 800375a:	61ba      	str	r2, [r7, #24]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	fa92 f2a2 	rbit	r2, r2
 8003762:	617a      	str	r2, [r7, #20]
  return result;
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	fab2 f282 	clz	r2, r2
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	f042 0220 	orr.w	r2, r2, #32
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	f002 021f 	and.w	r2, r2, #31
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f202 	lsl.w	r2, r1, r2
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e079      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	491a      	ldr	r1, [pc, #104]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003798:	f7fe fcca 	bl	8002130 <HAL_GetTick>
 800379c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fe fcc6 	bl	8002130 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e061      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 020c 	and.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1eb      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d214      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	4906      	ldr	r1, [pc, #24]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e040      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	491a      	ldr	r1, [pc, #104]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4912      	ldr	r1, [pc, #72]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800383e:	f000 f829 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003842:	4601      	mov	r1, r0
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384c:	22f0      	movs	r2, #240	; 0xf0
 800384e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	fa92 f2a2 	rbit	r2, r2
 8003856:	60fa      	str	r2, [r7, #12]
  return result;
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	fab2 f282 	clz	r2, r2
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	40d3      	lsrs	r3, r2
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <HAL_RCC_ClockConfig+0x2ec>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	fa21 f303 	lsr.w	r3, r1, r3
 800386a:	4a08      	ldr	r2, [pc, #32]	; (800388c <HAL_RCC_ClockConfig+0x2f0>)
 800386c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_RCC_ClockConfig+0x2f4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fc18 	bl	80020a8 <HAL_InitTick>
  
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3778      	adds	r7, #120	; 0x78
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	0800564c 	.word	0x0800564c
 800388c:	2000011c 	.word	0x2000011c
 8003890:	20000120 	.word	0x20000120

08003894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b08b      	sub	sp, #44	; 0x2c
 8003898:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x30>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x36>
 80038c2:	e03f      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c4:	4b25      	ldr	r3, [pc, #148]	; (800395c <HAL_RCC_GetSysClockFreq+0xc8>)
 80038c6:	623b      	str	r3, [r7, #32]
      break;
 80038c8:	e03f      	b.n	800394a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	fa92 f2a2 	rbit	r2, r2
 80038dc:	607a      	str	r2, [r7, #4]
  return result;
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	fab2 f282 	clz	r2, r2
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	40d3      	lsrs	r3, r2
 80038e8:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	220f      	movs	r2, #15
 80038f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	fa92 f2a2 	rbit	r2, r2
 8003900:	60fa      	str	r2, [r7, #12]
  return result;
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	fab2 f282 	clz	r2, r2
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	40d3      	lsrs	r3, r2
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_RCC_GetSysClockFreq+0xd0>)
 800390e:	5cd3      	ldrb	r3, [r2, r3]
 8003910:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800391c:	4a0f      	ldr	r2, [pc, #60]	; (800395c <HAL_RCC_GetSysClockFreq+0xc8>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	fbb2 f2f3 	udiv	r2, r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
 800392c:	e007      	b.n	800393e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800392e:	4a0b      	ldr	r2, [pc, #44]	; (800395c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fbb2 f2f3 	udiv	r2, r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	fb02 f303 	mul.w	r3, r2, r3
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	623b      	str	r3, [r7, #32]
      break;
 8003942:	e002      	b.n	800394a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003946:	623b      	str	r3, [r7, #32]
      break;
 8003948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800394a:	6a3b      	ldr	r3, [r7, #32]
}
 800394c:	4618      	mov	r0, r3
 800394e:	372c      	adds	r7, #44	; 0x2c
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	40021000 	.word	0x40021000
 800395c:	007a1200 	.word	0x007a1200
 8003960:	08005664 	.word	0x08005664
 8003964:	08005674 	.word	0x08005674

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_RCC_GetHCLKFreq+0x14>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	2000011c 	.word	0x2000011c

08003980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003986:	f7ff ffef 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 800398a:	4601      	mov	r1, r0
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003994:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003998:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	fa92 f2a2 	rbit	r2, r2
 80039a0:	603a      	str	r2, [r7, #0]
  return result;
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	fab2 f282 	clz	r2, r2
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	40d3      	lsrs	r3, r2
 80039ac:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039ae:	5cd3      	ldrb	r3, [r2, r3]
 80039b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	0800565c 	.word	0x0800565c

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039ca:	f7ff ffcd 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039ce:	4601      	mov	r1, r0
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	fa92 f2a2 	rbit	r2, r2
 80039e4:	603a      	str	r2, [r7, #0]
  return result;
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	fab2 f282 	clz	r2, r2
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	40d3      	lsrs	r3, r2
 80039f0:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039f2:	5cd3      	ldrb	r3, [r2, r3]
 80039f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	0800565c 	.word	0x0800565c

08003a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b092      	sub	sp, #72	; 0x48
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80d7 	beq.w	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2c:	4b4e      	ldr	r3, [pc, #312]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10e      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a38:	4b4b      	ldr	r3, [pc, #300]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	4a4a      	ldr	r2, [pc, #296]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a42:	61d3      	str	r3, [r2, #28]
 8003a44:	4b48      	ldr	r3, [pc, #288]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a56:	4b45      	ldr	r3, [pc, #276]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d118      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a62:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a41      	ldr	r2, [pc, #260]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6e:	f7fe fb5f 	bl	8002130 <HAL_GetTick>
 8003a72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	e008      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a76:	f7fe fb5b 	bl	8002130 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b64      	cmp	r3, #100	; 0x64
 8003a82:	d901      	bls.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1d6      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	4b38      	ldr	r3, [pc, #224]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8084 	beq.w	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d07c      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	461a      	mov	r2, r3
 8003ade:	2301      	movs	r3, #1
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	461a      	mov	r2, r3
 8003b02:	2300      	movs	r3, #0
 8003b04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b06:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d04b      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fe fb0b 	bl	8002130 <HAL_GetTick>
 8003b1a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fe fb07 	bl	8002130 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e180      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b34:	2302      	movs	r3, #2
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	2302      	movs	r3, #2
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	61fb      	str	r3, [r7, #28]
  return result;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d108      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b62:	4b01      	ldr	r3, [pc, #4]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	e00d      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40007000 	.word	0x40007000
 8003b70:	10908100 	.word	0x10908100
 8003b74:	2302      	movs	r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	4ba0      	ldr	r3, [pc, #640]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	2202      	movs	r2, #2
 8003b86:	613a      	str	r2, [r7, #16]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	fa92 f2a2 	rbit	r2, r2
 8003b8e:	60fa      	str	r2, [r7, #12]
  return result;
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	fab2 f282 	clz	r2, r2
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f002 021f 	and.w	r2, r2, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0b7      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bae:	4b95      	ldr	r3, [pc, #596]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4992      	ldr	r1, [pc, #584]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b8e      	ldr	r3, [pc, #568]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4a8d      	ldr	r2, [pc, #564]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be0:	4b88      	ldr	r3, [pc, #544]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	f023 0203 	bic.w	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4985      	ldr	r1, [pc, #532]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bfe:	4b81      	ldr	r3, [pc, #516]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	497e      	ldr	r1, [pc, #504]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c1c:	4b79      	ldr	r3, [pc, #484]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	4976      	ldr	r1, [pc, #472]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3a:	4b72      	ldr	r3, [pc, #456]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f023 0210 	bic.w	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	496f      	ldr	r1, [pc, #444]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c58:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	4967      	ldr	r1, [pc, #412]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c76:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f023 0220 	bic.w	r2, r3, #32
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4960      	ldr	r1, [pc, #384]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c94:	4b5b      	ldr	r3, [pc, #364]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	4958      	ldr	r1, [pc, #352]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cb2:	4b54      	ldr	r3, [pc, #336]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4951      	ldr	r1, [pc, #324]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cd0:	4b4c      	ldr	r3, [pc, #304]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	4949      	ldr	r1, [pc, #292]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cee:	4b45      	ldr	r3, [pc, #276]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4942      	ldr	r1, [pc, #264]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d0c:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	493a      	ldr	r1, [pc, #232]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d2a:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	4933      	ldr	r1, [pc, #204]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d48:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	492b      	ldr	r1, [pc, #172]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4924      	ldr	r1, [pc, #144]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	491c      	ldr	r1, [pc, #112]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	4915      	ldr	r1, [pc, #84]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003dc0:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	490d      	ldr	r1, [pc, #52]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dea:	4906      	ldr	r1, [pc, #24]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00c      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dfc:	4b01      	ldr	r3, [pc, #4]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	e002      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e10:	490b      	ldr	r1, [pc, #44]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2e:	4904      	ldr	r1, [pc, #16]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3748      	adds	r7, #72	; 0x48
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e01d      	b.n	8003e92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fe f81e 	bl	8001eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f000 f9a6 	bl	80041d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_TIM_Base_Start_IT+0x50>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d00b      	beq.n	8003ede <HAL_TIM_Base_Start_IT+0x42>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d007      	beq.n	8003ede <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	00010007 	.word	0x00010007

08003ef0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10f      	bne.n	8003f38 <HAL_TIM_Base_Stop_IT+0x48>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	f240 4344 	movw	r3, #1092	; 0x444
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <HAL_TIM_Base_Stop_IT+0x48>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d122      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d11b      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f06f 0202 	mvn.w	r2, #2
 8003f72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f905 	bl	8004198 <HAL_TIM_IC_CaptureCallback>
 8003f8e:	e005      	b.n	8003f9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8f7 	bl	8004184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f908 	bl	80041ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d122      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d11b      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f06f 0204 	mvn.w	r2, #4
 8003fc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8db 	bl	8004198 <HAL_TIM_IC_CaptureCallback>
 8003fe2:	e005      	b.n	8003ff0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8cd 	bl	8004184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8de 	bl	80041ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d122      	bne.n	800404a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b08      	cmp	r3, #8
 8004010:	d11b      	bne.n	800404a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f06f 0208 	mvn.w	r2, #8
 800401a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2204      	movs	r2, #4
 8004020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8b1 	bl	8004198 <HAL_TIM_IC_CaptureCallback>
 8004036:	e005      	b.n	8004044 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f8a3 	bl	8004184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8b4 	bl	80041ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b10      	cmp	r3, #16
 8004056:	d122      	bne.n	800409e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b10      	cmp	r3, #16
 8004064:	d11b      	bne.n	800409e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f06f 0210 	mvn.w	r2, #16
 800406e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2208      	movs	r2, #8
 8004074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f887 	bl	8004198 <HAL_TIM_IC_CaptureCallback>
 800408a:	e005      	b.n	8004098 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f879 	bl	8004184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f88a 	bl	80041ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10e      	bne.n	80040ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d107      	bne.n	80040ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0201 	mvn.w	r2, #1
 80040c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fc fddf 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d10e      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	d107      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f9a3 	bl	800443c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004104:	d10e      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b80      	cmp	r3, #128	; 0x80
 8004112:	d107      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f996 	bl	8004450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d10e      	bne.n	8004150 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d107      	bne.n	8004150 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f838 	bl	80041c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b20      	cmp	r3, #32
 800415c:	d10e      	bne.n	800417c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b20      	cmp	r3, #32
 800416a:	d107      	bne.n	800417c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0220 	mvn.w	r2, #32
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f956 	bl	8004428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a42      	ldr	r2, [pc, #264]	; (80042f0 <TIM_Base_SetConfig+0x11c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f2:	d00f      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3f      	ldr	r2, [pc, #252]	; (80042f4 <TIM_Base_SetConfig+0x120>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a3e      	ldr	r2, [pc, #248]	; (80042f8 <TIM_Base_SetConfig+0x124>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a3d      	ldr	r2, [pc, #244]	; (80042fc <TIM_Base_SetConfig+0x128>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3c      	ldr	r2, [pc, #240]	; (8004300 <TIM_Base_SetConfig+0x12c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a31      	ldr	r2, [pc, #196]	; (80042f0 <TIM_Base_SetConfig+0x11c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01f      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d01b      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a2e      	ldr	r2, [pc, #184]	; (80042f4 <TIM_Base_SetConfig+0x120>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d017      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <TIM_Base_SetConfig+0x124>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a2c      	ldr	r2, [pc, #176]	; (80042fc <TIM_Base_SetConfig+0x128>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00f      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <TIM_Base_SetConfig+0x130>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <TIM_Base_SetConfig+0x134>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2a      	ldr	r2, [pc, #168]	; (800430c <TIM_Base_SetConfig+0x138>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a25      	ldr	r2, [pc, #148]	; (8004300 <TIM_Base_SetConfig+0x12c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d108      	bne.n	8004280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <TIM_Base_SetConfig+0x11c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d013      	beq.n	80042d4 <TIM_Base_SetConfig+0x100>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a13      	ldr	r2, [pc, #76]	; (80042fc <TIM_Base_SetConfig+0x128>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00f      	beq.n	80042d4 <TIM_Base_SetConfig+0x100>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <TIM_Base_SetConfig+0x130>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_Base_SetConfig+0x100>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <TIM_Base_SetConfig+0x134>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_Base_SetConfig+0x100>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a11      	ldr	r2, [pc, #68]	; (800430c <TIM_Base_SetConfig+0x138>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_Base_SetConfig+0x100>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <TIM_Base_SetConfig+0x12c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d103      	bne.n	80042dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	615a      	str	r2, [r3, #20]
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40013400 	.word	0x40013400
 8004300:	40015000 	.word	0x40015000
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004324:	2302      	movs	r3, #2
 8004326:	e06d      	b.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a30      	ldr	r2, [pc, #192]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d009      	beq.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2f      	ldr	r2, [pc, #188]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d108      	bne.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800436c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d01d      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d018      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1c      	ldr	r2, [pc, #112]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d013      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a11      	ldr	r2, [pc, #68]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10c      	bne.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40013400 	.word	0x40013400
 8004418:	40015000 	.word	0x40015000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40014000 	.word	0x40014000

08004428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e040      	b.n	80044f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fd fd82 	bl	8001f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fabc 	bl	8004a20 <UART_SetConfig>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e022      	b.n	80044f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fcca 	bl	8004e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fd51 	bl	8004f98 <UART_CheckIdleState>
 80044f6:	4603      	mov	r3, r0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	2b20      	cmp	r3, #32
 8004516:	f040 8081 	bne.w	800461c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_UART_Transmit+0x26>
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e079      	b.n	800461e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_UART_Transmit+0x38>
 8004534:	2302      	movs	r3, #2
 8004536:	e072      	b.n	800461e <HAL_UART_Transmit+0x11e>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2221      	movs	r2, #33	; 0x21
 800454a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800454c:	f7fd fdf0 	bl	8002130 <HAL_GetTick>
 8004550:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	88fa      	ldrh	r2, [r7, #6]
 8004556:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	88fa      	ldrh	r2, [r7, #6]
 800455e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456a:	d108      	bne.n	800457e <HAL_UART_Transmit+0x7e>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	e003      	b.n	8004586 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004586:	e02d      	b.n	80045e4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2200      	movs	r2, #0
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fd45 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e03d      	b.n	800461e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	881a      	ldrh	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b4:	b292      	uxth	r2, r2
 80045b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	3302      	adds	r3, #2
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	e008      	b.n	80045d2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	b292      	uxth	r2, r2
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1cb      	bne.n	8004588 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2200      	movs	r2, #0
 80045f8:	2140      	movs	r1, #64	; 0x40
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fd11 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e009      	b.n	800461e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800463a:	2b20      	cmp	r3, #32
 800463c:	f040 808a 	bne.w	8004754 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Receive_IT+0x24>
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e082      	b.n	8004756 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_UART_Receive_IT+0x36>
 800465a:	2302      	movs	r3, #2
 800465c:	e07b      	b.n	8004756 <HAL_UART_Receive_IT+0x12e>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	d10e      	bne.n	80046aa <HAL_UART_Receive_IT+0x82>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <HAL_UART_Receive_IT+0x78>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f240 12ff 	movw	r2, #511	; 0x1ff
 800469a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800469e:	e02d      	b.n	80046fc <HAL_UART_Receive_IT+0xd4>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	22ff      	movs	r2, #255	; 0xff
 80046a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046a8:	e028      	b.n	80046fc <HAL_UART_Receive_IT+0xd4>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <HAL_UART_Receive_IT+0xa6>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <HAL_UART_Receive_IT+0x9c>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	22ff      	movs	r2, #255	; 0xff
 80046be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c2:	e01b      	b.n	80046fc <HAL_UART_Receive_IT+0xd4>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	227f      	movs	r2, #127	; 0x7f
 80046c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046cc:	e016      	b.n	80046fc <HAL_UART_Receive_IT+0xd4>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d6:	d10d      	bne.n	80046f4 <HAL_UART_Receive_IT+0xcc>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_UART_Receive_IT+0xc2>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	227f      	movs	r2, #127	; 0x7f
 80046e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e8:	e008      	b.n	80046fc <HAL_UART_Receive_IT+0xd4>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	223f      	movs	r2, #63	; 0x3f
 80046ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046f2:	e003      	b.n	80046fc <HAL_UART_Receive_IT+0xd4>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2222      	movs	r2, #34	; 0x22
 8004706:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004720:	d107      	bne.n	8004732 <HAL_UART_Receive_IT+0x10a>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a0d      	ldr	r2, [pc, #52]	; (8004764 <HAL_UART_Receive_IT+0x13c>)
 800472e:	661a      	str	r2, [r3, #96]	; 0x60
 8004730:	e002      	b.n	8004738 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4a0c      	ldr	r2, [pc, #48]	; (8004768 <HAL_UART_Receive_IT+0x140>)
 8004736:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800474e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	0800525d 	.word	0x0800525d
 8004768:	080051b7 	.word	0x080051b7

0800476c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d113      	bne.n	80047c4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00e      	beq.n	80047c4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8114 	beq.w	80049e2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
      }
      return;
 80047c2:	e10e      	b.n	80049e2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80d6 	beq.w	8004978 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d105      	bne.n	80047e2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80cb 	beq.w	8004978 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <HAL_UART_IRQHandler+0x9e>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2201      	movs	r2, #1
 80047fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00e      	beq.n	8004832 <HAL_UART_IRQHandler+0xc6>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2202      	movs	r2, #2
 8004824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00e      	beq.n	800485a <HAL_UART_IRQHandler+0xee>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2204      	movs	r2, #4
 800484c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004852:	f043 0202 	orr.w	r2, r3, #2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d013      	beq.n	800488c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004884:	f043 0208 	orr.w	r2, r3, #8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00f      	beq.n	80048b6 <HAL_UART_IRQHandler+0x14a>
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8093 	beq.w	80049e6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d004      	beq.n	8004902 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d031      	beq.n	8004966 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fc08 	bl	8005118 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d123      	bne.n	800495e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004924:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d013      	beq.n	8004956 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004932:	4a30      	ldr	r2, [pc, #192]	; (80049f4 <HAL_UART_IRQHandler+0x288>)
 8004934:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd fd37 	bl	80023ae <HAL_DMA_Abort_IT>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d016      	beq.n	8004974 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004950:	4610      	mov	r0, r2
 8004952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004954:	e00e      	b.n	8004974 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f858 	bl	8004a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	e00a      	b.n	8004974 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f854 	bl	8004a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	e006      	b.n	8004974 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f850 	bl	8004a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004972:	e038      	b.n	80049e6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	bf00      	nop
    return;
 8004976:	e036      	b.n	80049e6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <HAL_UART_IRQHandler+0x232>
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fcb3 	bl	8005302 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800499c:	e026      	b.n	80049ec <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d017      	beq.n	80049ea <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
    }
    return;
 80049c2:	e012      	b.n	80049ea <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <HAL_UART_IRQHandler+0x280>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fbd3 	bl	8005184 <UART_EndTransmit_IT>
    return;
 80049de:	bf00      	nop
 80049e0:	e004      	b.n	80049ec <HAL_UART_IRQHandler+0x280>
      return;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <HAL_UART_IRQHandler+0x280>
    return;
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <HAL_UART_IRQHandler+0x280>
    return;
 80049ea:	bf00      	nop
  }

}
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	08005159 	.word	0x08005159

080049f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4bac      	ldr	r3, [pc, #688]	; (8004d00 <UART_SetConfig+0x2e0>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	6939      	ldr	r1, [r7, #16]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a9a      	ldr	r2, [pc, #616]	; (8004d04 <UART_SetConfig+0x2e4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d121      	bne.n	8004ae4 <UART_SetConfig+0xc4>
 8004aa0:	4b99      	ldr	r3, [pc, #612]	; (8004d08 <UART_SetConfig+0x2e8>)
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d817      	bhi.n	8004adc <UART_SetConfig+0xbc>
 8004aac:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <UART_SetConfig+0x94>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004ac5 	.word	0x08004ac5
 8004ab8:	08004ad1 	.word	0x08004ad1
 8004abc:	08004ad7 	.word	0x08004ad7
 8004ac0:	08004acb 	.word	0x08004acb
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e0b2      	b.n	8004c30 <UART_SetConfig+0x210>
 8004aca:	2302      	movs	r3, #2
 8004acc:	77fb      	strb	r3, [r7, #31]
 8004ace:	e0af      	b.n	8004c30 <UART_SetConfig+0x210>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e0ac      	b.n	8004c30 <UART_SetConfig+0x210>
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e0a9      	b.n	8004c30 <UART_SetConfig+0x210>
 8004adc:	2310      	movs	r3, #16
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	bf00      	nop
 8004ae2:	e0a5      	b.n	8004c30 <UART_SetConfig+0x210>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a88      	ldr	r2, [pc, #544]	; (8004d0c <UART_SetConfig+0x2ec>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d123      	bne.n	8004b36 <UART_SetConfig+0x116>
 8004aee:	4b86      	ldr	r3, [pc, #536]	; (8004d08 <UART_SetConfig+0x2e8>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afa:	d012      	beq.n	8004b22 <UART_SetConfig+0x102>
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d802      	bhi.n	8004b08 <UART_SetConfig+0xe8>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <UART_SetConfig+0xf6>
 8004b06:	e012      	b.n	8004b2e <UART_SetConfig+0x10e>
 8004b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0c:	d00c      	beq.n	8004b28 <UART_SetConfig+0x108>
 8004b0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b12:	d003      	beq.n	8004b1c <UART_SetConfig+0xfc>
 8004b14:	e00b      	b.n	8004b2e <UART_SetConfig+0x10e>
 8004b16:	2300      	movs	r3, #0
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e089      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e086      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b22:	2304      	movs	r3, #4
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e083      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	e080      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b2e:	2310      	movs	r3, #16
 8004b30:	77fb      	strb	r3, [r7, #31]
 8004b32:	bf00      	nop
 8004b34:	e07c      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a75      	ldr	r2, [pc, #468]	; (8004d10 <UART_SetConfig+0x2f0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d123      	bne.n	8004b88 <UART_SetConfig+0x168>
 8004b40:	4b71      	ldr	r3, [pc, #452]	; (8004d08 <UART_SetConfig+0x2e8>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b4c:	d012      	beq.n	8004b74 <UART_SetConfig+0x154>
 8004b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b52:	d802      	bhi.n	8004b5a <UART_SetConfig+0x13a>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <UART_SetConfig+0x148>
 8004b58:	e012      	b.n	8004b80 <UART_SetConfig+0x160>
 8004b5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b5e:	d00c      	beq.n	8004b7a <UART_SetConfig+0x15a>
 8004b60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b64:	d003      	beq.n	8004b6e <UART_SetConfig+0x14e>
 8004b66:	e00b      	b.n	8004b80 <UART_SetConfig+0x160>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	e060      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	77fb      	strb	r3, [r7, #31]
 8004b72:	e05d      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b74:	2304      	movs	r3, #4
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	e05a      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e057      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b80:	2310      	movs	r3, #16
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	bf00      	nop
 8004b86:	e053      	b.n	8004c30 <UART_SetConfig+0x210>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a61      	ldr	r2, [pc, #388]	; (8004d14 <UART_SetConfig+0x2f4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d123      	bne.n	8004bda <UART_SetConfig+0x1ba>
 8004b92:	4b5d      	ldr	r3, [pc, #372]	; (8004d08 <UART_SetConfig+0x2e8>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9e:	d012      	beq.n	8004bc6 <UART_SetConfig+0x1a6>
 8004ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba4:	d802      	bhi.n	8004bac <UART_SetConfig+0x18c>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <UART_SetConfig+0x19a>
 8004baa:	e012      	b.n	8004bd2 <UART_SetConfig+0x1b2>
 8004bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bb0:	d00c      	beq.n	8004bcc <UART_SetConfig+0x1ac>
 8004bb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bb6:	d003      	beq.n	8004bc0 <UART_SetConfig+0x1a0>
 8004bb8:	e00b      	b.n	8004bd2 <UART_SetConfig+0x1b2>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e037      	b.n	8004c30 <UART_SetConfig+0x210>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e034      	b.n	8004c30 <UART_SetConfig+0x210>
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e031      	b.n	8004c30 <UART_SetConfig+0x210>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e02e      	b.n	8004c30 <UART_SetConfig+0x210>
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	bf00      	nop
 8004bd8:	e02a      	b.n	8004c30 <UART_SetConfig+0x210>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a4e      	ldr	r2, [pc, #312]	; (8004d18 <UART_SetConfig+0x2f8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d123      	bne.n	8004c2c <UART_SetConfig+0x20c>
 8004be4:	4b48      	ldr	r3, [pc, #288]	; (8004d08 <UART_SetConfig+0x2e8>)
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf0:	d012      	beq.n	8004c18 <UART_SetConfig+0x1f8>
 8004bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf6:	d802      	bhi.n	8004bfe <UART_SetConfig+0x1de>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <UART_SetConfig+0x1ec>
 8004bfc:	e012      	b.n	8004c24 <UART_SetConfig+0x204>
 8004bfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c02:	d00c      	beq.n	8004c1e <UART_SetConfig+0x1fe>
 8004c04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c08:	d003      	beq.n	8004c12 <UART_SetConfig+0x1f2>
 8004c0a:	e00b      	b.n	8004c24 <UART_SetConfig+0x204>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e00e      	b.n	8004c30 <UART_SetConfig+0x210>
 8004c12:	2302      	movs	r3, #2
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e00b      	b.n	8004c30 <UART_SetConfig+0x210>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e008      	b.n	8004c30 <UART_SetConfig+0x210>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e005      	b.n	8004c30 <UART_SetConfig+0x210>
 8004c24:	2310      	movs	r3, #16
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	bf00      	nop
 8004c2a:	e001      	b.n	8004c30 <UART_SetConfig+0x210>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c38:	f040 8090 	bne.w	8004d5c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004c3c:	7ffb      	ldrb	r3, [r7, #31]
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d86c      	bhi.n	8004d1c <UART_SetConfig+0x2fc>
 8004c42:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <UART_SetConfig+0x228>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004c6d 	.word	0x08004c6d
 8004c4c:	08004c8d 	.word	0x08004c8d
 8004c50:	08004cad 	.word	0x08004cad
 8004c54:	08004d1d 	.word	0x08004d1d
 8004c58:	08004cc9 	.word	0x08004cc9
 8004c5c:	08004d1d 	.word	0x08004d1d
 8004c60:	08004d1d 	.word	0x08004d1d
 8004c64:	08004d1d 	.word	0x08004d1d
 8004c68:	08004ce9 	.word	0x08004ce9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c6c:	f7fe fe88 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004c70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	005a      	lsls	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	61bb      	str	r3, [r7, #24]
        break;
 8004c8a:	e04a      	b.n	8004d22 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7fe fe9a 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8004c90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	005a      	lsls	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	441a      	add	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	61bb      	str	r3, [r7, #24]
        break;
 8004caa:	e03a      	b.n	8004d22 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004cb6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6852      	ldr	r2, [r2, #4]
 8004cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	61bb      	str	r3, [r7, #24]
        break;
 8004cc6:	e02c      	b.n	8004d22 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc8:	f7fe fde4 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8004ccc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	005a      	lsls	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	61bb      	str	r3, [r7, #24]
        break;
 8004ce6:	e01c      	b.n	8004d22 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	61bb      	str	r3, [r7, #24]
        break;
 8004cfe:	e010      	b.n	8004d22 <UART_SetConfig+0x302>
 8004d00:	efff69f3 	.word	0xefff69f3
 8004d04:	40013800 	.word	0x40013800
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40004400 	.word	0x40004400
 8004d10:	40004800 	.word	0x40004800
 8004d14:	40004c00 	.word	0x40004c00
 8004d18:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
        break;
 8004d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d916      	bls.n	8004d56 <UART_SetConfig+0x336>
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d212      	bcs.n	8004d56 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f023 030f 	bic.w	r3, r3, #15
 8004d38:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	897b      	ldrh	r3, [r7, #10]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	897a      	ldrh	r2, [r7, #10]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	e072      	b.n	8004e3c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
 8004d5a:	e06f      	b.n	8004e3c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004d5c:	7ffb      	ldrb	r3, [r7, #31]
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d85b      	bhi.n	8004e1a <UART_SetConfig+0x3fa>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <UART_SetConfig+0x348>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004dab 	.word	0x08004dab
 8004d70:	08004dc9 	.word	0x08004dc9
 8004d74:	08004e1b 	.word	0x08004e1b
 8004d78:	08004de5 	.word	0x08004de5
 8004d7c:	08004e1b 	.word	0x08004e1b
 8004d80:	08004e1b 	.word	0x08004e1b
 8004d84:	08004e1b 	.word	0x08004e1b
 8004d88:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d8c:	f7fe fdf8 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004d90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	085a      	lsrs	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	61bb      	str	r3, [r7, #24]
        break;
 8004da8:	e03a      	b.n	8004e20 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004daa:	f7fe fe0b 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8004dae:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	085a      	lsrs	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	441a      	add	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	61bb      	str	r3, [r7, #24]
        break;
 8004dc6:	e02b      	b.n	8004e20 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004dd2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6852      	ldr	r2, [r2, #4]
 8004dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	61bb      	str	r3, [r7, #24]
        break;
 8004de2:	e01d      	b.n	8004e20 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de4:	f7fe fd56 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8004de8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	085a      	lsrs	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	441a      	add	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	61bb      	str	r3, [r7, #24]
        break;
 8004e00:	e00e      	b.n	8004e20 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	61bb      	str	r3, [r7, #24]
        break;
 8004e18:	e002      	b.n	8004e20 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
        break;
 8004e1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b0f      	cmp	r3, #15
 8004e24:	d908      	bls.n	8004e38 <UART_SetConfig+0x418>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d204      	bcs.n	8004e38 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	e001      	b.n	8004e3c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop

08004e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f52:	d10a      	bne.n	8004f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fa6:	f7fd f8c3 	bl	8002130 <HAL_GetTick>
 8004faa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d10e      	bne.n	8004fd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f82a 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e020      	b.n	800501a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d10e      	bne.n	8005004 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f814 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e00a      	b.n	800501a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	603b      	str	r3, [r7, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005032:	e05d      	b.n	80050f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d059      	beq.n	80050f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503c:	f7fd f878 	bl	8002130 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <UART_WaitOnFlagUntilTimeout+0x30>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d11b      	bne.n	800508a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005060:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e042      	b.n	8005110 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02b      	beq.n	80050f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a6:	d123      	bne.n	80050f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e00f      	b.n	8005110 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4013      	ands	r3, r2
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	429a      	cmp	r2, r3
 800510c:	d092      	beq.n	8005034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800512e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff fc48 	bl	8004a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff fc25 	bl	80049f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051c4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ca:	2b22      	cmp	r3, #34	; 0x22
 80051cc:	d13a      	bne.n	8005244 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051d4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051d6:	89bb      	ldrh	r3, [r7, #12]
 80051d8:	b2d9      	uxtb	r1, r3
 80051da:	89fb      	ldrh	r3, [r7, #14]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	400a      	ands	r2, r1
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d121      	bne.n	8005254 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800521e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0201 	bic.w	r2, r2, #1
 800522e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7fb fda9 	bl	8000d94 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005242:	e007      	b.n	8005254 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0208 	orr.w	r2, r2, #8
 8005252:	619a      	str	r2, [r3, #24]
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800526a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005270:	2b22      	cmp	r3, #34	; 0x22
 8005272:	d13a      	bne.n	80052ea <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800527a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005280:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005282:	89ba      	ldrh	r2, [r7, #12]
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	4013      	ands	r3, r2
 8005288:	b29a      	uxth	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	1c9a      	adds	r2, r3, #2
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d121      	bne.n	80052fa <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052c4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fb fd56 	bl	8000d94 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052e8:	e007      	b.n	80052fa <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0208 	orr.w	r2, r2, #8
 80052f8:	619a      	str	r2, [r3, #24]
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
	...

08005318 <__errno>:
 8005318:	4b01      	ldr	r3, [pc, #4]	; (8005320 <__errno+0x8>)
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000128 	.word	0x20000128

08005324 <__libc_init_array>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4e0d      	ldr	r6, [pc, #52]	; (800535c <__libc_init_array+0x38>)
 8005328:	4c0d      	ldr	r4, [pc, #52]	; (8005360 <__libc_init_array+0x3c>)
 800532a:	1ba4      	subs	r4, r4, r6
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	2500      	movs	r5, #0
 8005330:	42a5      	cmp	r5, r4
 8005332:	d109      	bne.n	8005348 <__libc_init_array+0x24>
 8005334:	4e0b      	ldr	r6, [pc, #44]	; (8005364 <__libc_init_array+0x40>)
 8005336:	4c0c      	ldr	r4, [pc, #48]	; (8005368 <__libc_init_array+0x44>)
 8005338:	f000 f976 	bl	8005628 <_init>
 800533c:	1ba4      	subs	r4, r4, r6
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	2500      	movs	r5, #0
 8005342:	42a5      	cmp	r5, r4
 8005344:	d105      	bne.n	8005352 <__libc_init_array+0x2e>
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800534c:	4798      	blx	r3
 800534e:	3501      	adds	r5, #1
 8005350:	e7ee      	b.n	8005330 <__libc_init_array+0xc>
 8005352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005356:	4798      	blx	r3
 8005358:	3501      	adds	r5, #1
 800535a:	e7f2      	b.n	8005342 <__libc_init_array+0x1e>
 800535c:	08005684 	.word	0x08005684
 8005360:	08005684 	.word	0x08005684
 8005364:	08005684 	.word	0x08005684
 8005368:	08005688 	.word	0x08005688

0800536c <malloc>:
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <malloc+0xc>)
 800536e:	4601      	mov	r1, r0
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	f000 b86d 	b.w	8005450 <_malloc_r>
 8005376:	bf00      	nop
 8005378:	20000128 	.word	0x20000128

0800537c <free>:
 800537c:	4b02      	ldr	r3, [pc, #8]	; (8005388 <free+0xc>)
 800537e:	4601      	mov	r1, r0
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	f000 b817 	b.w	80053b4 <_free_r>
 8005386:	bf00      	nop
 8005388:	20000128 	.word	0x20000128

0800538c <memcpy>:
 800538c:	b510      	push	{r4, lr}
 800538e:	1e43      	subs	r3, r0, #1
 8005390:	440a      	add	r2, r1
 8005392:	4291      	cmp	r1, r2
 8005394:	d100      	bne.n	8005398 <memcpy+0xc>
 8005396:	bd10      	pop	{r4, pc}
 8005398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053a0:	e7f7      	b.n	8005392 <memcpy+0x6>

080053a2 <memset>:
 80053a2:	4402      	add	r2, r0
 80053a4:	4603      	mov	r3, r0
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d100      	bne.n	80053ac <memset+0xa>
 80053aa:	4770      	bx	lr
 80053ac:	f803 1b01 	strb.w	r1, [r3], #1
 80053b0:	e7f9      	b.n	80053a6 <memset+0x4>
	...

080053b4 <_free_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4605      	mov	r5, r0
 80053b8:	2900      	cmp	r1, #0
 80053ba:	d045      	beq.n	8005448 <_free_r+0x94>
 80053bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c0:	1f0c      	subs	r4, r1, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bfb8      	it	lt
 80053c6:	18e4      	addlt	r4, r4, r3
 80053c8:	f000 f8ac 	bl	8005524 <__malloc_lock>
 80053cc:	4a1f      	ldr	r2, [pc, #124]	; (800544c <_free_r+0x98>)
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	4610      	mov	r0, r2
 80053d2:	b933      	cbnz	r3, 80053e2 <_free_r+0x2e>
 80053d4:	6063      	str	r3, [r4, #4]
 80053d6:	6014      	str	r4, [r2, #0]
 80053d8:	4628      	mov	r0, r5
 80053da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053de:	f000 b8a2 	b.w	8005526 <__malloc_unlock>
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	d90c      	bls.n	8005400 <_free_r+0x4c>
 80053e6:	6821      	ldr	r1, [r4, #0]
 80053e8:	1862      	adds	r2, r4, r1
 80053ea:	4293      	cmp	r3, r2
 80053ec:	bf04      	itt	eq
 80053ee:	681a      	ldreq	r2, [r3, #0]
 80053f0:	685b      	ldreq	r3, [r3, #4]
 80053f2:	6063      	str	r3, [r4, #4]
 80053f4:	bf04      	itt	eq
 80053f6:	1852      	addeq	r2, r2, r1
 80053f8:	6022      	streq	r2, [r4, #0]
 80053fa:	6004      	str	r4, [r0, #0]
 80053fc:	e7ec      	b.n	80053d8 <_free_r+0x24>
 80053fe:	4613      	mov	r3, r2
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	b10a      	cbz	r2, 8005408 <_free_r+0x54>
 8005404:	42a2      	cmp	r2, r4
 8005406:	d9fa      	bls.n	80053fe <_free_r+0x4a>
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	1858      	adds	r0, r3, r1
 800540c:	42a0      	cmp	r0, r4
 800540e:	d10b      	bne.n	8005428 <_free_r+0x74>
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	4401      	add	r1, r0
 8005414:	1858      	adds	r0, r3, r1
 8005416:	4282      	cmp	r2, r0
 8005418:	6019      	str	r1, [r3, #0]
 800541a:	d1dd      	bne.n	80053d8 <_free_r+0x24>
 800541c:	6810      	ldr	r0, [r2, #0]
 800541e:	6852      	ldr	r2, [r2, #4]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	4401      	add	r1, r0
 8005424:	6019      	str	r1, [r3, #0]
 8005426:	e7d7      	b.n	80053d8 <_free_r+0x24>
 8005428:	d902      	bls.n	8005430 <_free_r+0x7c>
 800542a:	230c      	movs	r3, #12
 800542c:	602b      	str	r3, [r5, #0]
 800542e:	e7d3      	b.n	80053d8 <_free_r+0x24>
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	1821      	adds	r1, r4, r0
 8005434:	428a      	cmp	r2, r1
 8005436:	bf04      	itt	eq
 8005438:	6811      	ldreq	r1, [r2, #0]
 800543a:	6852      	ldreq	r2, [r2, #4]
 800543c:	6062      	str	r2, [r4, #4]
 800543e:	bf04      	itt	eq
 8005440:	1809      	addeq	r1, r1, r0
 8005442:	6021      	streq	r1, [r4, #0]
 8005444:	605c      	str	r4, [r3, #4]
 8005446:	e7c7      	b.n	80053d8 <_free_r+0x24>
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	bf00      	nop
 800544c:	200001b0 	.word	0x200001b0

08005450 <_malloc_r>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	1ccd      	adds	r5, r1, #3
 8005454:	f025 0503 	bic.w	r5, r5, #3
 8005458:	3508      	adds	r5, #8
 800545a:	2d0c      	cmp	r5, #12
 800545c:	bf38      	it	cc
 800545e:	250c      	movcc	r5, #12
 8005460:	2d00      	cmp	r5, #0
 8005462:	4606      	mov	r6, r0
 8005464:	db01      	blt.n	800546a <_malloc_r+0x1a>
 8005466:	42a9      	cmp	r1, r5
 8005468:	d903      	bls.n	8005472 <_malloc_r+0x22>
 800546a:	230c      	movs	r3, #12
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	2000      	movs	r0, #0
 8005470:	bd70      	pop	{r4, r5, r6, pc}
 8005472:	f000 f857 	bl	8005524 <__malloc_lock>
 8005476:	4a21      	ldr	r2, [pc, #132]	; (80054fc <_malloc_r+0xac>)
 8005478:	6814      	ldr	r4, [r2, #0]
 800547a:	4621      	mov	r1, r4
 800547c:	b991      	cbnz	r1, 80054a4 <_malloc_r+0x54>
 800547e:	4c20      	ldr	r4, [pc, #128]	; (8005500 <_malloc_r+0xb0>)
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	b91b      	cbnz	r3, 800548c <_malloc_r+0x3c>
 8005484:	4630      	mov	r0, r6
 8005486:	f000 f83d 	bl	8005504 <_sbrk_r>
 800548a:	6020      	str	r0, [r4, #0]
 800548c:	4629      	mov	r1, r5
 800548e:	4630      	mov	r0, r6
 8005490:	f000 f838 	bl	8005504 <_sbrk_r>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d124      	bne.n	80054e2 <_malloc_r+0x92>
 8005498:	230c      	movs	r3, #12
 800549a:	6033      	str	r3, [r6, #0]
 800549c:	4630      	mov	r0, r6
 800549e:	f000 f842 	bl	8005526 <__malloc_unlock>
 80054a2:	e7e4      	b.n	800546e <_malloc_r+0x1e>
 80054a4:	680b      	ldr	r3, [r1, #0]
 80054a6:	1b5b      	subs	r3, r3, r5
 80054a8:	d418      	bmi.n	80054dc <_malloc_r+0x8c>
 80054aa:	2b0b      	cmp	r3, #11
 80054ac:	d90f      	bls.n	80054ce <_malloc_r+0x7e>
 80054ae:	600b      	str	r3, [r1, #0]
 80054b0:	50cd      	str	r5, [r1, r3]
 80054b2:	18cc      	adds	r4, r1, r3
 80054b4:	4630      	mov	r0, r6
 80054b6:	f000 f836 	bl	8005526 <__malloc_unlock>
 80054ba:	f104 000b 	add.w	r0, r4, #11
 80054be:	1d23      	adds	r3, r4, #4
 80054c0:	f020 0007 	bic.w	r0, r0, #7
 80054c4:	1ac3      	subs	r3, r0, r3
 80054c6:	d0d3      	beq.n	8005470 <_malloc_r+0x20>
 80054c8:	425a      	negs	r2, r3
 80054ca:	50e2      	str	r2, [r4, r3]
 80054cc:	e7d0      	b.n	8005470 <_malloc_r+0x20>
 80054ce:	428c      	cmp	r4, r1
 80054d0:	684b      	ldr	r3, [r1, #4]
 80054d2:	bf16      	itet	ne
 80054d4:	6063      	strne	r3, [r4, #4]
 80054d6:	6013      	streq	r3, [r2, #0]
 80054d8:	460c      	movne	r4, r1
 80054da:	e7eb      	b.n	80054b4 <_malloc_r+0x64>
 80054dc:	460c      	mov	r4, r1
 80054de:	6849      	ldr	r1, [r1, #4]
 80054e0:	e7cc      	b.n	800547c <_malloc_r+0x2c>
 80054e2:	1cc4      	adds	r4, r0, #3
 80054e4:	f024 0403 	bic.w	r4, r4, #3
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d005      	beq.n	80054f8 <_malloc_r+0xa8>
 80054ec:	1a21      	subs	r1, r4, r0
 80054ee:	4630      	mov	r0, r6
 80054f0:	f000 f808 	bl	8005504 <_sbrk_r>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d0cf      	beq.n	8005498 <_malloc_r+0x48>
 80054f8:	6025      	str	r5, [r4, #0]
 80054fa:	e7db      	b.n	80054b4 <_malloc_r+0x64>
 80054fc:	200001b0 	.word	0x200001b0
 8005500:	200001b4 	.word	0x200001b4

08005504 <_sbrk_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4c06      	ldr	r4, [pc, #24]	; (8005520 <_sbrk_r+0x1c>)
 8005508:	2300      	movs	r3, #0
 800550a:	4605      	mov	r5, r0
 800550c:	4608      	mov	r0, r1
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	f7fc fc14 	bl	8001d3c <_sbrk>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_sbrk_r+0x1a>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	b103      	cbz	r3, 800551e <_sbrk_r+0x1a>
 800551c:	602b      	str	r3, [r5, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20000458 	.word	0x20000458

08005524 <__malloc_lock>:
 8005524:	4770      	bx	lr

08005526 <__malloc_unlock>:
 8005526:	4770      	bx	lr

08005528 <ceil>:
 8005528:	ec51 0b10 	vmov	r0, r1, d0
 800552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005534:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005538:	2e13      	cmp	r6, #19
 800553a:	460c      	mov	r4, r1
 800553c:	ee10 5a10 	vmov	r5, s0
 8005540:	4680      	mov	r8, r0
 8005542:	dc30      	bgt.n	80055a6 <ceil+0x7e>
 8005544:	2e00      	cmp	r6, #0
 8005546:	da12      	bge.n	800556e <ceil+0x46>
 8005548:	a333      	add	r3, pc, #204	; (adr r3, 8005618 <ceil+0xf0>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fa fe49 	bl	80001e4 <__adddf3>
 8005552:	2200      	movs	r2, #0
 8005554:	2300      	movs	r3, #0
 8005556:	f7fb fa8b 	bl	8000a70 <__aeabi_dcmpgt>
 800555a:	b128      	cbz	r0, 8005568 <ceil+0x40>
 800555c:	2c00      	cmp	r4, #0
 800555e:	db55      	blt.n	800560c <ceil+0xe4>
 8005560:	432c      	orrs	r4, r5
 8005562:	d057      	beq.n	8005614 <ceil+0xec>
 8005564:	4c2e      	ldr	r4, [pc, #184]	; (8005620 <ceil+0xf8>)
 8005566:	2500      	movs	r5, #0
 8005568:	4621      	mov	r1, r4
 800556a:	4628      	mov	r0, r5
 800556c:	e025      	b.n	80055ba <ceil+0x92>
 800556e:	4f2d      	ldr	r7, [pc, #180]	; (8005624 <ceil+0xfc>)
 8005570:	4137      	asrs	r7, r6
 8005572:	ea01 0307 	and.w	r3, r1, r7
 8005576:	4303      	orrs	r3, r0
 8005578:	d01f      	beq.n	80055ba <ceil+0x92>
 800557a:	a327      	add	r3, pc, #156	; (adr r3, 8005618 <ceil+0xf0>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f7fa fe30 	bl	80001e4 <__adddf3>
 8005584:	2200      	movs	r2, #0
 8005586:	2300      	movs	r3, #0
 8005588:	f7fb fa72 	bl	8000a70 <__aeabi_dcmpgt>
 800558c:	2800      	cmp	r0, #0
 800558e:	d0eb      	beq.n	8005568 <ceil+0x40>
 8005590:	2c00      	cmp	r4, #0
 8005592:	bfc2      	ittt	gt
 8005594:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8005598:	fa43 f606 	asrgt.w	r6, r3, r6
 800559c:	19a4      	addgt	r4, r4, r6
 800559e:	ea24 0407 	bic.w	r4, r4, r7
 80055a2:	2500      	movs	r5, #0
 80055a4:	e7e0      	b.n	8005568 <ceil+0x40>
 80055a6:	2e33      	cmp	r6, #51	; 0x33
 80055a8:	dd0b      	ble.n	80055c2 <ceil+0x9a>
 80055aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80055ae:	d104      	bne.n	80055ba <ceil+0x92>
 80055b0:	ee10 2a10 	vmov	r2, s0
 80055b4:	460b      	mov	r3, r1
 80055b6:	f7fa fe15 	bl	80001e4 <__adddf3>
 80055ba:	ec41 0b10 	vmov	d0, r0, r1
 80055be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ca:	fa23 f707 	lsr.w	r7, r3, r7
 80055ce:	4207      	tst	r7, r0
 80055d0:	d0f3      	beq.n	80055ba <ceil+0x92>
 80055d2:	a311      	add	r3, pc, #68	; (adr r3, 8005618 <ceil+0xf0>)
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f7fa fe04 	bl	80001e4 <__adddf3>
 80055dc:	2200      	movs	r2, #0
 80055de:	2300      	movs	r3, #0
 80055e0:	f7fb fa46 	bl	8000a70 <__aeabi_dcmpgt>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d0bf      	beq.n	8005568 <ceil+0x40>
 80055e8:	2c00      	cmp	r4, #0
 80055ea:	dd02      	ble.n	80055f2 <ceil+0xca>
 80055ec:	2e14      	cmp	r6, #20
 80055ee:	d103      	bne.n	80055f8 <ceil+0xd0>
 80055f0:	3401      	adds	r4, #1
 80055f2:	ea25 0507 	bic.w	r5, r5, r7
 80055f6:	e7b7      	b.n	8005568 <ceil+0x40>
 80055f8:	2301      	movs	r3, #1
 80055fa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80055fe:	fa03 f606 	lsl.w	r6, r3, r6
 8005602:	4435      	add	r5, r6
 8005604:	4545      	cmp	r5, r8
 8005606:	bf38      	it	cc
 8005608:	18e4      	addcc	r4, r4, r3
 800560a:	e7f2      	b.n	80055f2 <ceil+0xca>
 800560c:	2500      	movs	r5, #0
 800560e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005612:	e7a9      	b.n	8005568 <ceil+0x40>
 8005614:	4625      	mov	r5, r4
 8005616:	e7a7      	b.n	8005568 <ceil+0x40>
 8005618:	8800759c 	.word	0x8800759c
 800561c:	7e37e43c 	.word	0x7e37e43c
 8005620:	3ff00000 	.word	0x3ff00000
 8005624:	000fffff 	.word	0x000fffff

08005628 <_init>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr

08005634 <_fini>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr
